{
  "address": "0x959922bE3CAee4b8Cd9a407cc3ac1C251C2007B1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum LoanLibrary.LoanType",
          "name": "loanType",
          "type": "uint8"
        }
      ],
      "name": "LoanApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum LoanLibrary.LoanType",
          "name": "loanType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "LoanChallenged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "partitionsToPurchase",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        }
      ],
      "name": "LoanPartitionsPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum LoanLibrary.LoanType",
          "name": "loanType",
          "type": "uint8"
        }
      ],
      "name": "LoanRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum LoanLibrary.LoanType",
          "name": "loanType",
          "type": "uint8"
        }
      ],
      "name": "LoanStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "enum LoanLibrary.LoanType",
          "name": "loanType",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "seeker",
          "type": "address"
        }
      ],
      "name": "PaymentExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOfTokens",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "generation",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "onProjectTokens",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "PaymentReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PersonalLoanRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "milestoneNumber",
          "type": "uint256"
        }
      ],
      "name": "ProjectLoanMilestoneApprovalRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "decision",
          "type": "bool"
        }
      ],
      "name": "ProjectLoanMilestoneDecided",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProjectLoanRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOfProjectTokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "discountedPrice",
          "type": "uint256"
        }
      ],
      "name": "ProjectTokenPaymentReceived",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "applyMilestone",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "balanceOfAllFundingNFTGenerations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "generation",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "balanceOfFundingNFTGeneration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseAmountForEachPartition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "challengeLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "decision",
          "type": "bool"
        }
      ],
      "name": "decideForLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "decision",
          "type": "bool"
        }
      ],
      "name": "decideForMilestone",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrow",
      "outputs": [
        {
          "internalType": "contract IEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "executePayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "partitionsToPurchase",
          "type": "uint256"
        }
      ],
      "name": "fundLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingNFT",
      "outputs": [
        {
          "internalType": "contract IERC1155Mint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingTimeInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountFundingNFT",
          "type": "uint256"
        }
      ],
      "name": "getAmountOfProjectTokensToReceive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getAmountToBeRepaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAvailableFundingNFTForConversion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getDiscountedProjectTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getLoanMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "loanId",
              "type": "uint256"
            },
            {
              "internalType": "enum LoanLibrary.LoanType",
              "name": "loanType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "approvalDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startingDate",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "collateralAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lendingAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalPartitions",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalInterest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "interestPercentage",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "extraInfo",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "partitionsPurchased",
              "type": "uint256"
            }
          ],
          "internalType": "struct LoanLibrary.LoanDetails",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "enum LoanLibrary.LoanStatus",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "enum LoanLibrary.RepaymentBatchType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "milestone_",
          "type": "uint256"
        }
      ],
      "name": "getMilestonesInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getProjectTokenPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        }
      ],
      "name": "getTotalInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalInterest",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "contract IGovernance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "escrowAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "governanceAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lendingToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "mainNFT_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fundingNFT_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseAmountForEachPartition_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumInterestPercentage_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxMilestones_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "milestoneExtensionInterval_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingBatches_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingTimeInterval_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fundingTimeInterval_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "loanDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "internalType": "enum LoanLibrary.LoanType",
          "name": "loanType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "approvalDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startingDate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lendingAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPartitions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestPercentage",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "extraInfo",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "partitionsPurchased",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "loanSeeker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "loanStatus",
      "outputs": [
        {
          "internalType": "enum LoanLibrary.LoanStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mainNFT",
      "outputs": [
        {
          "internalType": "contract IERC721Mint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMilestones",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "milestoneExtensionInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumInterestPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "personalLoanPayments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "batchesPaid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountEachBatch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountOfBatches",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeIntervalBetweenBatches",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "batchesSkipped",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "batchStartingTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "batchDeadlineTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "enum LoanLibrary.RepaymentBatchType",
          "name": "repaymentBatchType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projectLoanPayments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalMilestones",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "awaitingForRepaymentDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paymentTimeInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "milestonesDelivered",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "milestonesExtended",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentMilestoneStartingTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentMilestoneDeadlineTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "discountPerMillion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "partitionsPaidInProjectTokens",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOfTokens",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "onProjectTokens",
          "type": "bool"
        }
      ],
      "name": "receivePayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountRequested",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountOfBatches",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "batchTimeInterval",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "extraInfo",
          "type": "string"
        },
        {
          "internalType": "enum LoanLibrary.RepaymentBatchType",
          "name": "repaymentBatchType",
          "type": "uint8"
        }
      ],
      "name": "requestPersonalLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "amountRequestedPerMilestone",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "projectTokenPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "discountPerMillion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalMilestones",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "milestoneDurations",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "paymentTimeInterval",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "extraInfo",
          "type": "string"
        }
      ],
      "name": "requestProjectLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLoans",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingBatches",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingTimeInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc567565dc4a4aec4fb4733da0a849e68d594810a872a711f63d35ade024a8218",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x959922bE3CAee4b8Cd9a407cc3ac1C251C2007B1",
    "transactionIndex": 0,
    "gasUsed": "3967240",
    "logsBloom": "0x
    "blockHash": "0xdcdee95b84f9aa636aeaec3f03b6a47dbd55f10227c19c50761cbf13a38ddc11",
    "transactionHash": "0xc567565dc4a4aec4fb4733da0a849e68d594810a872a711f63d35ade024a8218",
    "logs": [],
    "blockNumber": 17,
    "cumulativeGasUsed": "3967240",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e60bb0e73d6effd5378c34ac90e2d948",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum LoanLibrary.LoanType\",\"name\":\"loanType\",\"type\":\"uint8\"}],\"name\":\"LoanApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum LoanLibrary.LoanType\",\"name\":\"loanType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"LoanChallenged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"partitionsToPurchase\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"}],\"name\":\"LoanPartitionsPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum LoanLibrary.LoanType\",\"name\":\"loanType\",\"type\":\"uint8\"}],\"name\":\"LoanRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum LoanLibrary.LoanType\",\"name\":\"loanType\",\"type\":\"uint8\"}],\"name\":\"LoanStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum LoanLibrary.LoanType\",\"name\":\"loanType\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seeker\",\"type\":\"address\"}],\"name\":\"PaymentExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfTokens\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"onProjectTokens\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"PaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PersonalLoanRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"milestoneNumber\",\"type\":\"uint256\"}],\"name\":\"ProjectLoanMilestoneApprovalRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"decision\",\"type\":\"bool\"}],\"name\":\"ProjectLoanMilestoneDecided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProjectLoanRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfProjectTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"discountedPrice\",\"type\":\"uint256\"}],\"name\":\"ProjectTokenPaymentReceived\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"applyMilestone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"balanceOfAllFundingNFTGenerations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"generation\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"balanceOfFundingNFTGeneration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseAmountForEachPartition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"challengeLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"decision\",\"type\":\"bool\"}],\"name\":\"decideForLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"decision\",\"type\":\"bool\"}],\"name\":\"decideForMilestone\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"internalType\":\"contract IEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"executePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partitionsToPurchase\",\"type\":\"uint256\"}],\"name\":\"fundLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingNFT\",\"outputs\":[{\"internalType\":\"contract IERC1155Mint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingTimeInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountFundingNFT\",\"type\":\"uint256\"}],\"name\":\"getAmountOfProjectTokensToReceive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getAmountToBeRepaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAvailableFundingNFTForConversion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getDiscountedProjectTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getLoanMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"enum LoanLibrary.LoanType\",\"name\":\"loanType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"approvalDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPartitions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestPercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"extraInfo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"partitionsPurchased\",\"type\":\"uint256\"}],\"internalType\":\"struct LoanLibrary.LoanDetails\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"enum LoanLibrary.LoanStatus\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"enum LoanLibrary.RepaymentBatchType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"milestone_\",\"type\":\"uint256\"}],\"name\":\"getMilestonesInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getProjectTokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"}],\"name\":\"getTotalInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalInterest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"contract IGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"escrowAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governanceAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendingToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mainNFT_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fundingNFT_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseAmountForEachPartition_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumInterestPercentage_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxMilestones_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"milestoneExtensionInterval_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingBatches_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTimeInterval_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingTimeInterval_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loanDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"enum LoanLibrary.LoanType\",\"name\":\"loanType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"approvalDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendingAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPartitions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestPercentage\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"extraInfo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"partitionsPurchased\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loanSeeker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"loanStatus\",\"outputs\":[{\"internalType\":\"enum LoanLibrary.LoanStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mainNFT\",\"outputs\":[{\"internalType\":\"contract IERC721Mint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMilestones\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"milestoneExtensionInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumInterestPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"personalLoanPayments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"batchesPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountEachBatch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountOfBatches\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeIntervalBetweenBatches\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchesSkipped\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchStartingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchDeadlineTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"enum LoanLibrary.RepaymentBatchType\",\"name\":\"repaymentBatchType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectLoanPayments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalMilestones\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"awaitingForRepaymentDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentTimeInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"milestonesDelivered\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"milestonesExtended\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentMilestoneStartingTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentMilestoneDeadlineTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountPerMillion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partitionsPaidInProjectTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"onProjectTokens\",\"type\":\"bool\"}],\"name\":\"receivePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountRequested\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountOfBatches\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchTimeInterval\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"extraInfo\",\"type\":\"string\"},{\"internalType\":\"enum LoanLibrary.RepaymentBatchType\",\"name\":\"repaymentBatchType\",\"type\":\"uint8\"}],\"name\":\"requestPersonalLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amountRequestedPerMilestone\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"projectTokenPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"discountPerMillion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMilestones\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"milestoneDurations\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"paymentTimeInterval\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"extraInfo\",\"type\":\"string\"}],\"name\":\"requestProjectLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLoans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingBatches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingTimeInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"applyMilestone(uint256)\":{\"details\":\"This function is used by the project to apply a milestone for a specific loan.\",\"params\":{\"loanId\":\"The id of the loan.\"}},\"challengeLoan(uint256)\":{\"details\":\"Through this function any address can challenge a loan in case of rules breaking by the seeker. If challenging succeeds it can end up to either small penalty or whole collateral loss.\",\"params\":{\"loanId\":\"The id of the loan.\"}},\"decideForLoan(uint256,bool)\":{\"details\":\"This function is called by governance to approve or reject a loan request.\",\"params\":{\"decision\":\"The decision of the governance. [true -> approved] [false -> rejected]\",\"loanId\":\"The id of the loan.\"}},\"decideForMilestone(uint256,bool)\":{\"details\":\"This function is called by governance to approve or reject an applied milestone's request.\",\"params\":{\"decision\":\"The decision of the governance. [true -> approved] [false -> rejected]\",\"loanId\":\"The id of the loan.\"}},\"executePayment(uint256)\":{\"details\":\"This function is called by the seeker to return part of or whole owed amount for a loan (depending on agreement).\",\"params\":{\"loanId\":\"The id of the loan.\"}},\"fundLoan(uint256,uint256)\":{\"details\":\"This function is called by the lenders to fund a loan.\",\"params\":{\"loanId\":\"The id of the loan.\",\"partitionsToPurchase\":\"The amount of ERC1155 tokens (which represent partitions of the loan) to be purchased.\"}},\"getAmountToBeRepaid(uint256)\":{\"details\":\"getAmountToBeRepaid is a function to obtain the amount that should be paid to settle the loan taking into account the amount paid back with project tokens and the interest percentage.\",\"params\":{\"loanId\":\"The id of the loan to get the amount to be repaid from.\"},\"returns\":{\"amount\":\"The total amount to be paid in lending tokens to settle the loan.\"}},\"getLoanMetadata(uint256)\":{\"details\":\"This helper function provides a single point for querying the Loan metadata\",\"params\":{\"loanId\":\"The id of the loan.\"}},\"getTotalInterest(uint256)\":{\"details\":\"getTotalInterest is a function to obtain the total amount of interest to pay back taking into account the interest free amount paid back with project tokens and the interest percentage set for the loan.\",\"params\":{\"loanId\":\"The id of the loan to get the interest percentage from.\"},\"returns\":{\"totalInterest\":\"The total amount of interest to be paid to settle the loan.\"}},\"initialize(address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Initialize of the contract.\"},\"receivePayment(uint256,uint256,bool)\":{\"details\":\"This function is called by ERC1155 holders to receive a payment (after seeker has repaid part of loan).\",\"params\":{\"amountOfTokens\":\"The amount of NFT tokens to receive payment for.\",\"onProjectTokens\":\"Only used in project loans. [true -> repayment in project token] [false -> repayment in lending token]\",\"tokenId\":\"The token id of the ERC1155 tokens, which is eligible for the payment.\"}},\"requestPersonalLoan(uint256,address,uint256,uint256,uint256,uint256,string,uint8)\":{\"details\":\"This function is used for potential seekers to request a personal loan.\",\"params\":{\"amountRequested\":\"The lending amount seeker is looking to get.\",\"batchTimeInterval\":\"The time interval between repayment batches.\",\"collateralAmount\":\"The amount of tokens that will be used by the seeker as collateral.\",\"collateralToken\":\"The token that will be used by the seeker as collateral.\",\"extraInfo\":\"The ipfs hash where more specific details for loan request are stored.\",\"interestPercentage\":\"The interest percentage that will be obtained after whole repayment.\",\"repaymentBatchType\":\"The way the repayment in each batch will happen. [ONLY_INTEREST or INTEREST_PLUS_NOMINAL]        ONLY_INTEREST means that in every batch part of the interest will be repaid and whole nominal in the last batch.        INTEREST_PLUS_NOMINAL means that in every batch part of the interest and nominal will be repaid.\",\"totalAmountOfBatches\":\"The amount of batches in which loan will be repaid.\"}},\"requestProjectLoan(uint256[],address,uint256,uint256,uint256,uint256,uint256,uint256[],uint256,string)\":{\"details\":\"This function is used for potential borrowing project to request a loan.\",\"params\":{\"amountRequestedPerMilestone\":\"The lending amounts project is looking to get for each milestone.\",\"collateralAmount\":\"The amount of tokens that will be used by the project as collateral.\",\"collateralToken\":\"The token that will be used by the proect as collateral.\",\"discountPerMillion\":\"The discount given on the token price when funders claim repayment in project tokens.\",\"extraInfo\":\"The ipfs hash where more specific details for loan request are stored.\",\"interestPercentage\":\"The interest percentage that will be obtained after whole repayment.\",\"milestoneDurations\":\"The duration of each Milestone.\",\"paymentTimeInterval\":\"The time interval between the last milestone delivery by the project and the repayment of the loan by the project.\",\"projectTokenPrice\":\"The price the project wants to sell its token for.\",\"totalMilestones\":\"The total amount of Milestones project is requesting funds for.\"}}},\"title\":\"AllianceBlock Registry contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Responsible for loan transactions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Registry.sol\":\"Registry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"contracts/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"./registry/PersonalLoan.sol\\\";\\nimport \\\"./registry/ProjectLoan.sol\\\";\\nimport \\\"./libs/TokenFormat.sol\\\";\\n\\n/**\\n * @title AllianceBlock Registry contract\\n * @notice Responsible for loan transactions.\\n */\\ncontract Registry is Initializable, PersonalLoan, ProjectLoan {\\n    using SafeMath for uint256;\\n    using TokenFormat for uint256;\\n\\n    // Events\\n    event LoanPartitionsPurchased(\\n        uint256 indexed loanId,\\n        uint256 partitionsToPurchase,\\n        address lender\\n    );\\n    event LoanStarted(\\n        uint256 indexed loanId,\\n        LoanLibrary.LoanType indexed loanType\\n    );\\n    event LoanApproved(\\n        uint256 indexed loanId,\\n        LoanLibrary.LoanType indexed loanType\\n    );\\n    event LoanRejected(\\n        uint256 indexed loanId,\\n        LoanLibrary.LoanType indexed loanType\\n    );\\n    event LoanChallenged(\\n        uint256 indexed loanId,\\n        LoanLibrary.LoanType indexed loanType,\\n        address user\\n    );\\n    event PaymentReceived(\\n        uint256 indexed loanId,\\n        uint256 amountOfTokens,\\n        uint256 indexed generation,\\n        bool indexed onProjectTokens,\\n        address user\\n    );\\n    event PaymentExecuted(\\n        uint256 indexed loanId,\\n        LoanLibrary.LoanType indexed loanType,\\n        address indexed seeker\\n    );\\n\\n    /**\\n     * @dev Initialize of the contract.\\n     */\\n    function initialize(\\n        address escrowAddress,\\n        address governanceAddress_,\\n        address lendingToken_,\\n        address mainNFT_,\\n        address fundingNFT_,\\n        uint256 baseAmountForEachPartition_,\\n        uint256 minimumInterestPercentage_,\\n        uint256 maxMilestones_,\\n        uint256 milestoneExtensionInterval_,\\n        uint256 vestingBatches_,\\n        uint256 vestingTimeInterval_,\\n        uint256 fundingTimeInterval_\\n    ) public initializer {\\n        escrow = IEscrow(escrowAddress);\\n        baseAmountForEachPartition = baseAmountForEachPartition_;\\n        governance = IGovernance(governanceAddress_);\\n        lendingToken = IERC20(lendingToken_);\\n        minimumInterestPercentage = minimumInterestPercentage_;\\n        mainNFT = IERC721Mint(mainNFT_);\\n        fundingNFT = IERC1155Mint(fundingNFT_);\\n        maxMilestones = maxMilestones_;\\n        milestoneExtensionInterval = milestoneExtensionInterval_;\\n        vestingBatches = vestingBatches_;\\n        vestingTimeInterval = vestingTimeInterval_;\\n        fundingTimeInterval = fundingTimeInterval_;\\n    }\\n\\n    /**\\n     * @dev This function is called by governance to approve or reject a loan request.\\n     * @param loanId The id of the loan.\\n     * @param decision The decision of the governance. [true -> approved] [false -> rejected]\\n     */\\n    function decideForLoan(uint256 loanId, bool decision)\\n        external\\n        onlyGovernance()\\n    {\\n        if (decision) _approveLoan(loanId);\\n        else _rejectLoan(loanId);\\n    }\\n\\n    /**\\n     * @dev This function is called by the lenders to fund a loan.\\n     * @param loanId The id of the loan.\\n     * @param partitionsToPurchase The amount of ERC1155 tokens (which represent partitions of the loan) to be purchased.\\n     */\\n    function fundLoan(uint256 loanId, uint256 partitionsToPurchase)\\n        external\\n        onlyActivelyFundedLoan(loanId)\\n    {\\n        require(\\n            partitionsToPurchase <=\\n                loanDetails[loanId].totalPartitions.sub(\\n                    loanDetails[loanId].partitionsPurchased\\n                ),\\n            \\\"Not enough partitions left for purchase\\\"\\n        );\\n\\n        if (loanStatus[loanId] == LoanLibrary.LoanStatus.APPROVED) {\\n            loanStatus[loanId] = LoanLibrary.LoanStatus.FUNDING;\\n        }\\n\\n        IERC20(lendingToken).transferFrom(\\n            msg.sender,\\n            address(escrow),\\n            partitionsToPurchase.mul(baseAmountForEachPartition)\\n        );\\n\\n        if (loanDetails[loanId].loanType == LoanLibrary.LoanType.PERSONAL) {\\n            escrow.transferFundingNFT(loanId, partitionsToPurchase, msg.sender);\\n        } else {\\n            _transferFundingNFTToProjectFunder(\\n                loanId,\\n                partitionsToPurchase,\\n                msg.sender\\n            );\\n        }\\n\\n        loanDetails[loanId].partitionsPurchased = loanDetails[loanId]\\n            .partitionsPurchased\\n            .add(partitionsToPurchase);\\n\\n        emit LoanPartitionsPurchased(loanId, partitionsToPurchase, msg.sender);\\n        if (\\n            loanDetails[loanId].partitionsPurchased ==\\n            loanDetails[loanId].totalPartitions\\n        ) {\\n            _startLoan(loanId);\\n        }\\n    }\\n\\n    /**\\n     * @dev This function is called by the seeker to return part of or whole owed amount for a loan (depending on agreement).\\n     * @param loanId The id of the loan.\\n     */\\n    function executePayment(uint256 loanId) external onlySeeker(loanId) {\\n        if (loanDetails[loanId].loanType == LoanLibrary.LoanType.PERSONAL) {\\n            _executePersonalLoanPayment(loanId);\\n        } else {\\n            _executeProjectLoanPayment(loanId);\\n        }\\n        emit PaymentExecuted(loanId, loanDetails[loanId].loanType, msg.sender);\\n    }\\n\\n    /**\\n     * @dev This function is called by ERC1155 holders to receive a payment (after seeker has repaid part of loan).\\n     * @param tokenId The token id of the ERC1155 tokens, which is eligible for the payment.\\n     * @param amountOfTokens The amount of NFT tokens to receive payment for.\\n     * @param onProjectTokens Only used in project loans. [true -> repayment in project token] [false -> repayment in lending token]\\n     */\\n    function receivePayment(\\n        uint256 tokenId,\\n        uint256 amountOfTokens,\\n        bool onProjectTokens\\n    ) external onlyEnoughERC1155Balance(tokenId, amountOfTokens) {\\n        (uint256 generation, uint256 loanId) = tokenId.formatTokenId();\\n        if (loanDetails[loanId].loanType == LoanLibrary.LoanType.PERSONAL) {\\n            _receivePersonalLoanPayment(loanId, generation, amountOfTokens);\\n        } else {\\n            _receiveProjectLoanPayment(\\n                loanId,\\n                generation,\\n                amountOfTokens,\\n                onProjectTokens\\n            );\\n        }\\n        emit PaymentReceived(\\n            loanId,\\n            amountOfTokens,\\n            generation,\\n            onProjectTokens,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @dev Through this function any address can challenge a loan in case of rules breaking by the seeker.\\n            If challenging succeeds it can end up to either small penalty or whole collateral loss.\\n     * @param loanId The id of the loan.\\n     */\\n    function challengeLoan(uint256 loanId)\\n        external\\n        onlyActiveLoan(loanId)\\n        onlyAfterDeadlineReached(loanId)\\n    {\\n        if (loanDetails[loanId].loanType == LoanLibrary.LoanType.PERSONAL)\\n            _challengePersonalLoan(loanId);\\n        else _challengeProjectLoan(loanId);\\n        emit LoanChallenged(loanId, loanDetails[loanId].loanType, msg.sender);\\n    }\\n\\n    function _approveLoan(uint256 loanId_) internal {\\n        loanStatus[loanId_] = LoanLibrary.LoanStatus.APPROVED;\\n        loanDetails[loanId_].approvalDate = block.timestamp;\\n        fundingNFT.unpauseTokenTransfer(loanId_); //UnPause trades for ERC1155s with the specific loan ID.\\n        emit LoanApproved(loanId_, loanDetails[loanId_].loanType);\\n    }\\n\\n    function _rejectLoan(uint256 loanId_) internal {\\n        loanStatus[loanId_] = LoanLibrary.LoanStatus.REJECTED;\\n        escrow.transferCollateralToken(\\n            loanDetails[loanId_].collateralToken,\\n            loanSeeker[loanId_],\\n            loanDetails[loanId_].collateralAmount\\n        );\\n        emit LoanRejected(loanId_, loanDetails[loanId_].loanType);\\n    }\\n\\n    function _startLoan(uint256 loanId_) internal {\\n        loanStatus[loanId_] = LoanLibrary.LoanStatus.STARTED;\\n        loanDetails[loanId_].startingDate = block.timestamp;\\n\\n        if (loanDetails[loanId_].loanType == LoanLibrary.LoanType.PERSONAL)\\n            _startPersonalLoan(loanId_);\\n        else _startProjectLoan(loanId_);\\n        emit LoanStarted(loanId_, loanDetails[loanId_].loanType);\\n    }\\n\\n    /**\\n     * @dev This helper function provides a single point for querying the Loan metadata\\n     * @param loanId The id of the loan.\\n     */\\n    function getLoanMetadata(uint256 loanId)\\n        public\\n        view\\n        returns (\\n            LoanLibrary.LoanDetails memory, // the loanDetails\\n            LoanLibrary.LoanStatus, // the loanStatus\\n            address, // the loanSeeker,\\n            LoanLibrary.RepaymentBatchType // the repaymentBatchType\\n        )\\n    {\\n        return (\\n            loanDetails[loanId],\\n            loanStatus[loanId],\\n            loanSeeker[loanId],\\n            personalLoanPayments[loanId].repaymentBatchType\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x279cdb8dcc95d680126805cbc75fb98711d4a49cc9d0abcbe791dec20842bab9\",\"license\":\"MIT\"},\"contracts/interfaces/IERC1155Mint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the IERC1155 mint function.\\n */\\ninterface IERC1155Mint {\\n    function mintGen0(address to, uint256 amount, uint256 loanId) external;\\n\\n    function mintOfGen(\\n        address to,\\n        uint256 amount,\\n        uint256 generation,\\n        uint256 loanId\\n    ) external;\\n\\n    function decreaseGenerations(\\n        uint256 tokenId,\\n        address user,\\n        uint256 amount,\\n        uint256 generationsToDecrease\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function pauseTokenTransfer(uint256 loanId) external;\\n\\n    function unpauseTokenTransfer(uint256 tokenId) external;\\n\\n    function increaseGenerations(\\n        uint256 tokenId,\\n        address user,\\n        uint256 amount,\\n        uint256 generationsToAdd\\n    ) external;\\n\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x33fad01f317159d96330264cdb51a013f77721a72a9e040d6174e57ad11032e4\",\"license\":\"MIT\"},\"contracts/interfaces/IERC721Mint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the IERC721 mint function.\\n */\\ninterface IERC721Mint {\\n    function mint(address to) external virtual;\\n}\\n\",\"keccak256\":\"0x5ca2d1f5a2881eca2ff7233476dc437fc1efa9712762dd59c75f650e11988d40\",\"license\":\"MIT\"},\"contracts/interfaces/IEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the Escrow.\\n */\\ninterface IEscrow {\\n    function receiveFunding(uint256 loanId, uint256 amount) external;\\n\\n    function transferFundingNFT(\\n        uint256 loanId,\\n        uint256 partitionsToPurchase,\\n        address receiver\\n    ) external;\\n\\n    function transferLendingToken(address seeker, uint256 amount) external;\\n\\n    function transferCollateralToken(\\n        address collateralToken,\\n        address seeker,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb5fffb2f89764ab10f058c7f1f245074555f57e280467228f935ff631736644b\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the Governance contract.\\n */\\ninterface IGovernance {\\n    function requestApproval(uint256 loanId, bool isMilestone, uint256 milestoneNumber) external;\\n}\\n\",\"keccak256\":\"0x359bc3961815b01519f41ab710f973128e6bbb803489f1f722f792d4362652ef\",\"license\":\"MIT\"},\"contracts/libs/LoanLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.0;\\n\\nlibrary LoanLibrary {\\n    enum RepaymentBatchType {\\n        ONLY_INTEREST, // The interest is repaid in each batch and at the last batch nominal is also repaid.\\n        INTEREST_PLUS_NOMINAL // In every batch part of nominal alongside interest is getting repaid.\\n    }\\n\\n    enum LoanType {\\n        PERSONAL, // The type of loan where seeker is a person.\\n        PROJECT // The type of loan where seeker is a project.\\n    }\\n\\n    enum LoanStatus {\\n        REQUESTED, // Status when loan has been requested, but not approved yet.\\n        APPROVED, // Status when loan has been approved from governors.\\n        FUNDING, // Status when loan has started getting funded, but not fully funded yet.\\n        STARTED, // Status when loan has been fully funded.\\n        AWAITING_MILESTONE_APPROVAL, // Status when loan is waiting for DAO to approve a finished milestone.\\n        AWAITING_REPAYMENT, // Status when milestones have all been delivered and waiting for repayment from the project.\\n        SETTLED, // Status when loan has been fully repaid by the seeker.\\n        DEFAULT, // Status when seeker has not been able to repay the loan.\\n        LIQUIDATED, // Status when collateral's value was not enough, so loan got liquidated.\\n        REJECTED, // Status when loan has been rejected by governors.\\n        // TEMPORAL: waiting for status order and to not break test\\n        AWAITING_MILESTONE_APPLICATION // Status when loan is waiting for milestone application by the project.\\n    }\\n\\n    struct LoanDetails {\\n        uint256 loanId; // The Id of the loan.\\n        LoanType loanType; // The type of the loan (personal or project).\\n        uint256 approvalDate; // The timestamp in which loan was approved.\\n        uint256 startingDate; // The timestamp in which loan was funded.\\n        address collateralToken; // The address of the token that was put as collateral for the loan.\\n        uint256 collateralAmount; // The amount of collateral tokens locked as colateral.\\n        uint256 lendingAmount; // The amount of tokens that was lended to the seeker.\\n        uint256 totalPartitions; // The total partitions or ERC1155 tokens, in which loan is splitted.\\n        uint256 totalInterest; // The amount of interest to be paid.\\n        uint256 interestPercentage; // The interest percentage to pay back over the amount in lending tokens.\\n        string extraInfo; // The ipfs hash, where all extra info about the loan are stored.\\n        uint256 partitionsPurchased; // The total partitions or ERC1155 tokens that have already been purchased.\\n    }\\n\\n    struct PersonalLoanPayments {\\n        uint256 batchesPaid; // The amount of batches that have been paid by the seeker.\\n        uint256 amountEachBatch; // The amount to be paid in each batch by the seeker.\\n        uint256 totalAmountOfBatches; // The total amount of batches for the loan repayment.\\n        uint256 timeIntervalBetweenBatches; // The time interval, which represents how often seeker should pay a batch.\\n        uint256 batchesSkipped; // The times that seeker skipped the payment (only 1 is accepted, then loan gets to DEFAULT).\\n        uint256 batchStartingTimestamp; // Timestamp from which seeker is able to pay next batch.\\n        uint256 batchDeadlineTimestamp; // Timestamp till which seeker should pay next batch.\\n        RepaymentBatchType repaymentBatchType; // The repayment batch type of the loan.\\n    }\\n\\n    struct ProjectLoanPayments {\\n        uint256 totalMilestones;\\n        mapping(uint256 => uint256) milestoneLendingAmount;\\n        mapping(uint256 => uint256) milestoneDuration;\\n        uint256 awaitingForRepaymentDate; // The timestamp in which loan state changed to awaitingForRepayment.\\n        uint256 paymentTimeInterval; // The time interval that will pass between last milestone delivery and repayment.\\n        uint256 milestonesDelivered; // The amount of milestones that have been delivered by the project.\\n        uint256 milestonesExtended; // The times that project has taken an extension for milestone delivery.\\n        uint256 currentMilestoneStartingTimestamp; // Timestamp that milestone/repayment started.\\n        uint256 currentMilestoneDeadlineTimestamp; // Timestamp that milestone/repayment should be delivered.\\n        uint256 discountPerMillion; // The discount / 1M if lenders decide to get paid by the project tokens.\\n        mapping(uint256 => uint256) milestoneProjectTokenPrice; // The price the project tokens can be claimed for after delivery of the milestone.\\n        uint256 partitionsPaidInProjectTokens; // The number of partitions lenders used to claim project tokens.\\n    }\\n}\\n\",\"keccak256\":\"0x0e17c85adecca9223e1ef6d4a10be8fd5ca4f499d9cc3b7da8518f4335a5e31e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libs/TokenFormat.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.0;\\n\\nlibrary TokenFormat {\\n    // Use a split bit implementation.\\n    // Store the generation in the upper 128 bits..\\n    // ..and the non-fungible loan id in the lower 128\\n    uint256 private constant _LOAN_ID_MASK = uint128(~0);\\n\\n    /**\\n     * @dev Format tokenId into generation and index\\n     */\\n    function formatTokenId(uint tokenId) internal pure returns(uint generation, uint loanId) {\\n        generation = tokenId >> 128;\\n        loanId = tokenId & _LOAN_ID_MASK;\\n    }\\n\\n    /**\\n     * @dev get tokenId from generation and loanId\\n     */\\n    function getTokenId(uint gen, uint loanId) internal pure returns(uint tokenId) {\\n        return (gen << 128) | loanId;\\n    }\\n}\\n\",\"keccak256\":\"0x3d0686b141123d6de7b60de441597e57cb8765953e571294bd564c38005756d4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/registry/LoanDetails.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./Storage.sol\\\";\\nimport \\\"../libs/TokenFormat.sol\\\";\\n\\n/**\\n * @title AllianceBlock LoanDetails contract\\n * @notice Functionality for storing loan details and modifiers.\\n */\\ncontract LoanDetails is Storage {\\n    using SafeMath for uint256;\\n    using TokenFormat for uint256;\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == address(governance), \\\"Only Governance\\\");\\n        _;\\n    }\\n\\n    modifier onlySeeker(uint256 loanId) {\\n        require(\\n            msg.sender == loanSeeker[loanId],\\n            \\\"Only seeker of the loan\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyActivelyFundedLoan(uint256 loanId) {\\n        require(\\n            loanStatus[loanId] == LoanLibrary.LoanStatus.APPROVED ||\\n                loanStatus[loanId] == LoanLibrary.LoanStatus.FUNDING,\\n            \\\"Only when loan is actively getting funded\\\"\\n        );\\n        require(\\n            loanDetails[loanId].approvalDate.add(fundingTimeInterval) >\\n                block.timestamp,\\n            \\\"Only between funding timeframe\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyActiveLoan(uint256 loanId) {\\n        require(\\n            loanStatus[loanId] == LoanLibrary.LoanStatus.STARTED ||\\n                loanStatus[loanId] ==\\n                LoanLibrary.LoanStatus.AWAITING_MILESTONE_APPLICATION,\\n            \\\"Only when loan is active\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOnProjectRepayment(uint256 loanId) {\\n        require(\\n            loanStatus[loanId] == LoanLibrary.LoanStatus.AWAITING_REPAYMENT,\\n            \\\"Only on Repayment Status\\\"\\n        );\\n        require(\\n            projectLoanPayments[loanId].awaitingForRepaymentDate.add(\\n                projectLoanPayments[loanId].paymentTimeInterval\\n            ) > block.timestamp,\\n            \\\"Only between awaiting for repayment timeframe\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlySettledLoan(uint256 loanId) {\\n        require(\\n            loanStatus[loanId] == LoanLibrary.LoanStatus.SETTLED,\\n            \\\"Only on Settled Status\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyBetweenMilestoneTimeframe(uint256 loanId) {\\n        require(\\n            projectLoanPayments[loanId].currentMilestoneDeadlineTimestamp >\\n                block.timestamp &&\\n                projectLoanPayments[loanId].currentMilestoneStartingTimestamp <=\\n                block.timestamp,\\n            \\\"Only between milestone's timeframe\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyBetweenBatchTimeframe(uint256 loanId) {\\n        require(\\n            personalLoanPayments[loanId].batchDeadlineTimestamp >\\n                block.timestamp &&\\n                personalLoanPayments[loanId].batchStartingTimestamp <=\\n                block.timestamp,\\n            \\\"Only between batch timeframe\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAfterDeadlineReached(uint256 loanId) {\\n        if (loanDetails[loanId].loanType == LoanLibrary.LoanType.PERSONAL) {\\n            require(\\n                personalLoanPayments[loanId].batchDeadlineTimestamp <=\\n                    block.timestamp,\\n                \\\"Only after batch deadline is reached\\\"\\n            );\\n        } else {\\n            require(\\n                projectLoanPayments[loanId].currentMilestoneDeadlineTimestamp <=\\n                    block.timestamp,\\n                \\\"Only after milestone deadline is reached\\\"\\n            );\\n        }\\n        _;\\n    }\\n\\n    modifier onlyPersonalLoan(uint256 loanId) {\\n        require(\\n            loanDetails[loanId].loanType == LoanLibrary.LoanType.PERSONAL,\\n            \\\"Only when loan is personal\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyProjectLoan(uint256 loanId) {\\n        require(\\n            loanDetails[loanId].loanType == LoanLibrary.LoanType.PROJECT,\\n            \\\"Only when loan is for project\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAcceptedNumberOfMilestones(uint256 totalMilestones) {\\n        require(\\n            totalMilestones <= maxMilestones,\\n            \\\"Only accepted number of milestones\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyWhenAwaitingMilestoneApproval(uint256 loanId) {\\n        require(\\n            loanStatus[loanId] ==\\n                LoanLibrary.LoanStatus.AWAITING_MILESTONE_APPROVAL,\\n            \\\"Only when loan is awaiting for milestone approval\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyEnoughERC1155Balance(uint256 loanId, uint256 amountOfTokens) {\\n        uint256 balance;\\n        for (\\n            uint256 i = 0;\\n            i < projectLoanPayments[loanId].totalMilestones;\\n            i++\\n        ) {\\n            balance = balance.add(\\n                fundingNFT.balanceOf(msg.sender, i.getTokenId(loanId))\\n            );\\n        }\\n        require(balance >= amountOfTokens, \\\"Only when enough balance\\\");\\n        _;\\n    }\\n\\n    function _storeLoanDetails(\\n        LoanLibrary.LoanType loanType_,\\n        uint256 lendingAmountRequested_,\\n        address collateralToken_,\\n        uint256 collateralAmount_,\\n        uint256 interestPercentage_,\\n        string memory extraInfo_\\n    ) internal {\\n        require(\\n            interestPercentage_ >= minimumInterestPercentage,\\n            \\\"Interest percentage lower than limit\\\"\\n        );\\n\\n        LoanLibrary.LoanDetails memory loan;\\n        loan.loanId = totalLoans;\\n        loan.loanType = loanType_;\\n        loan.collateralToken = collateralToken_;\\n        loan.collateralAmount = collateralAmount_;\\n        loan.lendingAmount = lendingAmountRequested_;\\n        loan.interestPercentage = interestPercentage_;\\n        loan.totalInterest = lendingAmountRequested_\\n            .mul(interestPercentage_)\\n            .div(100);\\n        loan.extraInfo = extraInfo_;\\n        loan.totalPartitions = lendingAmountRequested_.div(\\n            baseAmountForEachPartition\\n        );\\n\\n        loanDetails[totalLoans] = loan;\\n\\n        loanStatus[totalLoans] = LoanLibrary.LoanStatus.REQUESTED;\\n        loanSeeker[totalLoans] = msg.sender;\\n    }\\n}\\n\",\"keccak256\":\"0x08988312873e5aeab2896bd65ac5587f61cf997dcec408067711548184fd8edd\",\"license\":\"MIT\"},\"contracts/registry/PersonalLoan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./LoanDetails.sol\\\";\\nimport \\\"../libs/TokenFormat.sol\\\";\\n\\n/**\\n * @title AllianceBlock PersonalLoan contract\\n * @notice Functionality for Personal Loan.\\n */\\ncontract PersonalLoan is LoanDetails {\\n    using SafeMath for uint256;\\n    using TokenFormat for uint256;\\n\\n    // Events\\n    event PersonalLoanRequested(\\n        uint256 indexed loanId,\\n        address indexed user,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev This function is used for potential seekers to request a personal loan.\\n     * @param amountRequested The lending amount seeker is looking to get.\\n     * @param collateralToken The token that will be used by the seeker as collateral.\\n     * @param collateralAmount The amount of tokens that will be used by the seeker as collateral.\\n     * @param totalAmountOfBatches The amount of batches in which loan will be repaid.\\n     * @param interestPercentage The interest percentage that will be obtained after whole repayment.\\n     * @param batchTimeInterval The time interval between repayment batches.\\n     * @param extraInfo The ipfs hash where more specific details for loan request are stored.\\n     * @param repaymentBatchType The way the repayment in each batch will happen. [ONLY_INTEREST or INTEREST_PLUS_NOMINAL]\\n     *        ONLY_INTEREST means that in every batch part of the interest will be repaid and whole nominal in the last batch.\\n     *        INTEREST_PLUS_NOMINAL means that in every batch part of the interest and nominal will be repaid.\\n     */\\n    function requestPersonalLoan(\\n        uint256 amountRequested,\\n        address collateralToken,\\n        uint256 collateralAmount,\\n        uint256 totalAmountOfBatches,\\n        uint256 interestPercentage,\\n        uint256 batchTimeInterval,\\n        string memory extraInfo,\\n        LoanLibrary.RepaymentBatchType repaymentBatchType\\n    ) external {\\n        require(uint256(repaymentBatchType) <= 1, \\\"Wrong repayment batch type\\\");\\n        require(\\n            amountRequested.mod(baseAmountForEachPartition) == 0,\\n            \\\"Requested Amount must be a multiplier of base amount\\\"\\n        );\\n\\n        _storeLoanDetails(\\n            LoanLibrary.LoanType.PERSONAL,\\n            amountRequested,\\n            collateralToken,\\n            collateralAmount,\\n            interestPercentage,\\n            extraInfo\\n        );\\n\\n        _storePersonalLoanPayments(\\n            totalAmountOfBatches,\\n            batchTimeInterval,\\n            repaymentBatchType\\n        );\\n\\n        IERC20(collateralToken).transferFrom(\\n            msg.sender,\\n            address(escrow),\\n            collateralAmount\\n        );\\n\\n        // TODO - Mint Correctly And Burn on Settlement\\n        // mainNFT.mint(address(escrow));\\n        fundingNFT.mintGen0(\\n            address(escrow),\\n            loanDetails[totalLoans].totalPartitions,\\n            totalLoans\\n        );\\n\\n        fundingNFT.pauseTokenTransfer(totalLoans); //Pause trades for ERC1155s with the specific loan ID.\\n\\n        governance.requestApproval(totalLoans, false, 0);\\n\\n        emit PersonalLoanRequested(totalLoans, msg.sender, amountRequested);\\n\\n        totalLoans = totalLoans.add(1);\\n    }\\n\\n    function _storePersonalLoanPayments(\\n        uint256 totalAmountOfBatches_,\\n        uint256 batchTimeInterval_,\\n        LoanLibrary.RepaymentBatchType repaymentBatchType_\\n    ) internal {\\n        // Calculate repayment of seeker for each batch.\\n        if (\\n            repaymentBatchType_ == LoanLibrary.RepaymentBatchType.ONLY_INTEREST\\n        ) {\\n            personalLoanPayments[totalLoans].amountEachBatch = loanDetails[\\n                totalLoans\\n            ]\\n                .totalInterest\\n                .div(totalAmountOfBatches_);\\n        } else {\\n            personalLoanPayments[totalLoans].amountEachBatch = (\\n                loanDetails[totalLoans].totalInterest.add(\\n                    loanDetails[totalLoans].lendingAmount\\n                )\\n            )\\n                .div(totalAmountOfBatches_);\\n        }\\n\\n        personalLoanPayments[totalLoans]\\n            .totalAmountOfBatches = totalAmountOfBatches_;\\n        personalLoanPayments[totalLoans]\\n            .timeIntervalBetweenBatches = batchTimeInterval_;\\n        personalLoanPayments[totalLoans]\\n            .repaymentBatchType = repaymentBatchType_;\\n    }\\n\\n    function _startPersonalLoan(uint256 loanId_) internal {\\n        personalLoanPayments[loanId_].batchStartingTimestamp = block.timestamp;\\n        personalLoanPayments[loanId_].batchDeadlineTimestamp = block\\n            .timestamp\\n            .add(personalLoanPayments[loanId_].timeIntervalBetweenBatches);\\n\\n        escrow.transferLendingToken(\\n            loanSeeker[loanId_],\\n            loanDetails[loanId_].lendingAmount\\n        );\\n    }\\n\\n    function _challengePersonalLoan(uint256 loanId_) internal {\\n        personalLoanPayments[loanId_].batchesSkipped = personalLoanPayments[\\n            loanId_\\n        ]\\n            .batchesSkipped\\n            .add(1);\\n\\n        if (personalLoanPayments[loanId_].batchesSkipped > 1) {\\n            loanStatus[loanId_] == LoanLibrary.LoanStatus.DEFAULT;\\n            // TODO - SPECIFY DEFAULT\\n        } else {\\n            personalLoanPayments[loanId_]\\n                .batchDeadlineTimestamp = personalLoanPayments[loanId_]\\n                .batchDeadlineTimestamp\\n                .add(personalLoanPayments[loanId_].timeIntervalBetweenBatches);\\n        }\\n    }\\n\\n    function _executePersonalLoanPayment(uint256 loanId_)\\n        internal\\n        onlyBetweenBatchTimeframe(loanId_)\\n        onlyActiveLoan(loanId_)\\n    {\\n        //if interest + nominal\\n        if (\\n            personalLoanPayments[loanId_].repaymentBatchType ==\\n            LoanLibrary.RepaymentBatchType.INTEREST_PLUS_NOMINAL\\n        ) {\\n            _transferPersonalLoanPayment(\\n                loanId_,\\n                personalLoanPayments[loanId_].amountEachBatch\\n            );\\n        } else {\\n            //if interest only\\n            _executePersonalLoanInterestOnlyPayment(loanId_);\\n        }\\n    }\\n\\n    function _executePersonalLoanInterestOnlyPayment(uint256 loanId_) internal {\\n        uint256 amount;\\n        //if last batch\\n        if (\\n            personalLoanPayments[loanId_].batchesPaid.add(1) ==\\n            personalLoanPayments[loanId_].totalAmountOfBatches\\n        ) {\\n            amount = personalLoanPayments[loanId_].amountEachBatch.add(\\n                loanDetails[loanId_].lendingAmount\\n            );\\n        } else {\\n            //any other batch\\n            amount = personalLoanPayments[loanId_].amountEachBatch;\\n        }\\n        _transferPersonalLoanPayment(loanId_, amount);\\n    }\\n\\n    function _transferPersonalLoanPayment(uint256 loanId_, uint256 amount)\\n        internal\\n    {\\n        IERC20(lendingToken).transferFrom(msg.sender, address(escrow), amount);\\n\\n        personalLoanPayments[loanId_].batchesPaid = personalLoanPayments[\\n            loanId_\\n        ]\\n            .batchesPaid\\n            .add(1);\\n\\n        if (\\n            personalLoanPayments[loanId_].batchesPaid ==\\n            personalLoanPayments[loanId_].totalAmountOfBatches\\n        ) {\\n            loanStatus[loanId_] = LoanLibrary.LoanStatus.SETTLED;\\n            escrow.transferCollateralToken(\\n                loanDetails[loanId_].collateralToken,\\n                loanSeeker[loanId_],\\n                loanDetails[loanId_].collateralAmount\\n            );\\n        } else {\\n            personalLoanPayments[loanId_]\\n                .batchStartingTimestamp = personalLoanPayments[loanId_]\\n                .batchDeadlineTimestamp;\\n            personalLoanPayments[loanId_]\\n                .batchDeadlineTimestamp = personalLoanPayments[loanId_]\\n                .batchStartingTimestamp\\n                .add(personalLoanPayments[loanId_].timeIntervalBetweenBatches);\\n        }\\n    }\\n\\n    function _receivePersonalLoanPayment(\\n        uint256 loanId_,\\n        uint256 generation_,\\n        uint256 amountOfTokens_\\n    ) internal onlySettledLoan(loanId_) {\\n        uint256 batchesToBePaid =\\n            generation_.sub(personalLoanPayments[loanId_].batchesPaid);\\n        require(batchesToBePaid > 0, \\\"Not eligible for payment\\\");\\n\\n        uint256 amountToBePaid =\\n            personalLoanPayments[loanId_]\\n                .amountEachBatch\\n                .mul(amountOfTokens_)\\n                .mul(batchesToBePaid)\\n                .div(loanDetails[loanId_].totalPartitions);\\n\\n        if (loanStatus[loanId_] == LoanLibrary.LoanStatus.SETTLED) {\\n            if (\\n                personalLoanPayments[loanId_].repaymentBatchType ==\\n                LoanLibrary.RepaymentBatchType.ONLY_INTEREST\\n            ) {\\n                amountToBePaid = amountToBePaid.add(\\n                    loanDetails[loanId_].lendingAmount.mul(amountOfTokens_).div(\\n                        loanDetails[loanId_].totalPartitions\\n                    )\\n                );\\n            }\\n\\n            fundingNFT.burn(\\n                msg.sender,\\n                generation_.getTokenId(loanId_),\\n                amountOfTokens_\\n            );\\n        } else {\\n            fundingNFT.increaseGenerations(\\n                generation_.getTokenId(loanId_),\\n                msg.sender,\\n                amountOfTokens_,\\n                batchesToBePaid\\n            );\\n        }\\n\\n        escrow.transferLendingToken(msg.sender, amountToBePaid);\\n    }\\n}\\n\",\"keccak256\":\"0x25f7343ff5242bcbe740e7c81ec57dfdf40b2549539ada47befb23dbf1cbc6a5\",\"license\":\"MIT\"},\"contracts/registry/ProjectLoan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./LoanDetails.sol\\\";\\nimport \\\"../libs/TokenFormat.sol\\\";\\n\\n/**\\n * @title AllianceBlock ProjectLoan contract\\n * @notice Functionality for Project Loan.\\n */\\ncontract ProjectLoan is LoanDetails {\\n    using SafeMath for uint256;\\n    using TokenFormat for uint256;\\n\\n    // Events\\n    event ProjectLoanRequested(\\n        uint256 indexed loanId,\\n        address indexed user,\\n        uint256 amount\\n    );\\n    event ProjectLoanMilestoneApprovalRequested(\\n        uint256 indexed loanId,\\n        uint256 milestoneNumber\\n    );\\n    event ProjectLoanMilestoneDecided(uint256 indexed loanId, bool decision);\\n    event ProjectTokenPaymentReceived(\\n        uint256 indexed loanId,\\n        address indexed user,\\n        uint256 amountOfProjectTokens,\\n        uint256 discountedPrice\\n    );\\n\\n    /**\\n     * @dev This function is used for potential borrowing project to request a loan.\\n     * @param amountRequestedPerMilestone The lending amounts project is looking to get for each milestone.\\n     * @param collateralToken The token that will be used by the proect as collateral.\\n     * @param collateralAmount The amount of tokens that will be used by the project as collateral.\\n     * @param projectTokenPrice The price the project wants to sell its token for.\\n     * @param interestPercentage The interest percentage that will be obtained after whole repayment.\\n     * @param discountPerMillion The discount given on the token price when funders claim repayment in project tokens.\\n     * @param totalMilestones The total amount of Milestones project is requesting funds for.\\n     * @param milestoneDurations The duration of each Milestone.\\n     * @param paymentTimeInterval The time interval between the last milestone delivery by the project and\\n     * the repayment of the loan by the project.\\n     * @param extraInfo The ipfs hash where more specific details for loan request are stored.\\n     */\\n    function requestProjectLoan(\\n        uint256[] calldata amountRequestedPerMilestone,\\n        address collateralToken,\\n        uint256 collateralAmount,\\n        uint256 projectTokenPrice,\\n        uint256 interestPercentage,\\n        uint256 discountPerMillion,\\n        uint256 totalMilestones,\\n        uint256[] calldata milestoneDurations,\\n        uint256 paymentTimeInterval,\\n        string memory extraInfo\\n    ) external onlyAcceptedNumberOfMilestones(totalMilestones) {\\n        require(\\n            (amountRequestedPerMilestone.length == totalMilestones) &&\\n                (milestoneDurations.length == totalMilestones),\\n            \\\"Total milestones requested should coincide with requested amounts and durations\\\"\\n        );\\n\\n        uint256 totalAmountRequested =\\n            _storeMilestoneDetailsAndGetTotalAmount(\\n                amountRequestedPerMilestone,\\n                milestoneDurations,\\n                totalMilestones\\n            );\\n\\n        _storeLoanDetails(\\n            LoanLibrary.LoanType.PROJECT,\\n            totalAmountRequested,\\n            collateralToken,\\n            collateralAmount,\\n            interestPercentage,\\n            extraInfo\\n        );\\n\\n        _storeProjectLoanPayments(\\n            discountPerMillion,\\n            projectTokenPrice,\\n            totalMilestones,\\n            paymentTimeInterval\\n        );\\n\\n        IERC20(collateralToken).transferFrom(\\n            msg.sender,\\n            address(escrow),\\n            collateralAmount\\n        );\\n\\n        // TODO - Mint Correctly And Burn on Settlement\\n        // mainNFT.mint(address(escrow));\\n        fundingNFT.mintOfGen(\\n            address(escrow),\\n            loanDetails[totalLoans].totalPartitions,\\n            totalMilestones.sub(1),\\n            totalLoans\\n        );\\n\\n        fundingNFT.pauseTokenTransfer(totalLoans); //Pause trades for ERC1155s with the specific loan ID.\\n\\n        governance.requestApproval(totalLoans, false, 0);\\n\\n        emit ProjectLoanRequested(totalLoans, msg.sender, totalAmountRequested);\\n\\n        totalLoans = totalLoans.add(1);\\n    }\\n\\n    /**\\n     * @dev This function is used by the project to apply a milestone for a specific loan.\\n     * @param loanId The id of the loan.\\n     */\\n    function applyMilestone(uint256 loanId)\\n        external\\n        onlySeeker(loanId)\\n        onlyActiveLoan(loanId)\\n        onlyProjectLoan(loanId)\\n        onlyBetweenMilestoneTimeframe(loanId)\\n    {\\n        loanStatus[loanId] = LoanLibrary.LoanStatus.AWAITING_MILESTONE_APPROVAL;\\n        governance.requestApproval(\\n            loanId,\\n            true,\\n            projectLoanPayments[loanId].milestonesDelivered\\n        );\\n\\n        emit ProjectLoanMilestoneApprovalRequested(\\n            loanId,\\n            projectLoanPayments[loanId].milestonesDelivered\\n        );\\n    }\\n\\n    /**\\n     * @dev This function is called by governance to approve or reject an applied milestone's request.\\n     * @param loanId The id of the loan.\\n     * @param decision The decision of the governance. [true -> approved] [false -> rejected]\\n     */\\n    function decideForMilestone(uint256 loanId, bool decision)\\n        external\\n        onlyGovernance()\\n        onlyWhenAwaitingMilestoneApproval(loanId)\\n        onlyProjectLoan(loanId)\\n    {\\n        if (decision) _approveMilestone(loanId);\\n        else _rejectMilestone(loanId);\\n\\n        emit ProjectLoanMilestoneDecided(loanId, decision);\\n    }\\n\\n    function _approveMilestone(uint256 loanId_) internal {\\n        projectLoanPayments[loanId_].milestonesDelivered = projectLoanPayments[\\n            loanId_\\n        ]\\n            .milestonesDelivered\\n            .add(1);\\n\\n        // Milestones completed\\n        if (\\n            projectLoanPayments[loanId_].milestonesDelivered ==\\n            projectLoanPayments[loanId_].totalMilestones\\n        ) {\\n            loanStatus[loanId_] = LoanLibrary.LoanStatus.AWAITING_REPAYMENT;\\n            projectLoanPayments[loanId_].awaitingForRepaymentDate = block\\n                .timestamp;\\n            // Milestones missing\\n        } else {\\n            loanStatus[loanId_] = LoanLibrary\\n                .LoanStatus\\n                .AWAITING_MILESTONE_APPLICATION;\\n            escrow.transferLendingToken(\\n                loanSeeker[loanId_],\\n                projectLoanPayments[loanId_].milestoneLendingAmount[\\n                    projectLoanPayments[loanId_].milestonesDelivered\\n                ]\\n            );\\n            projectLoanPayments[loanId_]\\n                .currentMilestoneStartingTimestamp = block.timestamp;\\n            projectLoanPayments[loanId_]\\n                .currentMilestoneDeadlineTimestamp = block.timestamp.add(\\n                projectLoanPayments[loanId_].milestoneDuration[\\n                    projectLoanPayments[loanId_].milestonesDelivered\\n                ]\\n            );\\n            // TODO: get real price from DEX, Oracle or user input\\n            projectLoanPayments[loanId_].milestoneProjectTokenPrice[\\n                projectLoanPayments[loanId_].milestonesDelivered\\n            ] = _getMockedPriceForMilestone(0);\\n        }\\n    }\\n\\n    function _rejectMilestone(uint256 loanId_) internal {\\n        loanStatus[loanId_] == LoanLibrary.LoanStatus.STARTED;\\n        if (\\n            projectLoanPayments[loanId_].currentMilestoneDeadlineTimestamp <=\\n            block.timestamp\\n        ) {\\n            _challengeProjectLoan(loanId_);\\n        }\\n    }\\n\\n    function _storeProjectLoanPayments(\\n        uint256 discountPerMillion_,\\n        uint256 projectTokenPrice_,\\n        uint256 totalMilestones_,\\n        uint256 paymentTimeInterval_\\n    ) internal {\\n        projectLoanPayments[totalLoans]\\n            .discountPerMillion = discountPerMillion_;\\n        projectLoanPayments[totalLoans].milestoneProjectTokenPrice[\\n            0\\n        ] = projectTokenPrice_;\\n        projectLoanPayments[totalLoans].totalMilestones = totalMilestones_;\\n        projectLoanPayments[totalLoans]\\n            .paymentTimeInterval = paymentTimeInterval_;\\n    }\\n\\n    function _storeMilestoneDetailsAndGetTotalAmount(\\n        uint256[] memory amountRequestedPerMilestone,\\n        uint256[] memory milestoneDurations,\\n        uint256 totalMilestones\\n    ) internal returns (uint256 totalAmountRequested) {\\n        for (uint256 i = 0; i < totalMilestones; i++) {\\n            require(\\n                amountRequestedPerMilestone[i].mod(\\n                    baseAmountForEachPartition\\n                ) == 0,\\n                \\\"Requested milestone amounts must be multipliers of base amount\\\"\\n            );\\n            projectLoanPayments[totalLoans].milestoneLendingAmount[\\n                i\\n            ] = amountRequestedPerMilestone[i];\\n            projectLoanPayments[totalLoans].milestoneDuration[\\n                i\\n            ] = milestoneDurations[i];\\n\\n            totalAmountRequested = totalAmountRequested.add(\\n                amountRequestedPerMilestone[i]\\n            );\\n        }\\n    }\\n\\n    function _startProjectLoan(uint256 loanId_) internal {\\n        projectLoanPayments[loanId_].currentMilestoneStartingTimestamp = block\\n            .timestamp;\\n        projectLoanPayments[loanId_].currentMilestoneDeadlineTimestamp = block\\n            .timestamp\\n            .add(projectLoanPayments[loanId_].milestoneDuration[0]);\\n\\n        // For investments without real milestones (the only milestone is of 0 duration),\\n        // the first and only milestone should be approved automatically so project tokens can be claimed\\n        if (\\n            projectLoanPayments[loanId_].totalMilestones == 1 &&\\n            projectLoanPayments[loanId_].milestoneDuration[0] == 0\\n        ) {\\n            _approveMilestone(loanId_);\\n        }\\n\\n        escrow.transferLendingToken(\\n            loanSeeker[loanId_],\\n            projectLoanPayments[loanId_].milestoneLendingAmount[0]\\n        );\\n    }\\n\\n    function _getMockedPriceForMilestone(uint256 milestone)\\n        internal\\n        returns (uint256 price)\\n    {\\n        price = milestone.add(1);\\n    }\\n\\n    function _challengeProjectLoan(uint256 loanId_) internal {\\n        projectLoanPayments[loanId_].milestonesExtended = projectLoanPayments[\\n            loanId_\\n        ]\\n            .milestonesExtended\\n            .add(1);\\n\\n        if (projectLoanPayments[loanId_].milestonesExtended > 1) {\\n            loanStatus[loanId_] == LoanLibrary.LoanStatus.DEFAULT;\\n            // TODO - SPECIFY DEFAULT\\n        } else {\\n            projectLoanPayments[loanId_]\\n                .currentMilestoneDeadlineTimestamp = projectLoanPayments[\\n                loanId_\\n            ]\\n                .currentMilestoneDeadlineTimestamp\\n                .add(milestoneExtensionInterval);\\n        }\\n    }\\n\\n    function _transferFundingNFTToProjectFunder(\\n        uint256 loanId_,\\n        uint256 partitionsFunded_,\\n        address funder_\\n    ) internal {\\n        uint256 tokenGeneration =\\n            projectLoanPayments[loanId_].totalMilestones.sub(1);\\n        uint256 tokenId = tokenGeneration.getTokenId(loanId_);\\n        escrow.transferFundingNFT(tokenId, partitionsFunded_, funder_);\\n        // Decrease the generation of a percentage of the tokens so they can already be converted in project tokens after every milestone instead of only being repaid at the end of the loan.\\n        for (\\n            uint256 i = 0;\\n            i < projectLoanPayments[loanId_].totalMilestones.sub(1);\\n            i++\\n        ) {\\n            uint256 partitionsToConvertAtMilestone =\\n                partitionsFunded_\\n                    .mul(projectLoanPayments[loanId_].milestoneLendingAmount[i])\\n                    .div(loanDetails[loanId_].lendingAmount);\\n\\n            fundingNFT.decreaseGenerations(\\n                tokenId,\\n                funder_,\\n                partitionsToConvertAtMilestone,\\n                tokenGeneration.sub(i)\\n            );\\n        }\\n    }\\n\\n    function _executeProjectLoanPayment(uint256 loanId_)\\n        internal\\n        onlyOnProjectRepayment(loanId_)\\n    {\\n        IERC20(lendingToken).transferFrom(\\n            msg.sender,\\n            address(escrow),\\n            getAmountToBeRepaid(loanId_)\\n        );\\n        loanStatus[loanId_] = LoanLibrary.LoanStatus.SETTLED;\\n        escrow.transferCollateralToken(\\n            loanDetails[loanId_].collateralToken,\\n            loanSeeker[loanId_],\\n            loanDetails[loanId_].collateralAmount\\n        );\\n    }\\n\\n    function _receiveProjectLoanPayment(\\n        uint256 loanId_,\\n        uint256 generation_,\\n        uint256 amountOfTokens_,\\n        bool onProjectTokens_\\n    ) internal {\\n        if (onProjectTokens_) {\\n            _receiveProjectTokenPayment(loanId_, amountOfTokens_);\\n        } else {\\n            _receiveLendingTokenPayment(loanId_, generation_, amountOfTokens_);\\n        }\\n    }\\n\\n    function _receiveLendingTokenPayment(\\n        uint256 loanId_,\\n        uint256 generation_,\\n        uint256 amountOfTokens_\\n    ) internal onlySettledLoan(loanId_) {\\n        uint256 tokenId = generation_.getTokenId(loanId_);\\n        require(\\n            fundingNFT.balanceOf(msg.sender, tokenId) >= amountOfTokens_,\\n            \\\"Insufficient Loan NFT Balance\\\"\\n        );\\n        uint256 amountToReceive =\\n            getAmountToBeRepaid(loanId_).mul(amountOfTokens_).div(\\n                loanDetails[loanId_].totalPartitions.sub(\\n                    projectLoanPayments[loanId_].partitionsPaidInProjectTokens\\n                )\\n            );\\n\\n        fundingNFT.burn(msg.sender, tokenId, amountOfTokens_);\\n        escrow.transferLendingToken(msg.sender, amountToReceive);\\n    }\\n\\n    function _receiveProjectTokenPayment(\\n        uint256 loanId_,\\n        uint256 amountFundingNFT_\\n    ) internal {\\n        require(\\n            getAvailableFundingNFTForConversion(loanId_, msg.sender) >=\\n                amountFundingNFT_,\\n            \\\"No funding NFT available for conversion to project tokens\\\"\\n        );\\n\\n        uint256 amount =\\n            getAmountOfProjectTokensToReceive(loanId_, amountFundingNFT_);\\n\\n        // Keep track of the partitions paid in project tokens to reduce them from the settlement amount after milestone delivery\\n        projectLoanPayments[loanId_]\\n            .partitionsPaidInProjectTokens = projectLoanPayments[loanId_]\\n            .partitionsPaidInProjectTokens\\n            .add(amountFundingNFT_);\\n\\n        // Burn the funding NFT used to claim the project tokens\\n        _burnFundingNFTAmountOverGenerations(loanId_, amountFundingNFT_);\\n\\n        // Transfer the project tokens to the funder\\n        escrow.transferCollateralToken(\\n            loanDetails[loanId_].collateralToken,\\n            msg.sender,\\n            amount\\n        );\\n\\n        emit ProjectTokenPaymentReceived(\\n            loanId_,\\n            msg.sender,\\n            amount,\\n            getDiscountedProjectTokenPrice(loanId_)\\n        );\\n    }\\n\\n    function _burnFundingNFTAmountOverGenerations(\\n        uint256 loanId_,\\n        uint256 amountFundingNFT_\\n    ) internal {\\n        uint256 totalFundingNFTToBurn = amountFundingNFT_;\\n        for (\\n            uint256 i = 0;\\n            i < projectLoanPayments[loanId_].milestonesDelivered &&\\n                totalFundingNFTToBurn > 0;\\n            i++\\n        ) {\\n            uint256 fundingNFTBalance =\\n                balanceOfFundingNFTGeneration(loanId_, i, msg.sender);\\n            uint256 fundingNFTToBurn =\\n                fundingNFTBalance > totalFundingNFTToBurn\\n                    ? totalFundingNFTToBurn\\n                    : fundingNFTBalance;\\n\\n            fundingNFT.burn(\\n                msg.sender,\\n                i.getTokenId(loanId_),\\n                fundingNFTToBurn\\n            );\\n\\n            totalFundingNFTToBurn = totalFundingNFTToBurn.sub(fundingNFTToBurn);\\n        }\\n    }\\n\\n    // GETTERS\\n    function getMilestonesInfo(uint256 loanId_, uint256 milestone_)\\n        public\\n        view\\n        returns (uint256 amount, uint256 timestamp)\\n    {\\n        amount = projectLoanPayments[loanId_].milestoneLendingAmount[\\n            milestone_\\n        ];\\n        timestamp = projectLoanPayments[loanId_].milestoneDuration[milestone_];\\n    }\\n\\n    /**\\n     * @dev getAmountToBeRepaid is a function to obtain the amount that should be paid to settle the loan\\n     * taking into account the amount paid back with project tokens and the interest percentage.\\n     * @param loanId The id of the loan to get the amount to be repaid from.\\n     * @return amount The total amount to be paid in lending tokens to settle the loan.\\n     */\\n    function getAmountToBeRepaid(uint256 loanId)\\n        public\\n        view\\n        returns (uint256 amount)\\n    {\\n        // Substract the partitions already paid in project tokens from the lending amount to pay back\\n        uint256 lendingTokenAmount =\\n            loanDetails[loanId].lendingAmount.sub(\\n                projectLoanPayments[loanId].partitionsPaidInProjectTokens.mul(\\n                    baseAmountForEachPartition\\n                )\\n            );\\n        // Calculate the interest only over what is left to pay in the lending token\\n        uint256 interest =\\n            lendingTokenAmount.mul(loanDetails[loanId].interestPercentage).div(\\n                100\\n            );\\n        amount = lendingTokenAmount.add(interest);\\n    }\\n\\n    /**\\n     * @dev getTotalInterest is a function to obtain the total amount of interest to pay back\\n     * taking into account the interest free amount paid back with project tokens and the interest percentage set for the loan.\\n     * @param loanId The id of the loan to get the interest percentage from.\\n     * @return totalInterest The total amount of interest to be paid to settle the loan.\\n     */\\n    function getTotalInterest(uint256 loanId)\\n        public\\n        view\\n        returns (uint256 totalInterest)\\n    {\\n        // Substract the partitions already paid in project tokens from the lending amount to pay back\\n        uint256 lendingTokenAmount =\\n            loanDetails[loanId].lendingAmount.sub(\\n                projectLoanPayments[loanId].partitionsPaidInProjectTokens.mul(\\n                    baseAmountForEachPartition\\n                )\\n            );\\n        // Calculate the interest only over what is left to pay in the lending token\\n        totalInterest = lendingTokenAmount\\n            .mul(loanDetails[loanId].interestPercentage)\\n            .div(100);\\n    }\\n\\n    function balanceOfAllFundingNFTGenerations(uint256 loanId, address funder)\\n        public\\n        view\\n        returns (uint256 balance)\\n    {\\n        for (\\n            uint256 i = 0;\\n            i < projectLoanPayments[loanId].totalMilestones;\\n            i++\\n        ) {\\n            balance = balance.add(\\n                balanceOfFundingNFTGeneration(loanId, i, funder)\\n            );\\n        }\\n    }\\n\\n    function balanceOfFundingNFTGeneration(\\n        uint256 loanId,\\n        uint256 generation,\\n        address funder\\n    ) public view returns (uint256 balance) {\\n        balance = fundingNFT.balanceOf(funder, generation.getTokenId(loanId));\\n    }\\n\\n    function getProjectTokenPrice(uint256 loanId)\\n        public\\n        view\\n        returns (uint256 price)\\n    {\\n        // The price tokens can be reclaimed for after a milestone delivery\\n        uint256 milestonePriceWasSet =\\n            projectLoanPayments[loanId].milestonesDelivered > 0\\n                ? projectLoanPayments[loanId].milestonesDelivered.sub(1)\\n                : 0;\\n        price = projectLoanPayments[loanId].milestoneProjectTokenPrice[\\n            milestonePriceWasSet\\n        ];\\n    }\\n\\n    function getDiscountedProjectTokenPrice(uint256 loanId)\\n        public\\n        view\\n        returns (uint256 price)\\n    {\\n        uint256 marketPrice = getProjectTokenPrice(loanId);\\n        price = marketPrice.sub(\\n            marketPrice.mul(projectLoanPayments[loanId].discountPerMillion).div(\\n                10**6\\n            )\\n        );\\n    }\\n\\n    function getAvailableFundingNFTForConversion(uint256 loanId, address funder)\\n        public\\n        view\\n        returns (uint256 balance)\\n    {\\n        // If the loan is already settled, the seeker already paid everything back and also got its collateral back already\\n        if (loanStatus[loanId] == LoanLibrary.LoanStatus.SETTLED) {\\n            return 0;\\n        }\\n\\n        for (\\n            uint256 i = 0;\\n            i < projectLoanPayments[loanId].milestonesDelivered;\\n            i++\\n        ) {\\n            balance = balance.add(\\n                balanceOfFundingNFTGeneration(loanId, i, funder)\\n            );\\n        }\\n    }\\n\\n    function getAmountOfProjectTokensToReceive(\\n        uint256 loanId,\\n        uint256 amountFundingNFT\\n    ) public view returns (uint256 amount) {\\n        uint256 amountToReceiveInProjectTokens =\\n            amountFundingNFT.mul(baseAmountForEachPartition);\\n        // Calculate amount of project tokens based on the discounted price\\n        amount = amountToReceiveInProjectTokens.div(\\n            getDiscountedProjectTokenPrice(loanId)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe7a4b643ca9dc5c8cf1b5e07cdb24b8538e381c8aeefb528e4e2e746191e060b\",\"license\":\"MIT\"},\"contracts/registry/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../libs/LoanLibrary.sol\\\";\\nimport \\\"../interfaces/IERC1155Mint.sol\\\";\\nimport \\\"../interfaces/IERC721Mint.sol\\\";\\nimport \\\"../interfaces/IGovernance.sol\\\";\\nimport \\\"../interfaces/IEscrow.sol\\\";\\n\\n/**\\n * @title AllianceBlock Storage contract\\n * @notice Responsible for loan storage\\n */\\ncontract Storage {\\n    uint256 public totalLoans; // The total amount of loan requests.\\n\\n    // Mapping from loan id -> details for each and every loan.\\n    mapping(uint256 => LoanLibrary.LoanDetails) public loanDetails;\\n    // Mapping from loan id -> details for personal loans.\\n    mapping(uint256 => LoanLibrary.PersonalLoanPayments) public personalLoanPayments;\\n    // Mapping from loan id -> details for project loans.\\n    mapping(uint256 => LoanLibrary.ProjectLoanPayments) public projectLoanPayments;\\n    // Mapping from loan id -> loan status.\\n    mapping(uint256 => LoanLibrary.LoanStatus) public loanStatus;\\n    // Mapping from loan id -> loan seeker's address.\\n    mapping(uint256 => address) public loanSeeker;\\n\\n    IGovernance public governance; // Governance's contract address.\\n    IERC20 public lendingToken; // Lending token's contract address.\\n    IERC721Mint public mainNFT; // Main nft's contract address.\\n    IERC1155Mint public fundingNFT; // Funding nft's contract address.\\n    IEscrow public escrow; // Escrow's contract address.\\n\\n    // This variable represents the base amount in which every loan amount is divided to. (also the starting value for each ERC1155)\\n    uint256 public baseAmountForEachPartition;\\n    // This variable represents the minimum interest percentage that each loan should have.\\n    uint256 public minimumInterestPercentage;\\n    // This variable represents the maximum number of milestones a project loan can contain.\\n    uint256 public maxMilestones;\\n    // If milestone is rejected, this time interval is provided for the project to deliver.\\n    uint256 public milestoneExtensionInterval;\\n    // The amount of vesting batches when a lender decides to get project tokens.\\n    uint256 public vestingBatches;\\n    // The time interval between vesting batches when a lender decides to get project tokens.\\n    uint256 public vestingTimeInterval;\\n    // The time interval for adding funds\\n    uint256 public fundingTimeInterval;\\n}\\n\",\"keccak256\":\"0x84de1761f70e109c4073d99f50195c41fd36fa118b6d8ce9a92a05d4ea010af4\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "applyMilestone(uint256)": {
        "details": "This function is used by the project to apply a milestone for a specific loan.",
        "params": {
          "loanId": "The id of the loan."
        }
      },
      "challengeLoan(uint256)": {
        "details": "Through this function any address can challenge a loan in case of rules breaking by the seeker. If challenging succeeds it can end up to either small penalty or whole collateral loss.",
        "params": {
          "loanId": "The id of the loan."
        }
      },
      "decideForLoan(uint256,bool)": {
        "details": "This function is called by governance to approve or reject a loan request.",
        "params": {
          "decision": "The decision of the governance. [true -> approved] [false -> rejected]",
          "loanId": "The id of the loan."
        }
      },
      "decideForMilestone(uint256,bool)": {
        "details": "This function is called by governance to approve or reject an applied milestone's request.",
        "params": {
          "decision": "The decision of the governance. [true -> approved] [false -> rejected]",
          "loanId": "The id of the loan."
        }
      },
      "executePayment(uint256)": {
        "details": "This function is called by the seeker to return part of or whole owed amount for a loan (depending on agreement).",
        "params": {
          "loanId": "The id of the loan."
        }
      },
      "fundLoan(uint256,uint256)": {
        "details": "This function is called by the lenders to fund a loan.",
        "params": {
          "loanId": "The id of the loan.",
          "partitionsToPurchase": "The amount of ERC1155 tokens (which represent partitions of the loan) to be purchased."
        }
      },
      "getAmountToBeRepaid(uint256)": {
        "details": "getAmountToBeRepaid is a function to obtain the amount that should be paid to settle the loan taking into account the amount paid back with project tokens and the interest percentage.",
        "params": {
          "loanId": "The id of the loan to get the amount to be repaid from."
        },
        "returns": {
          "amount": "The total amount to be paid in lending tokens to settle the loan."
        }
      },
      "getLoanMetadata(uint256)": {
        "details": "This helper function provides a single point for querying the Loan metadata",
        "params": {
          "loanId": "The id of the loan."
        }
      },
      "getTotalInterest(uint256)": {
        "details": "getTotalInterest is a function to obtain the total amount of interest to pay back taking into account the interest free amount paid back with project tokens and the interest percentage set for the loan.",
        "params": {
          "loanId": "The id of the loan to get the interest percentage from."
        },
        "returns": {
          "totalInterest": "The total amount of interest to be paid to settle the loan."
        }
      },
      "initialize(address,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Initialize of the contract."
      },
      "receivePayment(uint256,uint256,bool)": {
        "details": "This function is called by ERC1155 holders to receive a payment (after seeker has repaid part of loan).",
        "params": {
          "amountOfTokens": "The amount of NFT tokens to receive payment for.",
          "onProjectTokens": "Only used in project loans. [true -> repayment in project token] [false -> repayment in lending token]",
          "tokenId": "The token id of the ERC1155 tokens, which is eligible for the payment."
        }
      },
      "requestPersonalLoan(uint256,address,uint256,uint256,uint256,uint256,string,uint8)": {
        "details": "This function is used for potential seekers to request a personal loan.",
        "params": {
          "amountRequested": "The lending amount seeker is looking to get.",
          "batchTimeInterval": "The time interval between repayment batches.",
          "collateralAmount": "The amount of tokens that will be used by the seeker as collateral.",
          "collateralToken": "The token that will be used by the seeker as collateral.",
          "extraInfo": "The ipfs hash where more specific details for loan request are stored.",
          "interestPercentage": "The interest percentage that will be obtained after whole repayment.",
          "repaymentBatchType": "The way the repayment in each batch will happen. [ONLY_INTEREST or INTEREST_PLUS_NOMINAL]        ONLY_INTEREST means that in every batch part of the interest will be repaid and whole nominal in the last batch.        INTEREST_PLUS_NOMINAL means that in every batch part of the interest and nominal will be repaid.",
          "totalAmountOfBatches": "The amount of batches in which loan will be repaid."
        }
      },
      "requestProjectLoan(uint256[],address,uint256,uint256,uint256,uint256,uint256,uint256[],uint256,string)": {
        "details": "This function is used for potential borrowing project to request a loan.",
        "params": {
          "amountRequestedPerMilestone": "The lending amounts project is looking to get for each milestone.",
          "collateralAmount": "The amount of tokens that will be used by the project as collateral.",
          "collateralToken": "The token that will be used by the proect as collateral.",
          "discountPerMillion": "The discount given on the token price when funders claim repayment in project tokens.",
          "extraInfo": "The ipfs hash where more specific details for loan request are stored.",
          "interestPercentage": "The interest percentage that will be obtained after whole repayment.",
          "milestoneDurations": "The duration of each Milestone.",
          "paymentTimeInterval": "The time interval between the last milestone delivery by the project and the repayment of the loan by the project.",
          "projectTokenPrice": "The price the project wants to sell its token for.",
          "totalMilestones": "The total amount of Milestones project is requesting funds for."
        }
      }
    },
    "title": "AllianceBlock Registry contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Responsible for loan transactions.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 890,
        "contract": "contracts/Registry.sol:Registry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 893,
        "contract": "contracts/Registry.sol:Registry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 16318,
        "contract": "contracts/Registry.sol:Registry",
        "label": "totalLoans",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 16322,
        "contract": "contracts/Registry.sol:Registry",
        "label": "loanDetails",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(LoanDetails)12853_storage)"
      },
      {
        "astId": 16326,
        "contract": "contracts/Registry.sol:Registry",
        "label": "personalLoanPayments",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(PersonalLoanPayments)12870_storage)"
      },
      {
        "astId": 16330,
        "contract": "contracts/Registry.sol:Registry",
        "label": "projectLoanPayments",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(ProjectLoanPayments)12901_storage)"
      },
      {
        "astId": 16334,
        "contract": "contracts/Registry.sol:Registry",
        "label": "loanStatus",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_enum(LoanStatus)12828)"
      },
      {
        "astId": 16338,
        "contract": "contracts/Registry.sol:Registry",
        "label": "loanSeeker",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 16340,
        "contract": "contracts/Registry.sol:Registry",
        "label": "governance",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IGovernance)12331"
      },
      {
        "astId": 16342,
        "contract": "contracts/Registry.sol:Registry",
        "label": "lendingToken",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC20)6524"
      },
      {
        "astId": 16344,
        "contract": "contracts/Registry.sol:Registry",
        "label": "mainNFT",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IERC721Mint)12282"
      },
      {
        "astId": 16346,
        "contract": "contracts/Registry.sol:Registry",
        "label": "fundingNFT",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC1155Mint)12273"
      },
      {
        "astId": 16348,
        "contract": "contracts/Registry.sol:Registry",
        "label": "escrow",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IEscrow)12318"
      },
      {
        "astId": 16350,
        "contract": "contracts/Registry.sol:Registry",
        "label": "baseAmountForEachPartition",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 16352,
        "contract": "contracts/Registry.sol:Registry",
        "label": "minimumInterestPercentage",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 16354,
        "contract": "contracts/Registry.sol:Registry",
        "label": "maxMilestones",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 16356,
        "contract": "contracts/Registry.sol:Registry",
        "label": "milestoneExtensionInterval",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 16358,
        "contract": "contracts/Registry.sol:Registry",
        "label": "vestingBatches",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 16360,
        "contract": "contracts/Registry.sol:Registry",
        "label": "vestingTimeInterval",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 16362,
        "contract": "contracts/Registry.sol:Registry",
        "label": "fundingTimeInterval",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC1155Mint)12273": {
        "encoding": "inplace",
        "label": "contract IERC1155Mint",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)6524": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721Mint)12282": {
        "encoding": "inplace",
        "label": "contract IERC721Mint",
        "numberOfBytes": "20"
      },
      "t_contract(IEscrow)12318": {
        "encoding": "inplace",
        "label": "contract IEscrow",
        "numberOfBytes": "20"
      },
      "t_contract(IGovernance)12331": {
        "encoding": "inplace",
        "label": "contract IGovernance",
        "numberOfBytes": "20"
      },
      "t_enum(LoanStatus)12828": {
        "encoding": "inplace",
        "label": "enum LoanLibrary.LoanStatus",
        "numberOfBytes": "1"
      },
      "t_enum(LoanType)12816": {
        "encoding": "inplace",
        "label": "enum LoanLibrary.LoanType",
        "numberOfBytes": "1"
      },
      "t_enum(RepaymentBatchType)12813": {
        "encoding": "inplace",
        "label": "enum LoanLibrary.RepaymentBatchType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_enum(LoanStatus)12828)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum LoanLibrary.LoanStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(LoanStatus)12828"
      },
      "t_mapping(t_uint256,t_struct(LoanDetails)12853_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LoanLibrary.LoanDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(LoanDetails)12853_storage"
      },
      "t_mapping(t_uint256,t_struct(PersonalLoanPayments)12870_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LoanLibrary.PersonalLoanPayments)",
        "numberOfBytes": "32",
        "value": "t_struct(PersonalLoanPayments)12870_storage"
      },
      "t_mapping(t_uint256,t_struct(ProjectLoanPayments)12901_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LoanLibrary.ProjectLoanPayments)",
        "numberOfBytes": "32",
        "value": "t_struct(ProjectLoanPayments)12901_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LoanDetails)12853_storage": {
        "encoding": "inplace",
        "label": "struct LoanLibrary.LoanDetails",
        "members": [
          {
            "astId": 12830,
            "contract": "contracts/Registry.sol:Registry",
            "label": "loanId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12832,
            "contract": "contracts/Registry.sol:Registry",
            "label": "loanType",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(LoanType)12816"
          },
          {
            "astId": 12834,
            "contract": "contracts/Registry.sol:Registry",
            "label": "approvalDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12836,
            "contract": "contracts/Registry.sol:Registry",
            "label": "startingDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12838,
            "contract": "contracts/Registry.sol:Registry",
            "label": "collateralToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 12840,
            "contract": "contracts/Registry.sol:Registry",
            "label": "collateralAmount",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 12842,
            "contract": "contracts/Registry.sol:Registry",
            "label": "lendingAmount",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 12844,
            "contract": "contracts/Registry.sol:Registry",
            "label": "totalPartitions",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 12846,
            "contract": "contracts/Registry.sol:Registry",
            "label": "totalInterest",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 12848,
            "contract": "contracts/Registry.sol:Registry",
            "label": "interestPercentage",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 12850,
            "contract": "contracts/Registry.sol:Registry",
            "label": "extraInfo",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 12852,
            "contract": "contracts/Registry.sol:Registry",
            "label": "partitionsPurchased",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(PersonalLoanPayments)12870_storage": {
        "encoding": "inplace",
        "label": "struct LoanLibrary.PersonalLoanPayments",
        "members": [
          {
            "astId": 12855,
            "contract": "contracts/Registry.sol:Registry",
            "label": "batchesPaid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12857,
            "contract": "contracts/Registry.sol:Registry",
            "label": "amountEachBatch",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12859,
            "contract": "contracts/Registry.sol:Registry",
            "label": "totalAmountOfBatches",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12861,
            "contract": "contracts/Registry.sol:Registry",
            "label": "timeIntervalBetweenBatches",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12863,
            "contract": "contracts/Registry.sol:Registry",
            "label": "batchesSkipped",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 12865,
            "contract": "contracts/Registry.sol:Registry",
            "label": "batchStartingTimestamp",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 12867,
            "contract": "contracts/Registry.sol:Registry",
            "label": "batchDeadlineTimestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 12869,
            "contract": "contracts/Registry.sol:Registry",
            "label": "repaymentBatchType",
            "offset": 0,
            "slot": "7",
            "type": "t_enum(RepaymentBatchType)12813"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(ProjectLoanPayments)12901_storage": {
        "encoding": "inplace",
        "label": "struct LoanLibrary.ProjectLoanPayments",
        "members": [
          {
            "astId": 12872,
            "contract": "contracts/Registry.sol:Registry",
            "label": "totalMilestones",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12876,
            "contract": "contracts/Registry.sol:Registry",
            "label": "milestoneLendingAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 12880,
            "contract": "contracts/Registry.sol:Registry",
            "label": "milestoneDuration",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 12882,
            "contract": "contracts/Registry.sol:Registry",
            "label": "awaitingForRepaymentDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12884,
            "contract": "contracts/Registry.sol:Registry",
            "label": "paymentTimeInterval",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 12886,
            "contract": "contracts/Registry.sol:Registry",
            "label": "milestonesDelivered",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 12888,
            "contract": "contracts/Registry.sol:Registry",
            "label": "milestonesExtended",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 12890,
            "contract": "contracts/Registry.sol:Registry",
            "label": "currentMilestoneStartingTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 12892,
            "contract": "contracts/Registry.sol:Registry",
            "label": "currentMilestoneDeadlineTimestamp",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 12894,
            "contract": "contracts/Registry.sol:Registry",
            "label": "discountPerMillion",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 12898,
            "contract": "contracts/Registry.sol:Registry",
            "label": "milestoneProjectTokenPrice",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 12900,
            "contract": "contracts/Registry.sol:Registry",
            "label": "partitionsPaidInProjectTokens",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}