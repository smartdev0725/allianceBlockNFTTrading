{
  "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "isMilestone",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "milestoneNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "ApprovalRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "registryAddress_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "stakingAddress_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "InitGovernance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "decision",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "VotedForRequest",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "amountOfEpochDaoDelegatorsNeededPerEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "amountOfEpochDaoMembersNeededPerEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "amountOfSubstitutesRequested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approvalRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isMilestone",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "milestoneNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadlineTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "approvalsProvided",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isApproved",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "epochSubmitted",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "password",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "daoDelegatorToVoteFor",
          "type": "address"
        }
      ],
      "name": "approveVoteForDaoDelegator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bannedDelegator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkCronjobs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimDaoDelegation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimDaoMembership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimDaoSubstituteDelegation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cronjobList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "head",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tail",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cronjobs",
      "outputs": [
        {
          "internalType": "enum GovernanceTypesAndStorage.CronjobType",
          "name": "cronjobType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "externalId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoDelegatorsListForUpcomingEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "head",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tail",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoMembersListForUpcomingEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "head",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tail",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoSubstituteDelegatorsListForCurrentEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "head",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tail",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoSubstituteMembersListForCurrentEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "head",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tail",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "epochDaoDelegators",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "head",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tail",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "epochDaoMembers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "head",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tail",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDaoData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hasApprovedForDaoDelegatorPerEpoch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hasVotedForDaoDelegatorPerEpoch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hasVotedForDaoMemberPerEpoch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hasVotedForRequestId",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "idToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superDelegator_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "loanApprovalRequestDuration_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "milestoneApprovalRequestDuration_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daoUpdateRequestDuration_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "approvalsNeededForRegistryRequest_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "approvalsNeededForGovernanceRequest_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        }
      ],
      "name": "isDaoAssociated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isEpochDaoDelegator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "isEpochDaoMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOfDaoDelegators_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daoMembershipVotingDuration_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daoDelegationVotingDuration_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daoDelegationApprovalDuration_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daoDelegationSubstituteClaimDuration_",
          "type": "uint256"
        }
      ],
      "name": "openDaoDelegating",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOfDaoMembers_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daoClaimingDuration_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daoLateClaimingDuration_",
          "type": "uint256"
        }
      ],
      "name": "openDaoDelegatingSubscriptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openDaoDelegatingVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openDaoMembershipSubscriptions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openDaoMembershipVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "remainingDelegatorIdsToVotePerRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "head",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tail",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "remainingMemberIdsToVoteForDelegator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "head",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tail",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "remainingMemberIdsToVotePerRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "head",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tail",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "loanId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isMilestone",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "milestoneNumber",
          "type": "uint256"
        }
      ],
      "name": "requestApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestsPerEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "head",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tail",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardsForDaoDelegatorsPerEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardsForDaoMembersPerEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registryAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakingAddress_",
          "type": "address"
        }
      ],
      "name": "setRegistryAndStaking",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscribeForDaoDelegator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscribeForDaoMembership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "subscribedForDaoDelegator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "subscribedForDaoMembership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "superDelegator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "decision",
          "type": "bool"
        }
      ],
      "name": "superVoteForRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalApprovalRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCronjobs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unsubscribeDaoDelegation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unsubscribeDaoMembership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "updatableVariables",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "votingHash",
          "type": "bytes32"
        }
      ],
      "name": "voteForDaoDelegator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "daoSubscriberToVoteFor",
          "type": "address"
        }
      ],
      "name": "voteForDaoMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "decision",
          "type": "bool"
        }
      ],
      "name": "voteForRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "votingHashOfDaoMembersPerEpoch",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingStatusForDaoDelegators",
      "outputs": [
        {
          "internalType": "enum GovernanceTypesAndStorage.VotingStatusDelegators",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingStatusForDaoMembers",
      "outputs": [
        {
          "internalType": "enum GovernanceTypesAndStorage.VotingStatusMembers",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4a2d519d4f3809b799c48226083bf2610691e60d4aefad18a2e9c22722065080",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
    "transactionIndex": 0,
    "gasUsed": "4748362",
    "logsBloom": "0x
    "blockHash": "0xc96cf475cf969cecdaa354cdb15d4dab02fc25598b28cfb7feb8ac9dad5294ca",
    "transactionHash": "0x4a2d519d4f3809b799c48226083bf2610691e60d4aefad18a2e9c22722065080",
    "logs": [],
    "blockNumber": 10,
    "cumulativeGasUsed": "4748362",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e60bb0e73d6effd5378c34ac90e2d948",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isMilestone\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"milestoneNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ApprovalRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registryAddress_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"stakingAddress_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"InitGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"decision\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"VotedForRequest\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amountOfEpochDaoDelegatorsNeededPerEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amountOfEpochDaoMembersNeededPerEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"amountOfSubstitutesRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvalRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMilestone\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"milestoneNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadlineTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approvalsProvided\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"epochSubmitted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"daoDelegatorToVoteFor\",\"type\":\"address\"}],\"name\":\"approveVoteForDaoDelegator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bannedDelegator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkCronjobs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDaoDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDaoMembership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDaoSubstituteDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cronjobList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tail\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cronjobs\",\"outputs\":[{\"internalType\":\"enum GovernanceTypesAndStorage.CronjobType\",\"name\":\"cronjobType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"externalId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoDelegatorsListForUpcomingEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tail\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoMembersListForUpcomingEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tail\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoSubstituteDelegatorsListForCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tail\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoSubstituteMembersListForCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tail\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochDaoDelegators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tail\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"epochDaoMembers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tail\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDaoData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasApprovedForDaoDelegatorPerEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasVotedForDaoDelegatorPerEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasVotedForDaoMemberPerEpoch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hasVotedForRequestId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"idToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superDelegator_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"loanApprovalRequestDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"milestoneApprovalRequestDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoUpdateRequestDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approvalsNeededForRegistryRequest_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approvalsNeededForGovernanceRequest_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"name\":\"isDaoAssociated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isEpochDaoDelegator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isEpochDaoMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOfDaoDelegators_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoMembershipVotingDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoDelegationVotingDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoDelegationApprovalDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoDelegationSubstituteClaimDuration_\",\"type\":\"uint256\"}],\"name\":\"openDaoDelegating\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOfDaoMembers_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoClaimingDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoLateClaimingDuration_\",\"type\":\"uint256\"}],\"name\":\"openDaoDelegatingSubscriptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openDaoDelegatingVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openDaoMembershipSubscriptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openDaoMembershipVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"remainingDelegatorIdsToVotePerRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tail\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"remainingMemberIdsToVoteForDelegator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tail\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"remainingMemberIdsToVotePerRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tail\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"loanId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isMilestone\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"milestoneNumber\",\"type\":\"uint256\"}],\"name\":\"requestApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestsPerEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tail\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsForDaoDelegatorsPerEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardsForDaoMembersPerEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingAddress_\",\"type\":\"address\"}],\"name\":\"setRegistryAndStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscribeForDaoDelegator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscribeForDaoMembership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subscribedForDaoDelegator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subscribedForDaoMembership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superDelegator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"decision\",\"type\":\"bool\"}],\"name\":\"superVoteForRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalApprovalRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCronjobs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unsubscribeDaoDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unsubscribeDaoMembership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"updatableVariables\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"votingHash\",\"type\":\"bytes32\"}],\"name\":\"voteForDaoDelegator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daoSubscriberToVoteFor\",\"type\":\"address\"}],\"name\":\"voteForDaoMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"decision\",\"type\":\"bool\"}],\"name\":\"voteForRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votingHashOfDaoMembersPerEpoch\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingStatusForDaoDelegators\",\"outputs\":[{\"internalType\":\"enum GovernanceTypesAndStorage.VotingStatusDelegators\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingStatusForDaoMembers\",\"outputs\":[{\"internalType\":\"enum GovernanceTypesAndStorage.VotingStatusMembers\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getDaoData()\":{\"details\":\"Helper function for querying Governance variables\",\"returns\":{\"_0\":\"internal Governance uint variables\"}},\"initialize(address,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Initialize the contract.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"AllianceBlock Governance contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Responsible for governing AllianceBlock's ecosystem\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Governance.sol\":\"Governance\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/Governance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"./governance/DaoSubscriptions.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IRegistry.sol\\\";\\nimport \\\"./interfaces/IStaking.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title AllianceBlock Governance contract\\n * @notice Responsible for governing AllianceBlock's ecosystem\\n */\\ncontract Governance is Initializable, DaoSubscriptions {\\n    using SafeMath for uint256;\\n    using DoubleLinkedList for DoubleLinkedList.LinkedList;\\n\\n    /**\\n     * @dev Initialize the contract.\\n     */\\n    function initialize(\\n        address superDelegator_,\\n        uint256 loanApprovalRequestDuration_,\\n        uint256 milestoneApprovalRequestDuration_,\\n        uint256 daoUpdateRequestDuration_,\\n        uint256 approvalsNeededForRegistryRequest_,\\n        uint256 approvalsNeededForGovernanceRequest_\\n    ) public initializer {\\n        __Ownable_init();\\n\\n        superDelegator = superDelegator_;\\n\\n        updatableVariables[keccak256(abi.encode(\\\"loanApprovalRequestDuration\\\"))] = loanApprovalRequestDuration_;\\n        updatableVariables[keccak256(abi.encode(\\\"milestoneApprovalRequestDuration\\\"))] = milestoneApprovalRequestDuration_;\\n        updatableVariables[keccak256(abi.encode(\\\"daoUpdateRequestDuration\\\"))] = daoUpdateRequestDuration_;\\n        updatableVariables[keccak256(abi.encode(\\\"approvalsNeededForRegistryRequest\\\"))] = approvalsNeededForRegistryRequest_;\\n        updatableVariables[keccak256(abi.encode(\\\"approvalsNeededForGovernanceRequest\\\"))] = approvalsNeededForGovernanceRequest_;\\n    }\\n\\n    function requestApproval(\\n    \\tuint256 loanId,\\n        bool isMilestone,\\n        uint256 milestoneNumber\\n    )\\n    external\\n    onlyRegistry()\\n    checkCronjob()\\n    {\\n        approvalRequests[totalApprovalRequests].loanId = loanId;\\n        approvalRequests[totalApprovalRequests].isMilestone = isMilestone;\\n        approvalRequests[totalApprovalRequests].epochSubmitted = currentEpoch;\\n\\n        if (isMilestone) {\\n            approvalRequests[totalApprovalRequests].milestoneNumber = milestoneNumber;\\n            approvalRequests[totalApprovalRequests].deadlineTimestamp =\\n                block.timestamp.add(updatableVariables[keccak256(abi.encode(\\\"milestoneApprovalRequestDuration\\\"))]);\\n        } else {\\n            approvalRequests[totalApprovalRequests].deadlineTimestamp =\\n                block.timestamp.add(updatableVariables[keccak256(abi.encode(\\\"loanApprovalRequestDuration\\\"))]);\\n        }\\n\\n        if (currentEpoch > 1) {\\n            addCronjob(\\n                CronjobType.DAO_APPROVAL,\\n                approvalRequests[totalApprovalRequests].deadlineTimestamp,\\n                totalApprovalRequests\\n            );\\n\\n            requestsPerEpoch[currentEpoch].addNode(totalApprovalRequests);\\n\\n            if (epochDaoDelegators[currentEpoch].getSize() > 0) {\\n                epochDaoDelegators[currentEpoch].cloneList(remainingDelegatorIdsToVotePerRequest[totalApprovalRequests]);\\n            }\\n        }\\n\\n        emit ApprovalRequested(\\n            approvalRequests[totalApprovalRequests].loanId,\\n            approvalRequests[totalApprovalRequests].isMilestone,\\n            approvalRequests[totalApprovalRequests].milestoneNumber,\\n            msg.sender\\n        );\\n\\n        totalApprovalRequests = totalApprovalRequests.add(1);\\n    }\\n\\n    function voteForRequest(\\n        uint256 requestId,\\n        bool decision\\n    )\\n    external\\n    onlyDaoDelegatorNotVoted(requestId, approvalRequests[requestId].epochSubmitted)\\n    onlyBeforeDeadline(requestId)\\n    checkCronjob()\\n    {\\n        if (decision) {\\n            approvalRequests[requestId].approvalsProvided = approvalRequests[requestId].approvalsProvided.add(1);\\n        }\\n\\n        remainingDelegatorIdsToVotePerRequest[requestId].removeNode(addressToId[msg.sender]);\\n\\n        emit VotedForRequest(approvalRequests[requestId].loanId, requestId, decision, msg.sender);\\n    }\\n\\n    /**\\n    * @dev Helper function for querying Governance variables\\n    * @return internal Governance uint variables\\n    */\\n    function getDaoData() public view returns (uint256, uint256, uint256, uint256, uint256){\\n        (, uint256 amountToStakeForDaoMember, ) = staking.getAmountsToStake();\\n\\n        return (\\n            totalApprovalRequests,\\n            updatableVariables[keccak256(abi.encode(\\\"approvalsNeededForRegistryRequest\\\"))],\\n            updatableVariables[keccak256(abi.encode(\\\"loanApprovalRequestDuration\\\"))],\\n            updatableVariables[keccak256(abi.encode(\\\"milestoneApprovalRequestDuration\\\"))],\\n            amountToStakeForDaoMember\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x1575d0f2d88584d7660b2b9535d36c86ab8d32b0b968abbf809e8dc4995a92fb\",\"license\":\"MIT\"},\"contracts/governance/DaoCronjob.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./GovernanceTypesAndStorage.sol\\\";\\n\\n/**\\n * @title AllianceBlock Governance contract\\n * @notice Responsible for governing AllianceBlock's ecosystem\\n */\\ncontract DaoCronjob is GovernanceTypesAndStorage {\\n    using SafeMath for uint256;\\n    using ValuedDoubleLinkedList for ValuedDoubleLinkedList.LinkedList;\\n    using DoubleLinkedList for DoubleLinkedList.LinkedList;\\n\\n    modifier checkCronjob() {\\n        checkCronjobs();\\n        _;\\n    }\\n\\n    function checkCronjobs() public returns (bool) {\\n        uint256 mostRecentCronjobTimestamp = cronjobList.getHeadValue();\\n        if (mostRecentCronjobTimestamp == 0 || block.timestamp < mostRecentCronjobTimestamp) return false;\\n        else { // only pop head for now for gas reasons, maybe later we can execute them all together.\\n            (uint256 head, uint256 timestamp) = cronjobList.popHeadAndValue();\\n            executeCronjob(head, timestamp);\\n        }\\n\\n        return true;\\n    }\\n\\n    function executeCronjob(uint256 cronjobId, uint256 timestamp) internal {\\n        if (cronjobs[cronjobId].cronjobType == CronjobType.DAO_APPROVAL) {\\n            executeDaoApproval(cronjobs[cronjobId].externalId);\\n        }\\n        else if (cronjobs[cronjobId].cronjobType == CronjobType.DAO_VOTING_REQUEST) {\\n            // TODO - executeDaoRequest(cronjobs[cronjobId].externalId);\\n        }\\n        else if (cronjobs[cronjobId].cronjobType == CronjobType.DAO_MEMBERSHIP_VOTING) {\\n            updateDaoMembershipVotingState(timestamp);\\n        }\\n        else if (cronjobs[cronjobId].cronjobType == CronjobType.DAO_DELEGATORS_VOTING) {\\n            updateDaoDelegationVotingState(timestamp);\\n        }\\n        else if (cronjobs[cronjobId].cronjobType == CronjobType.DAO_REWARDS_PROVISION) {\\n            staking.provideRewards(\\n                rewardsForDaoMembersPerEpoch[currentEpoch.sub(1)],\\n                rewardsForDaoDelegatorsPerEpoch[currentEpoch.sub(1)],\\n                currentEpoch.sub(1)\\n            );\\n        }\\n        else {\\n            updateSubstitutes();\\n        }\\n    }\\n\\n    function addCronjob(CronjobType cronjobType, uint256 timestamp, uint256 externalId) internal {\\n        totalCronjobs = totalCronjobs.add(1);\\n        cronjobs[totalCronjobs] = Cronjob(cronjobType, externalId);\\n        cronjobList.addNodeIncrement(timestamp, totalCronjobs);\\n    }\\n\\n    function removeCronjob(uint256 cronjobId) internal {\\n        cronjobList.removeNode(cronjobId);\\n    }\\n\\n    function updateDaoMembershipVotingState(uint256 timestamp) internal {\\n        uint256 nextCronjobTimestamp;\\n\\n        if (votingStatusForDaoMembers == VotingStatusMembers.VOTING) {\\n            amountOfEpochDaoMembersNeededPerEpoch[currentEpoch.add(1)] = updatableVariables[keccak256(abi.encode(\\\"amountOfDaoMembers\\\"))];\\n            votingStatusForDaoMembers = VotingStatusMembers.CLAIM_MEMBERSHIP;\\n\\n            nextCronjobTimestamp = timestamp.add(updatableVariables[keccak256(abi.encode(\\\"daoClaimingDuration\\\"))]);\\n            addCronjob(CronjobType.DAO_MEMBERSHIP_VOTING, nextCronjobTimestamp, 0);\\n        }\\n        else if (votingStatusForDaoMembers == VotingStatusMembers.CLAIM_MEMBERSHIP) {\\n            uint256 nodesToRemove = amountOfEpochDaoMembersNeededPerEpoch[currentEpoch];\\n            if (daoMembersListForUpcomingEpoch.getSize() < amountOfEpochDaoMembersNeededPerEpoch[currentEpoch.add(1)].mul(2)) {\\n                nodesToRemove = amountOfEpochDaoMembersNeededPerEpoch[currentEpoch.add(1)].mul(2).sub(daoMembersListForUpcomingEpoch.getSize());\\n            }\\n            if (nodesToRemove > 0) {\\n                daoMembersListForUpcomingEpoch.removeMultipleFromHead(nodesToRemove);\\n            }\\n\\n            votingStatusForDaoMembers = VotingStatusMembers.LATE_MEMBERSHIP_CLAIMING;\\n\\n            if (updatableVariables[keccak256(abi.encode(\\\"daoMembershipVotingDuration\\\"))] == 0) {\\n                nextCronjobTimestamp = timestamp.add(updatableVariables[keccak256(abi.encode(\\\"daoLateClaimingDuration\\\"))]);\\n                addCronjob(CronjobType.DAO_MEMBERSHIP_VOTING, nextCronjobTimestamp, 0);\\n            }\\n        }\\n        else { // ONLY FOR FIRST EPOCH\\n            delete daoMembersListForUpcomingEpoch;\\n\\n            currentEpoch = 1;\\n        }\\n    }\\n\\n    function updateDaoDelegationVotingState(uint256 timestamp) internal {\\n        uint256 nextCronjobTimestamp;\\n\\n        if (votingStatusForDaoDelegators == VotingStatusDelegators.VOTING) {\\n            votingStatusForDaoDelegators = VotingStatusDelegators.APPROVE_VOTING;\\n\\n            nextCronjobTimestamp = timestamp.add(updatableVariables[keccak256(abi.encode(\\\"daoDelegationApprovalDuration\\\"))]);\\n        }\\n        else if (votingStatusForDaoDelegators == VotingStatusDelegators.APPROVE_VOTING) {\\n            // TODO_MAYBE - Check DAO_MEMBERS not voted\\n            amountOfEpochDaoDelegatorsNeededPerEpoch[currentEpoch.add(1)] = updatableVariables[keccak256(abi.encode(\\\"amountOfDaoDelegators\\\"))];\\n            votingStatusForDaoDelegators = VotingStatusDelegators.CLAIM_DELEGATION;\\n\\n            nextCronjobTimestamp = timestamp.add(updatableVariables[keccak256(abi.encode(\\\"daoClaimingDuration\\\"))]);\\n        }\\n        else if (votingStatusForDaoDelegators == VotingStatusDelegators.CLAIM_DELEGATION) {\\n            uint256 nodesToRemove = amountOfEpochDaoDelegatorsNeededPerEpoch[currentEpoch];\\n            if (daoMembersListForUpcomingEpoch.getSize() < amountOfEpochDaoDelegatorsNeededPerEpoch[currentEpoch.add(1)].mul(2)) {\\n                nodesToRemove = amountOfEpochDaoDelegatorsNeededPerEpoch[currentEpoch.add(1)].mul(2).sub(daoDelegatorsListForUpcomingEpoch.getSize());\\n            }\\n            if (nodesToRemove > 0) {\\n                daoDelegatorsListForUpcomingEpoch.removeMultipleFromHead(nodesToRemove);\\n            }\\n\\n            votingStatusForDaoDelegators = VotingStatusDelegators.LATE_DELEGATION_CLAIMING;\\n\\n            nextCronjobTimestamp = timestamp.add(updatableVariables[keccak256(abi.encode(\\\"daoLateClaimingDuration\\\"))]);\\n        }\\n        else {\\n            nextCronjobTimestamp = changeEpoch(timestamp);\\n        }\\n\\n        addCronjob(CronjobType.DAO_DELEGATORS_VOTING, nextCronjobTimestamp, 0);\\n    }\\n\\n    function changeEpoch(uint256 timestamp) internal returns (uint256) {\\n        daoDelegatorsListForUpcomingEpoch.cloneList(daoSubstituteDelegatorsListForCurrentEpoch);\\n\\n        delete daoMembersListForUpcomingEpoch;\\n        delete daoDelegatorsListForUpcomingEpoch;\\n\\n        votingStatusForDaoMembers = VotingStatusMembers.VOTING;\\n        votingStatusForDaoDelegators = VotingStatusDelegators.VOTING;\\n\\n        uint256 nextCronjobTimestamp = timestamp.add(updatableVariables[keccak256(abi.encode(\\\"daoMembershipVotingDuration\\\"))]);\\n        addCronjob(CronjobType.DAO_MEMBERSHIP_VOTING, nextCronjobTimestamp, 0);\\n\\n        nextCronjobTimestamp = timestamp.add(updatableVariables[keccak256(abi.encode(\\\"daoDelegationVotingDuration\\\"))]);\\n\\n        uint256 requestsRemaining = requestsPerEpoch[currentEpoch].getSize();\\n\\n        if (requestsRemaining == 0) {\\n            staking.provideRewards(\\n                rewardsForDaoMembersPerEpoch[currentEpoch],\\n                rewardsForDaoDelegatorsPerEpoch[currentEpoch],\\n                currentEpoch\\n            );\\n        }\\n        else {\\n            uint256 latestRequestDeadlineTimestamp = checkTimestampOfLastRequestForCurrentEpoch(requestsRemaining);\\n            addCronjob(CronjobType.DAO_REWARDS_PROVISION, latestRequestDeadlineTimestamp, 0);\\n        }\\n\\n        currentEpoch = currentEpoch.add(1);\\n\\n        return nextCronjobTimestamp;\\n    }\\n\\n    function executeDaoApproval(uint256 requestId) internal {\\n        uint256 approvalsNeeded = updatableVariables[keccak256(abi.encode(\\\"approvalsNeededForRegistryRequest\\\"))];\\n        requestsPerEpoch[approvalRequests[requestId].epochSubmitted].removeNode(requestId);\\n\\n        bool decision = false;\\n        if (approvalRequests[requestId].approvalsProvided >= approvalsNeeded) {\\n            decision = true;\\n            approvalRequests[requestId].isApproved = true;\\n        }\\n\\n        approvalRequests[requestId].isMilestone ?\\n            registry.decideForMilestone(approvalRequests[requestId].loanId, decision) :\\n            registry.decideForLoan(approvalRequests[requestId].loanId, decision);\\n\\n        uint256 numberOfNonVotingDelegators = remainingDelegatorIdsToVotePerRequest[requestId].getSize();\\n\\n        if (numberOfNonVotingDelegators > 0) {\\n            penaltizeDelegatorsForNonVoting(numberOfNonVotingDelegators, approvalRequests[requestId].epochSubmitted, requestId);\\n        }\\n    }\\n\\n    function checkTimestampOfLastRequestForCurrentEpoch(uint256 requestsRemaining) internal returns (uint256) {\\n        uint256 latestRequestDeadlineTimestamp;\\n\\n        for (uint256 i = 1; i <= requestsRemaining; i++) {\\n            uint256 id = requestsPerEpoch[currentEpoch].getIndexedId(i);\\n\\n            if (approvalRequests[id].deadlineTimestamp > latestRequestDeadlineTimestamp) {\\n                latestRequestDeadlineTimestamp = approvalRequests[id].deadlineTimestamp;\\n            }\\n        }\\n\\n        return latestRequestDeadlineTimestamp;\\n    }\\n\\n    function penaltizeDelegatorsForNonVoting(\\n        uint256 amountOfPenaltizedDelegators,\\n        uint256 epochOfRequest,\\n        uint256 requestId\\n    )\\n    internal\\n    {\\n        bool isEpochOfRequestSameAsCurrent = currentEpoch == epochOfRequest;\\n\\n        uint256 amountOfSubstitutes;\\n\\n        for (uint256 i = 0; i < amountOfPenaltizedDelegators; i++) {\\n            uint256 idToPenaltize = remainingDelegatorIdsToVotePerRequest[requestId].popHead();\\n\\n            epochDaoDelegators[epochOfRequest].removeNode(idToPenaltize);\\n            isEpochDaoDelegator[idToAddress[idToPenaltize]][epochOfRequest] = false;\\n            bannedDelegator[idToPenaltize][epochOfRequest.add(1)] = true;\\n\\n            // If he is substitute for current epoch should be removed as well.\\n            daoSubstituteDelegatorsListForCurrentEpoch.removeNode(idToPenaltize);\\n\\n            removePenaltizedDelegatorFromActiveRequests(idToPenaltize, epochOfRequest);\\n\\n            // If he is delegator in current epoch, while current is different that epochOfRequest and should get penaltized.\\n            if (!isEpochOfRequestSameAsCurrent && isEpochDaoDelegator[idToAddress[idToPenaltize]][currentEpoch]) {\\n                epochDaoDelegators[currentEpoch].removeNode(idToPenaltize);\\n                isEpochDaoDelegator[idToAddress[idToPenaltize]][currentEpoch] = false;\\n\\n                removePenaltizedDelegatorFromActiveRequests(idToPenaltize, currentEpoch);\\n\\n                amountOfSubstitutes = amountOfSubstitutes.add(1);\\n            }\\n\\n            // Remove from voting list for next epoch.\\n            if (isEpochOfRequestSameAsCurrent) {\\n                daoDelegatorsListForUpcomingEpoch.removeNode(idToPenaltize);\\n            }\\n        }\\n\\n        if (isEpochOfRequestSameAsCurrent) amountOfSubstitutes = amountOfPenaltizedDelegators;\\n\\n        if (amountOfSubstitutes > 0) requestSubstitutes(amountOfSubstitutes);\\n    }\\n\\n    function removePenaltizedDelegatorFromActiveRequests(uint256 delegatorId, uint256 epoch) internal {\\n        uint256 requestsRemaining = requestsPerEpoch[epoch].getSize();\\n\\n        if (requestsRemaining > 0) {\\n            for (uint256 i = 1; i <= requestsRemaining; i++) {\\n                uint256 id = requestsPerEpoch[epoch].getIndexedId(i);\\n\\n                remainingDelegatorIdsToVotePerRequest[id].removeNode(delegatorId);\\n            }\\n        }\\n    }\\n\\n    function addSubstituteToAllActiveRequests(uint256 delegatorId, uint256 epoch) internal {\\n        uint256 requestsRemaining = requestsPerEpoch[epoch].getSize();\\n\\n        if (requestsRemaining > 0) {\\n            for (uint256 i = 1; i <= requestsRemaining; i++) {\\n                uint256 id = requestsPerEpoch[epoch].getIndexedId(i);\\n\\n                remainingDelegatorIdsToVotePerRequest[id].addNode(delegatorId);\\n            }\\n        }\\n    }\\n\\n    function updateSubstitutes() internal {\\n        if (amountOfSubstitutesRequested[currentEpoch] > 0) {\\n            for (uint256 i = 0; i < amountOfSubstitutesRequested[currentEpoch]; i++) {\\n                daoSubstituteDelegatorsListForCurrentEpoch.popHead();\\n            }\\n\\n            addCronjob(\\n                CronjobType.DAO_SUBSTITUTES,\\n                block.timestamp.add(updatableVariables[keccak256(abi.encode(\\\"daoDelegationSubstituteClaimDuration\\\"))]),\\n                0\\n            );\\n        }\\n    }\\n\\n    function requestSubstitutes(uint256 amountOfSubstitutes) internal {\\n        amountOfSubstitutesRequested[currentEpoch] = amountOfSubstitutes;\\n\\n        addCronjob(\\n            CronjobType.DAO_SUBSTITUTES,\\n            block.timestamp.add(updatableVariables[keccak256(abi.encode(\\\"daoDelegationSubstituteClaimDuration\\\"))]),\\n            0\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xa6902eb9b03661ff6df8cd2b3db3a687efb2f7e42a88649a9769f1022bbdb50a\",\"license\":\"MIT\"},\"contracts/governance/DaoSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"./SuperGovernance.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n/**\\n * @title AllianceBlock DaoSubscriptions contract\\n * @notice Responsible for all dao subscriptions on AllianceBlock's ecosystem\\n */\\ncontract DaoSubscriptions is SuperGovernance {\\n    using SafeMath for uint256;\\n    using ValuedDoubleLinkedList for ValuedDoubleLinkedList.LinkedList;\\n    using DoubleLinkedList for DoubleLinkedList.LinkedList;\\n\\n    function subscribeForDaoMembership()\\n    external\\n    checkCronjob()\\n    {\\n        require(votingStatusForDaoMembers > VotingStatusMembers.EMPTY_STATE, \\\"Subscriptions for Dao Membership are not open right now\\\");\\n\\n        staking.provideStakingForDaoMembership(msg.sender);\\n        subscribedForDaoMembership[msg.sender] = true;\\n\\n        if(addressToId[msg.sender] == 0) {\\n            totalIds = totalIds.add(1);\\n            addressToId[msg.sender] = totalIds;\\n            idToAddress[totalIds] = msg.sender;\\n        }\\n    }\\n\\n    function unsubscribeDaoMembership()\\n    external\\n    checkCronjob()\\n    {\\n        require(!isEpochDaoMember[msg.sender][currentEpoch], \\\"Cannot unsubscribe while being active dao member\\\");\\n\\n        subscribedForDaoMembership[msg.sender] = false;\\n        staking.unstakeDao(msg.sender, true);\\n    }\\n\\n    function voteForDaoMember(address daoSubscriberToVoteFor)\\n    external\\n    checkCronjob()\\n    {\\n        require(votingStatusForDaoMembers == VotingStatusMembers.VOTING, \\\"Voting for Dao Members is not open right now\\\");\\n        require(staking.getBalance(msg.sender) > 0, \\\"Only stakers can vote\\\");\\n        require(subscribedForDaoMembership[daoSubscriberToVoteFor], \\\"Can only vote for active dao membership subscriber\\\");\\n        require(!hasVotedForDaoMemberPerEpoch[msg.sender][currentEpoch], \\\"Cannot vote again\\\");\\n\\n        hasVotedForDaoMemberPerEpoch[msg.sender][currentEpoch] = true;\\n\\n        uint256 votesForSubscriber = daoMembersListForUpcomingEpoch.nodes[addressToId[daoSubscriberToVoteFor]].value;\\n\\n        if(votesForSubscriber != 0) {\\n            daoMembersListForUpcomingEpoch.removeNode(addressToId[daoSubscriberToVoteFor]);\\n        }\\n\\n        daoMembersListForUpcomingEpoch.addNodeDecrement(votesForSubscriber.add(1), addressToId[daoSubscriberToVoteFor]);\\n    }\\n\\n    function claimDaoMembership()\\n    external\\n    checkCronjob()\\n    {\\n        require(votingStatusForDaoMembers >= VotingStatusMembers.CLAIM_MEMBERSHIP, \\\"Claiming Dao Membership is not open right now\\\");\\n        uint256 currentPosition = daoMembersListForUpcomingEpoch.getPositionForId(addressToId[msg.sender]);\\n\\n        require(currentPosition > 0 && currentPosition <=\\n            amountOfEpochDaoMembersNeededPerEpoch[currentEpoch.add(1)], \\\"Not eligible to become dao member\\\");\\n\\n        daoMembersListForUpcomingEpoch.removeNode(addressToId[msg.sender]);\\n        amountOfEpochDaoMembersNeededPerEpoch[currentEpoch.add(1)] =\\n            amountOfEpochDaoMembersNeededPerEpoch[currentEpoch.add(1)].sub(1);\\n        isEpochDaoMember[msg.sender][currentEpoch.add(1)] = true;\\n\\n        epochDaoMembers[currentEpoch.add(1)].addNode(addressToId[msg.sender]);\\n    }\\n\\n    function subscribeForDaoDelegator()\\n    external\\n    checkCronjob()\\n    {\\n        require(isEpochDaoMember[msg.sender][currentEpoch], \\\"Only active dao members can subscribe to become delegators\\\");\\n\\n        staking.provideStakingForDaoDelegator(msg.sender);\\n        subscribedForDaoDelegator[msg.sender] = true;\\n    }\\n\\n    function unsubscribeDaoDelegation()\\n    external\\n    checkCronjob()\\n    {\\n        require(!isEpochDaoDelegator[msg.sender][currentEpoch], \\\"Cannot unsubscribe while being active dao delegator\\\");\\n\\n        subscribedForDaoDelegator[msg.sender] = false;\\n        staking.unstakeDao(msg.sender, false);\\n    }\\n\\n    function voteForDaoDelegator(bytes32 votingHash)\\n    external\\n    checkCronjob()\\n    {\\n        require(votingStatusForDaoDelegators == VotingStatusDelegators.VOTING, \\\"Voting for Dao Delegators is not open right now\\\");\\n        require(isEpochDaoMember[msg.sender][currentEpoch], \\\"Only dao members can vote\\\");\\n        require(!hasVotedForDaoDelegatorPerEpoch[msg.sender][currentEpoch], \\\"Cannot vote again\\\");\\n\\n        hasVotedForDaoDelegatorPerEpoch[msg.sender][currentEpoch] = true;\\n\\n        votingHashOfDaoMembersPerEpoch[msg.sender][currentEpoch] = votingHash;\\n    }\\n\\n    function approveVoteForDaoDelegator(string calldata password, address daoDelegatorToVoteFor)\\n    external\\n    checkCronjob()\\n    {\\n        require(votingStatusForDaoDelegators == VotingStatusDelegators.APPROVE_VOTING, \\\"Approve voting for Dao Delegators is not open right now\\\");\\n        require(votingHashOfDaoMembersPerEpoch[msg.sender][currentEpoch] ==\\n            keccak256(abi.encodePacked(password, daoDelegatorToVoteFor)), \\\"Wrong approval password or delegator\\\");\\n        require(subscribedForDaoDelegator[daoDelegatorToVoteFor], \\\"Can only vote for active dao delegator subscriber\\\");\\n        require(isEpochDaoMember[daoDelegatorToVoteFor][currentEpoch], \\\"Can only vote delegator that is active dao member\\\");\\n        require(!hasApprovedForDaoDelegatorPerEpoch[msg.sender][currentEpoch], \\\"Cannot approve vote again\\\");\\n\\n        hasApprovedForDaoDelegatorPerEpoch[msg.sender][currentEpoch] = true;\\n\\n        if (!bannedDelegator[addressToId[daoDelegatorToVoteFor]][currentEpoch.add(1)]) {\\n            uint256 votesForSubscriber = daoDelegatorsListForUpcomingEpoch.nodes[addressToId[daoDelegatorToVoteFor]].value;\\n\\n            if(votesForSubscriber != 0) {\\n                daoDelegatorsListForUpcomingEpoch.removeNode(addressToId[daoDelegatorToVoteFor]);\\n            }\\n\\n            daoDelegatorsListForUpcomingEpoch.addNodeDecrement(votesForSubscriber.add(1), addressToId[daoDelegatorToVoteFor]);\\n        }\\n    }\\n\\n    function claimDaoDelegation()\\n    external\\n    checkCronjob()\\n    {\\n        require(votingStatusForDaoDelegators >= VotingStatusDelegators.CLAIM_DELEGATION, \\\"Claiming Dao Delegation is not open right now\\\");\\n        uint256 currentPosition = daoDelegatorsListForUpcomingEpoch.getPositionForId(addressToId[msg.sender]);\\n\\n        require(currentPosition > 0 && currentPosition <=\\n            amountOfEpochDaoDelegatorsNeededPerEpoch[currentEpoch.add(1)], \\\"Not eligible to become dao delegator\\\");\\n\\n        daoDelegatorsListForUpcomingEpoch.removeNode(addressToId[msg.sender]);\\n        amountOfEpochDaoDelegatorsNeededPerEpoch[currentEpoch.add(1)] =\\n            amountOfEpochDaoDelegatorsNeededPerEpoch[currentEpoch.add(1)].sub(1);\\n\\n        isEpochDaoDelegator[msg.sender][currentEpoch.add(1)] = true;\\n\\n        epochDaoDelegators[currentEpoch.add(1)].addNode(addressToId[msg.sender]);\\n    }\\n\\n    function claimDaoSubstituteDelegation()\\n    external\\n    checkCronjob()\\n    {\\n        require(amountOfSubstitutesRequested[currentEpoch] > 0, \\\"No substitutes requested\\\");\\n        uint256 currentPosition = daoSubstituteDelegatorsListForCurrentEpoch.getPositionForId(addressToId[msg.sender]);\\n\\n        require(currentPosition > 0 && currentPosition <=\\n            amountOfEpochDaoDelegatorsNeededPerEpoch[currentEpoch], \\\"Not eligible to become dao delegator substitute\\\");\\n\\n        amountOfSubstitutesRequested[currentEpoch] = amountOfSubstitutesRequested[currentEpoch].sub(1);\\n        epochDaoDelegators[currentEpoch].addNode(addressToId[msg.sender]);\\n        isEpochDaoDelegator[msg.sender][currentEpoch] = true;\\n\\n        addSubstituteToAllActiveRequests(addressToId[msg.sender], currentEpoch);\\n    }\\n\\n    function isDaoAssociated(address account, uint256 epoch)\\n    external\\n    view\\n    returns(bool, bool, uint256, uint256)\\n    {\\n        return (\\n            isEpochDaoMember[account][epoch],\\n            isEpochDaoDelegator[account][epoch],\\n            epochDaoMembers[epoch].getSize(),\\n            epochDaoDelegators[epoch].getSize()\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x492199a67530d2c6d8442c6bc7c5ccde1d1cf502f1f344c2bf3099ff83ee1c24\",\"license\":\"MIT\"},\"contracts/governance/GovernanceTypesAndStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../interfaces/IRegistry.sol\\\";\\nimport \\\"../interfaces/IStaking.sol\\\";\\nimport \\\"../libs/ValuedDoubleLinkedList.sol\\\";\\nimport \\\"../libs/DoubleLinkedList.sol\\\";\\n\\n/**\\n * @title AllianceBlock GovernanceStorage contract\\n * @notice Responsible for governance storage\\n */\\ncontract GovernanceTypesAndStorage {\\n    using ValuedDoubleLinkedList for ValuedDoubleLinkedList.LinkedList;\\n    using DoubleLinkedList for DoubleLinkedList.LinkedList;\\n\\n    enum VotingStatusMembers {\\n        EMPTY_STATE, // The state where stakers cannot even subscribe for dao membership.\\n        PRE_STATE, // The state where stakers can only subscribe for future dao membership.\\n        VOTING, // The state where stakers are voting for dao delegators and members.\\n        CLAIM_MEMBERSHIP, // The state where dao members are claiming their membership.\\n        LATE_MEMBERSHIP_CLAIMING // The state where unclaimed spots for dao membership are filled.\\n    }\\n\\n    enum VotingStatusDelegators {\\n        PRE_STATE, // The state where active dao members can only subscribe to become future dao delegators.\\n        VOTING, // The state where active dao members are voting for dao delegators.\\n        APPROVE_VOTING, // The state where dao members are approving the voting for dao delegators.\\n        CLAIM_DELEGATION, // The state where dao delegators are claiming their delegation privilages.\\n        LATE_DELEGATION_CLAIMING // The state where unclaimed spots for dao delegation are filled.\\n    }\\n\\n    struct ApprovalRequest {\\n        uint256 loanId; // The loan id for which approcal is requested.\\n        bool isMilestone; // true if approval reuested is connected to a milestone and false if not.\\n        uint256 milestoneNumber; // The milestone number if is Milestone based request.\\n        uint256 deadlineTimestamp; // The deadline timestamp to approve this request.\\n        uint256 approvalsProvided; // The number of approvals that this request has gathered.\\n        bool isApproved; // True if request is approved, false if not.\\n        uint256 epochSubmitted; // The epoch that the request was submitted.\\n    }\\n\\n    // EVENTS\\n    event VotedForRequest(uint indexed loanId, uint indexed requestId, bool decision, address indexed user);\\n    event ApprovalRequested(uint indexed loanId, bool indexed isMilestone, uint milestoneNumber, address indexed user);\\n    event InitGovernance(address indexed registryAddress_, address indexed stakingAddress_, address indexed user);\\n\\n    VotingStatusMembers public votingStatusForDaoMembers;\\n    VotingStatusDelegators public votingStatusForDaoDelegators;\\n\\n    mapping(address => mapping(uint256 => bool)) public isEpochDaoMember;\\n    mapping(address => mapping(uint256 => bool)) public isEpochDaoDelegator;\\n    mapping(address => mapping(uint256 => bool)) public hasVotedForRequestId;\\n    mapping(uint256 => mapping(uint256 => bool)) public bannedDelegator;\\n    mapping(uint256 => uint256) public amountOfEpochDaoMembersNeededPerEpoch;\\n    mapping(uint256 => uint256) public amountOfEpochDaoDelegatorsNeededPerEpoch;\\n\\n    mapping(address => bool) public subscribedForDaoMembership;\\n    mapping(address => bool) public subscribedForDaoDelegator;\\n\\n    mapping(uint256 => uint256) public rewardsForDaoMembersPerEpoch;\\n    mapping(uint256 => uint256) public rewardsForDaoDelegatorsPerEpoch;\\n\\n    ValuedDoubleLinkedList.LinkedList public daoSubstituteMembersListForCurrentEpoch;\\n    ValuedDoubleLinkedList.LinkedList public daoSubstituteDelegatorsListForCurrentEpoch;\\n    ValuedDoubleLinkedList.LinkedList public daoMembersListForUpcomingEpoch;\\n    ValuedDoubleLinkedList.LinkedList public daoDelegatorsListForUpcomingEpoch;\\n\\n    mapping(uint256 => DoubleLinkedList.LinkedList) public requestsPerEpoch;\\n    mapping(uint256 => DoubleLinkedList.LinkedList) public remainingDelegatorIdsToVotePerRequest;\\n    mapping(uint256 => DoubleLinkedList.LinkedList) public remainingMemberIdsToVoteForDelegator;\\n    mapping(uint256 => DoubleLinkedList.LinkedList) public remainingMemberIdsToVotePerRequest; // For governance changes requests - TODO\\n\\n    mapping(uint256 => DoubleLinkedList.LinkedList) public epochDaoMembers;\\n    mapping(uint256 => DoubleLinkedList.LinkedList) public epochDaoDelegators;\\n\\n    mapping(address => mapping(uint256 => bool)) public hasVotedForDaoMemberPerEpoch;\\n    mapping(address => mapping(uint256 => bool)) public hasVotedForDaoDelegatorPerEpoch;\\n    mapping(address => mapping(uint256 => bool)) public hasApprovedForDaoDelegatorPerEpoch;\\n\\n    mapping(address => mapping(uint256 => bytes32)) public votingHashOfDaoMembersPerEpoch;\\n\\n    mapping(address => uint256) public addressToId;\\n    mapping(uint256 => address) public idToAddress;\\n\\n    uint256 public totalApprovalRequests; // The total amount of approvals requested.\\n\\n    address public superDelegator;\\n\\n    mapping(uint256 => ApprovalRequest) public approvalRequests;\\n\\n    IRegistry public registry;\\n    IStaking public staking;\\n\\n    uint256 public totalIds;\\n    uint256 public currentEpoch;\\n\\n    mapping(uint256 => uint256) public amountOfSubstitutesRequested; // This is true when a delegator substitute request is active\\n\\n    mapping(bytes32 => uint256) public updatableVariables;\\n\\n    // CRONJOB types and variables\\n    enum CronjobType {\\n        DAO_APPROVAL, // Cronjob type for approvals on registry requests.\\n        DAO_VOTING_REQUEST, // Cronjob type for dao ecosystem change requests.\\n        DAO_MEMBERSHIP_VOTING, // Cronjob type for dao membership voting.\\n        DAO_DELEGATORS_VOTING, // Cronjob type for dao delegation voting.\\n        DAO_REWARDS_PROVISION, // Cronjob type for rewards provision in case there is a pending request and rewards after epoch change.\\n        DAO_SUBSTITUTES // Cronjob type for dao substitutes to enter till list is renewed (if not filled).\\n    }\\n\\n    struct Cronjob {\\n        CronjobType cronjobType; // This is the cronjob type.\\n        uint256 externalId; // This is the id of the request in case of dao approval or change voting request.\\n    }\\n\\n    // TODO - Make this simple linked list, not double (we don't need to remove anything else than head MAYBE).\\n    ValuedDoubleLinkedList.LinkedList public cronjobList;\\n    uint256 public totalCronjobs;\\n\\n    mapping(uint256 => Cronjob) public cronjobs; // cronjobId to Cronjob.\\n\\n    // MODIFIERS\\n\\n    modifier onlyRegistry() {\\n        require(msg.sender == address(registry), \\\"Only Registry contract\\\");\\n        _;\\n    }\\n\\n    modifier onlyDaoDelegatorNotVoted(uint256 requestId, uint256 epochSubmitted) {\\n        require(isEpochDaoDelegator[msg.sender][epochSubmitted], \\\"Only Dao Delegator for the epoch request was submitted\\\");\\n        require(!hasVotedForRequestId[msg.sender][requestId], \\\"Only if not voted yet\\\");\\n        _;\\n\\n        hasVotedForRequestId[msg.sender][requestId] = true;\\n    }\\n\\n    modifier onlyBeforeDeadline(uint256 requestId) {\\n        require(approvalRequests[requestId].deadlineTimestamp > block.timestamp,\\n            \\\"Only before deadline is reached\\\");\\n        _;\\n    }\\n\\n    modifier onlyAfterDeadlineAndNotApproved(uint256 requestId) {\\n        require(approvalRequests[requestId].deadlineTimestamp <= block.timestamp,\\n            \\\"Only after deadline is reached\\\");\\n        require(!approvalRequests[requestId].isApproved, \\\"Only if not already approved\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x9d90456dd90d1495ec8a28f93ab9c3d49c09a6daac8a5d050ac2b3b84e4d71f2\",\"license\":\"MIT\"},\"contracts/governance/SuperGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"./DaoCronjob.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title AllianceBlock Governance contract\\n * @notice Responsible for govern AllianceBlock's ecosystem\\n */\\ncontract SuperGovernance is OwnableUpgradeable, DaoCronjob {\\n    using SafeMath for uint256;\\n\\n    function setRegistryAndStaking(\\n        address registryAddress_,\\n        address stakingAddress_\\n    )\\n    external\\n    onlyOwner()\\n    {\\n        require(address(registry) == address(0), \\\"Cannot initialize second time\\\");\\n        registry = IRegistry(registryAddress_);\\n        staking = IStaking(stakingAddress_);\\n\\n        emit InitGovernance(registryAddress_, stakingAddress_, msg.sender);\\n    }\\n\\n    function superVoteForRequest(\\n        uint256 requestId,\\n        bool decision\\n    )\\n    external\\n    checkCronjob()\\n    {\\n        require(msg.sender == superDelegator, \\\"Only super delegator can call this function\\\");\\n        require(currentEpoch <= 1, \\\"Super delegating works only till first epoch\\\");\\n\\n        if(approvalRequests[requestId].isMilestone) {\\n            registry.decideForMilestone(approvalRequests[requestId].loanId, decision);\\n        } else {\\n            registry.decideForLoan(approvalRequests[requestId].loanId, decision);\\n        }\\n\\n        if(decision) {\\n            approvalRequests[requestId].approvalsProvided = approvalRequests[requestId].approvalsProvided.add(1);\\n            approvalRequests[requestId].isApproved = true;\\n        }\\n\\n        emit VotedForRequest(approvalRequests[requestId].loanId, requestId, decision, msg.sender);\\n    }\\n\\n    function openDaoMembershipSubscriptions()\\n    external\\n    onlyOwner()\\n    {\\n        votingStatusForDaoMembers = VotingStatusMembers.PRE_STATE;\\n    }\\n\\n    function openDaoMembershipVoting()\\n    external\\n    onlyOwner()\\n    {\\n        votingStatusForDaoMembers = VotingStatusMembers.VOTING;\\n    }\\n\\n    function openDaoDelegatingSubscriptions(\\n        uint256 amountOfDaoMembers_,\\n        uint256 daoClaimingDuration_,\\n        uint256 daoLateClaimingDuration_\\n    )\\n    external\\n    onlyOwner()\\n    {\\n        updatableVariables[keccak256(abi.encode(\\\"amountOfDaoMembers\\\"))] = amountOfDaoMembers_;\\n        updatableVariables[keccak256(abi.encode(\\\"daoClaimingDuration\\\"))] = daoClaimingDuration_;\\n        updatableVariables[keccak256(abi.encode(\\\"daoLateClaimingDuration\\\"))] = daoLateClaimingDuration_;\\n\\n        votingStatusForDaoMembers = VotingStatusMembers.CLAIM_MEMBERSHIP;\\n\\n        addCronjob(CronjobType.DAO_MEMBERSHIP_VOTING, block.timestamp.add(daoClaimingDuration_), 0);\\n\\n        amountOfEpochDaoMembersNeededPerEpoch[currentEpoch.add(1)] = amountOfDaoMembers_;\\n    }\\n\\n    function openDaoDelegatingVoting()\\n    external\\n    onlyOwner()\\n    {\\n        votingStatusForDaoDelegators = VotingStatusDelegators.VOTING;\\n    }\\n\\n    function openDaoDelegating(\\n        uint256 amountOfDaoDelegators_,\\n        uint256 daoMembershipVotingDuration_,\\n        uint256 daoDelegationVotingDuration_,\\n        uint256 daoDelegationApprovalDuration_,\\n        uint256 daoDelegationSubstituteClaimDuration_\\n    )\\n    external\\n    onlyOwner()\\n    {\\n        updatableVariables[keccak256(abi.encode(\\\"amountOfDaoDelegators\\\"))] = amountOfDaoDelegators_;\\n        updatableVariables[keccak256(abi.encode(\\\"daoMembershipVotingDuration\\\"))] = daoMembershipVotingDuration_;\\n        updatableVariables[keccak256(abi.encode(\\\"daoDelegationVotingDuration\\\"))] = daoDelegationVotingDuration_;\\n        updatableVariables[keccak256(abi.encode(\\\"daoDelegationApprovalDuration\\\"))] = daoDelegationApprovalDuration_;\\n        updatableVariables[keccak256(abi.encode(\\\"daoDelegationSubstituteClaimDuration\\\"))] = daoDelegationSubstituteClaimDuration_;\\n\\n        votingStatusForDaoDelegators = VotingStatusDelegators.APPROVE_VOTING;\\n\\n        addCronjob(CronjobType.DAO_DELEGATORS_VOTING, block.timestamp.add(daoDelegationApprovalDuration_), 0);\\n\\n        uint256 timestampToOpenDaoMembershipVoting =\\n            block.timestamp.add(daoDelegationApprovalDuration_).add(\\n            updatableVariables[keccak256(abi.encode(\\\"daoClaimingDuration\\\"))]).add(\\n            updatableVariables[keccak256(abi.encode(\\\"daoLateClaimingDuration\\\"))]);\\n\\n        addCronjob(CronjobType.DAO_MEMBERSHIP_VOTING, timestampToOpenDaoMembershipVoting, 0);\\n    }\\n}\\n\",\"keccak256\":\"0xe6f204605e7ede577040825d0dd95f8fbed6b80174483cceb0542905cc0c3deb\",\"license\":\"MIT\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the Registry contract.\\n */\\ninterface IRegistry {\\n    function decideForLoan(uint256 loanId, bool decision) external;\\n    function decideForMilestone(uint256 loanId, bool decision) external;\\n}\\n\",\"keccak256\":\"0x66415efb48e76720633eec36a3e5ec36710d135996661470838a71829cb7e331\",\"license\":\"MIT\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the Staking contract.\\n */\\ninterface IStaking {\\n    function getBalance(address staker_) external view returns (uint256);\\n\\tfunction provideStakingForDaoMembership(address staker) external;\\n\\tfunction provideStakingForDaoDelegator(address staker) external;\\n\\tfunction provideRewards(uint256 amountForDaoMembers, uint256 amountForDaoDelegators, uint256 epoch) external;\\n\\tfunction unstakeDao(address staker, bool isDaoMember) external;\\n\\tfunction getAmountsToStake() external view returns (uint256, uint256, uint256);\\n}\\n\",\"keccak256\":\"0xcaa6af91c26a88f730c713247abef08099ff154136846fc3c77d460f0283a345\",\"license\":\"MIT\"},\"contracts/libs/DoubleLinkedList.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\nlibrary DoubleLinkedList {\\n    struct Node {\\n        uint256 next;\\n        uint256 previous;\\n    }\\n\\n    struct LinkedList {\\n        uint256 head;\\n        uint256 tail;\\n        uint256 size;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    function getHeadId(LinkedList storage self) internal view returns (uint256) {\\n        return self.head;\\n    }\\n\\n    function getSize(LinkedList storage self) internal view returns (uint256) {\\n        return self.size;\\n    }\\n\\n    function addNode(\\n        LinkedList storage self,\\n        uint256 id\\n    ) internal {\\n        //If empty\\n        if (self.head == 0) {\\n            self.head = id;\\n            self.tail = id;\\n            self.nodes[id] = Node(0, 0);\\n        }\\n        //Else push in tail\\n        else {\\n            self.nodes[self.tail].next = id;\\n            self.nodes[id] = Node(0, self.tail);\\n            self.tail = id;\\n        }\\n\\n        self.size += 1;\\n    }\\n\\n    function removeNode(LinkedList storage self, uint256 id) internal {\\n        if(self.size == 1) {\\n            self.head = 0;\\n            self.tail = 0;\\n        }\\n        else if (id == self.head) {\\n            self.head = self.nodes[self.head].next;\\n            self.nodes[self.head].previous = 0;\\n        }\\n        else if (id == self.tail) {\\n            self.tail = self.nodes[self.tail].previous;\\n            self.nodes[self.tail].next = 0;\\n        }\\n        else {\\n            self.nodes[self.nodes[id].next].previous = self.nodes[id].previous;\\n            self.nodes[self.nodes[id].previous].next = self.nodes[id].next;\\n        }       \\n\\n        self.size -= 1;\\n    }\\n\\n    function popHead(LinkedList storage self) internal returns(uint256 head) {\\n        head = self.head;\\n\\n        if(self.size == 1) {\\n            self.head = 0;\\n            self.tail = 0;\\n        }\\n        else {\\n            self.head = self.nodes[self.head].next;\\n            self.nodes[self.head].previous = 0;\\n        }      \\n\\n        self.size -= 1;\\n    }\\n\\n    function getIndexedId(LinkedList storage self, uint256 index) internal returns(uint256 id) {\\n        id = self.head;\\n\\n        for (uint256 i = 1; i < index; i++) {\\n            id = self.nodes[id].next;\\n        }\\n    }\\n\\n    function cloneList(LinkedList storage self, LinkedList storage listToClone) internal {\\n        self.head = listToClone.head;\\n        self.tail = listToClone.tail;\\n        self.size = listToClone.size;\\n\\n        uint256 id = listToClone.head;\\n\\n        for (uint256 i = 0; i < listToClone.size; i++) {\\n            self.nodes[id] = listToClone.nodes[id];\\n            id = listToClone.nodes[id].next;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ee74dade7ebcc2e6ab7aea8629994f224784e1f8bf892a297aaf8aa09dee779\"},\"contracts/libs/ValuedDoubleLinkedList.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\nlibrary ValuedDoubleLinkedList {\\n    struct Node {\\n        uint256 next;\\n        uint256 previous;\\n        uint256 value;\\n    }\\n\\n    struct LinkedList {\\n        uint256 head;\\n        uint256 tail;\\n        uint256 size;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    function getHeadId(LinkedList storage self) internal view returns (uint256) {\\n        return self.head;\\n    }\\n\\n    function getHeadValue(LinkedList storage self) internal view returns (uint256) {\\n        return self.nodes[self.head].value;\\n    }\\n\\n    function getSize(LinkedList storage self) internal view returns (uint256) {\\n        return self.size;\\n    }\\n\\n    function addNodeIncrement(\\n        LinkedList storage self,\\n        uint256 value,\\n        uint256 id\\n    ) internal {\\n        Node memory node = self.nodes[self.head];\\n\\n        //If empty\\n        if (self.head == 0) {\\n            self.head = id;\\n            self.tail = id;\\n            self.nodes[id] = Node(0, 0, value);\\n        }\\n        //If head\\n        else if (value < node.value) {\\n            self.nodes[self.head].previous = id;\\n            self.nodes[id] = Node(self.head, 0, value);\\n            self.head = id;\\n        }\\n        else {\\n            //If middle\\n            if(self.size > 1) {\\n                for (uint256 i = 1; i < self.size; i++) {\\n                    node = self.nodes[node.next];\\n                    if (value < node.value) {\\n                        uint256 currentId = self.nodes[node.next].previous;\\n                        self.nodes[node.next].previous = id;\\n                        self.nodes[id] = Node(\\n                            currentId,\\n                            self.nodes[currentId].next,\\n                            value\\n                        );\\n                        self.nodes[currentId].next = id;\\n                        break;\\n                    }\\n                }\\n            }\\n            //If tail\\n            if (self.nodes[id].value != value) {\\n                self.nodes[id] = Node(0, self.tail, value);\\n                self.nodes[self.tail].next = id;\\n                self.tail = id;\\n            }\\n        }\\n\\n        self.size += 1;\\n    }\\n\\n    function addNodeDecrement(\\n        LinkedList storage self,\\n        uint256 value,\\n        uint256 id\\n    ) internal {\\n        Node memory node = self.nodes[self.head];\\n\\n        //If empty\\n        if (self.head == 0) {\\n            self.head = id;\\n            self.tail = id;\\n            self.nodes[id] = Node(0, 0, value);\\n        }\\n        //If head\\n        else if (value > node.value) {\\n            self.nodes[self.head].previous = id;\\n            self.nodes[id] = Node(self.head, 0, value);\\n            self.head = id;\\n        }\\n        else {\\n            //If middle\\n            if (self.size > 1) {\\n                for (uint256 i = 1; i < self.size; i++) {\\n                    node = self.nodes[node.next];\\n                    if (value > node.value) {\\n                        uint256 currentId = self.nodes[node.next].previous;\\n                        self.nodes[node.next].previous = id;\\n                        self.nodes[id] = Node(\\n                            currentId,\\n                            self.nodes[currentId].next,\\n                            value\\n                        );\\n                        self.nodes[currentId].next = id;\\n                        break;\\n                    }\\n                }\\n            }\\n            //If tail\\n            if (self.nodes[id].value != value) {\\n                self.nodes[id] = Node(0, self.tail, value);\\n                self.nodes[self.tail].next = id;\\n                self.tail = id;\\n            }\\n        }\\n\\n        self.size += 1;\\n    }\\n\\n    function removeNode(LinkedList storage self, uint256 id) internal {\\n        if (self.size == 1) {\\n            self.head = 0;\\n            self.tail = 0;\\n        }\\n        else if (id == self.head) {\\n            self.head = self.nodes[self.head].next;\\n            self.nodes[self.head].previous = 0;\\n        }\\n        else if (id == self.tail) {\\n            self.tail = self.nodes[self.tail].previous;\\n            self.nodes[self.tail].next = 0;\\n        }\\n        else {\\n            self.nodes[self.nodes[id].next].previous = self.nodes[id].previous;\\n            self.nodes[self.nodes[id].previous].next = self.nodes[id].next;\\n        }       \\n\\n        self.size -= 1;\\n    }\\n\\n    function popHead(LinkedList storage self) internal returns(uint256 head) {\\n        head = self.head;\\n\\n        if(self.size == 1) {\\n            self.head = 0;\\n            self.tail = 0;\\n        }\\n        else {\\n            self.head = self.nodes[self.head].next;\\n            self.nodes[self.head].previous = 0;\\n        }      \\n\\n        self.size -= 1;\\n    }\\n\\n    function popHeadAndValue(LinkedList storage self) internal returns(uint256 head, uint256 value) {\\n        head = self.head;\\n        value = self.nodes[self.head].value;\\n\\n        if(self.size == 1) {\\n            self.head = 0;\\n            self.tail = 0;\\n        }\\n        else {\\n            self.head = self.nodes[self.head].next;\\n            self.nodes[self.head].previous = 0;\\n        }      \\n\\n        self.size -= 1;\\n    }\\n\\n    function removeMultipleFromHead(LinkedList storage self, uint256 amountOfNodes) internal {\\n        for (uint256 i = 0; i < amountOfNodes; i++) {\\n            uint256 head = self.head;\\n\\n            if(self.size == 1) {\\n                self.head = 0;\\n                self.tail = 0;\\n            }\\n            else {\\n                self.head = self.nodes[self.head].next;\\n                self.nodes[self.head].previous = 0;\\n            }      \\n\\n            self.size -= 1;\\n        }\\n    }\\n\\n    function getPositionForId(LinkedList storage self, uint256 id) internal view returns(uint256) {\\n        uint256 positionCounter;\\n\\n        if (self.nodes[id].value == 0) return 0; // If not in list.\\n\\n        while (true) {\\n            positionCounter += 1;\\n            if (id == self.head) break;\\n\\n            id = self.nodes[id].previous;\\n        }\\n\\n        return positionCounter;\\n    }\\n\\n    function cloneList(LinkedList storage self, LinkedList storage listToClone) internal {\\n        self.head = listToClone.head;\\n        self.tail = listToClone.tail;\\n        self.size = listToClone.size;\\n\\n        uint256 id = listToClone.head;\\n\\n        for (uint256 i = 0; i < listToClone.size; i++) {\\n            self.nodes[id] = listToClone.nodes[id];\\n            id = listToClone.nodes[id].next;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd834e59ed79beebc0a043baf85bff08775d94edfe11a5a635538822be8dee9e3\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getDaoData()": {
        "details": "Helper function for querying Governance variables",
        "returns": {
          "_0": "internal Governance uint variables"
        }
      },
      "initialize(address,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Initialize the contract."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "AllianceBlock Governance contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Responsible for governing AllianceBlock's ecosystem",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 890,
        "contract": "contracts/Governance.sol:Governance",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 893,
        "contract": "contracts/Governance.sol:Governance",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3750,
        "contract": "contracts/Governance.sol:Governance",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/Governance.sol:Governance",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 440,
        "contract": "contracts/Governance.sol:Governance",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11564,
        "contract": "contracts/Governance.sol:Governance",
        "label": "votingStatusForDaoMembers",
        "offset": 0,
        "slot": "101",
        "type": "t_enum(VotingStatusMembers)11513"
      },
      {
        "astId": 11566,
        "contract": "contracts/Governance.sol:Governance",
        "label": "votingStatusForDaoDelegators",
        "offset": 1,
        "slot": "101",
        "type": "t_enum(VotingStatusDelegators)11519"
      },
      {
        "astId": 11572,
        "contract": "contracts/Governance.sol:Governance",
        "label": "isEpochDaoMember",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 11578,
        "contract": "contracts/Governance.sol:Governance",
        "label": "isEpochDaoDelegator",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 11584,
        "contract": "contracts/Governance.sol:Governance",
        "label": "hasVotedForRequestId",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 11590,
        "contract": "contracts/Governance.sol:Governance",
        "label": "bannedDelegator",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 11594,
        "contract": "contracts/Governance.sol:Governance",
        "label": "amountOfEpochDaoMembersNeededPerEpoch",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 11598,
        "contract": "contracts/Governance.sol:Governance",
        "label": "amountOfEpochDaoDelegatorsNeededPerEpoch",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 11602,
        "contract": "contracts/Governance.sol:Governance",
        "label": "subscribedForDaoMembership",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11606,
        "contract": "contracts/Governance.sol:Governance",
        "label": "subscribedForDaoDelegator",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11610,
        "contract": "contracts/Governance.sol:Governance",
        "label": "rewardsForDaoMembersPerEpoch",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 11614,
        "contract": "contracts/Governance.sol:Governance",
        "label": "rewardsForDaoDelegatorsPerEpoch",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 11616,
        "contract": "contracts/Governance.sol:Governance",
        "label": "daoSubstituteMembersListForCurrentEpoch",
        "offset": 0,
        "slot": "112",
        "type": "t_struct(LinkedList)12973_storage"
      },
      {
        "astId": 11618,
        "contract": "contracts/Governance.sol:Governance",
        "label": "daoSubstituteDelegatorsListForCurrentEpoch",
        "offset": 0,
        "slot": "116",
        "type": "t_struct(LinkedList)12973_storage"
      },
      {
        "astId": 11620,
        "contract": "contracts/Governance.sol:Governance",
        "label": "daoMembersListForUpcomingEpoch",
        "offset": 0,
        "slot": "120",
        "type": "t_struct(LinkedList)12973_storage"
      },
      {
        "astId": 11622,
        "contract": "contracts/Governance.sol:Governance",
        "label": "daoDelegatorsListForUpcomingEpoch",
        "offset": 0,
        "slot": "124",
        "type": "t_struct(LinkedList)12973_storage"
      },
      {
        "astId": 11626,
        "contract": "contracts/Governance.sol:Governance",
        "label": "requestsPerEpoch",
        "offset": 0,
        "slot": "128",
        "type": "t_mapping(t_uint256,t_struct(LinkedList)12432_storage)"
      },
      {
        "astId": 11630,
        "contract": "contracts/Governance.sol:Governance",
        "label": "remainingDelegatorIdsToVotePerRequest",
        "offset": 0,
        "slot": "129",
        "type": "t_mapping(t_uint256,t_struct(LinkedList)12432_storage)"
      },
      {
        "astId": 11634,
        "contract": "contracts/Governance.sol:Governance",
        "label": "remainingMemberIdsToVoteForDelegator",
        "offset": 0,
        "slot": "130",
        "type": "t_mapping(t_uint256,t_struct(LinkedList)12432_storage)"
      },
      {
        "astId": 11638,
        "contract": "contracts/Governance.sol:Governance",
        "label": "remainingMemberIdsToVotePerRequest",
        "offset": 0,
        "slot": "131",
        "type": "t_mapping(t_uint256,t_struct(LinkedList)12432_storage)"
      },
      {
        "astId": 11642,
        "contract": "contracts/Governance.sol:Governance",
        "label": "epochDaoMembers",
        "offset": 0,
        "slot": "132",
        "type": "t_mapping(t_uint256,t_struct(LinkedList)12432_storage)"
      },
      {
        "astId": 11646,
        "contract": "contracts/Governance.sol:Governance",
        "label": "epochDaoDelegators",
        "offset": 0,
        "slot": "133",
        "type": "t_mapping(t_uint256,t_struct(LinkedList)12432_storage)"
      },
      {
        "astId": 11652,
        "contract": "contracts/Governance.sol:Governance",
        "label": "hasVotedForDaoMemberPerEpoch",
        "offset": 0,
        "slot": "134",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 11658,
        "contract": "contracts/Governance.sol:Governance",
        "label": "hasVotedForDaoDelegatorPerEpoch",
        "offset": 0,
        "slot": "135",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 11664,
        "contract": "contracts/Governance.sol:Governance",
        "label": "hasApprovedForDaoDelegatorPerEpoch",
        "offset": 0,
        "slot": "136",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 11670,
        "contract": "contracts/Governance.sol:Governance",
        "label": "votingHashOfDaoMembersPerEpoch",
        "offset": 0,
        "slot": "137",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bytes32))"
      },
      {
        "astId": 11674,
        "contract": "contracts/Governance.sol:Governance",
        "label": "addressToId",
        "offset": 0,
        "slot": "138",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11678,
        "contract": "contracts/Governance.sol:Governance",
        "label": "idToAddress",
        "offset": 0,
        "slot": "139",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11680,
        "contract": "contracts/Governance.sol:Governance",
        "label": "totalApprovalRequests",
        "offset": 0,
        "slot": "140",
        "type": "t_uint256"
      },
      {
        "astId": 11682,
        "contract": "contracts/Governance.sol:Governance",
        "label": "superDelegator",
        "offset": 0,
        "slot": "141",
        "type": "t_address"
      },
      {
        "astId": 11686,
        "contract": "contracts/Governance.sol:Governance",
        "label": "approvalRequests",
        "offset": 0,
        "slot": "142",
        "type": "t_mapping(t_uint256,t_struct(ApprovalRequest)11534_storage)"
      },
      {
        "astId": 11688,
        "contract": "contracts/Governance.sol:Governance",
        "label": "registry",
        "offset": 0,
        "slot": "143",
        "type": "t_contract(IRegistry)12368"
      },
      {
        "astId": 11690,
        "contract": "contracts/Governance.sol:Governance",
        "label": "staking",
        "offset": 0,
        "slot": "144",
        "type": "t_contract(IStaking)12414"
      },
      {
        "astId": 11692,
        "contract": "contracts/Governance.sol:Governance",
        "label": "totalIds",
        "offset": 0,
        "slot": "145",
        "type": "t_uint256"
      },
      {
        "astId": 11694,
        "contract": "contracts/Governance.sol:Governance",
        "label": "currentEpoch",
        "offset": 0,
        "slot": "146",
        "type": "t_uint256"
      },
      {
        "astId": 11698,
        "contract": "contracts/Governance.sol:Governance",
        "label": "amountOfSubstitutesRequested",
        "offset": 0,
        "slot": "147",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 11702,
        "contract": "contracts/Governance.sol:Governance",
        "label": "updatableVariables",
        "offset": 0,
        "slot": "148",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 11716,
        "contract": "contracts/Governance.sol:Governance",
        "label": "cronjobList",
        "offset": 0,
        "slot": "149",
        "type": "t_struct(LinkedList)12973_storage"
      },
      {
        "astId": 11718,
        "contract": "contracts/Governance.sol:Governance",
        "label": "totalCronjobs",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 11722,
        "contract": "contracts/Governance.sol:Governance",
        "label": "cronjobs",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_uint256,t_struct(Cronjob)11714_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IRegistry)12368": {
        "encoding": "inplace",
        "label": "contract IRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IStaking)12414": {
        "encoding": "inplace",
        "label": "contract IStaking",
        "numberOfBytes": "20"
      },
      "t_enum(CronjobType)11709": {
        "encoding": "inplace",
        "label": "enum GovernanceTypesAndStorage.CronjobType",
        "numberOfBytes": "1"
      },
      "t_enum(VotingStatusDelegators)11519": {
        "encoding": "inplace",
        "label": "enum GovernanceTypesAndStorage.VotingStatusDelegators",
        "numberOfBytes": "1"
      },
      "t_enum(VotingStatusMembers)11513": {
        "encoding": "inplace",
        "label": "enum GovernanceTypesAndStorage.VotingStatusMembers",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bytes32)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(ApprovalRequest)11534_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GovernanceTypesAndStorage.ApprovalRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(ApprovalRequest)11534_storage"
      },
      "t_mapping(t_uint256,t_struct(Cronjob)11714_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GovernanceTypesAndStorage.Cronjob)",
        "numberOfBytes": "32",
        "value": "t_struct(Cronjob)11714_storage"
      },
      "t_mapping(t_uint256,t_struct(LinkedList)12432_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DoubleLinkedList.LinkedList)",
        "numberOfBytes": "32",
        "value": "t_struct(LinkedList)12432_storage"
      },
      "t_mapping(t_uint256,t_struct(Node)12421_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DoubleLinkedList.Node)",
        "numberOfBytes": "32",
        "value": "t_struct(Node)12421_storage"
      },
      "t_mapping(t_uint256,t_struct(Node)12962_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ValuedDoubleLinkedList.Node)",
        "numberOfBytes": "32",
        "value": "t_struct(Node)12962_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(ApprovalRequest)11534_storage": {
        "encoding": "inplace",
        "label": "struct GovernanceTypesAndStorage.ApprovalRequest",
        "members": [
          {
            "astId": 11521,
            "contract": "contracts/Governance.sol:Governance",
            "label": "loanId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11523,
            "contract": "contracts/Governance.sol:Governance",
            "label": "isMilestone",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 11525,
            "contract": "contracts/Governance.sol:Governance",
            "label": "milestoneNumber",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11527,
            "contract": "contracts/Governance.sol:Governance",
            "label": "deadlineTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11529,
            "contract": "contracts/Governance.sol:Governance",
            "label": "approvalsProvided",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 11531,
            "contract": "contracts/Governance.sol:Governance",
            "label": "isApproved",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 11533,
            "contract": "contracts/Governance.sol:Governance",
            "label": "epochSubmitted",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Cronjob)11714_storage": {
        "encoding": "inplace",
        "label": "struct GovernanceTypesAndStorage.Cronjob",
        "members": [
          {
            "astId": 11711,
            "contract": "contracts/Governance.sol:Governance",
            "label": "cronjobType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(CronjobType)11709"
          },
          {
            "astId": 11713,
            "contract": "contracts/Governance.sol:Governance",
            "label": "externalId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LinkedList)12432_storage": {
        "encoding": "inplace",
        "label": "struct DoubleLinkedList.LinkedList",
        "members": [
          {
            "astId": 12423,
            "contract": "contracts/Governance.sol:Governance",
            "label": "head",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12425,
            "contract": "contracts/Governance.sol:Governance",
            "label": "tail",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12427,
            "contract": "contracts/Governance.sol:Governance",
            "label": "size",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12431,
            "contract": "contracts/Governance.sol:Governance",
            "label": "nodes",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_struct(Node)12421_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(LinkedList)12973_storage": {
        "encoding": "inplace",
        "label": "struct ValuedDoubleLinkedList.LinkedList",
        "members": [
          {
            "astId": 12964,
            "contract": "contracts/Governance.sol:Governance",
            "label": "head",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12966,
            "contract": "contracts/Governance.sol:Governance",
            "label": "tail",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12968,
            "contract": "contracts/Governance.sol:Governance",
            "label": "size",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12972,
            "contract": "contracts/Governance.sol:Governance",
            "label": "nodes",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_struct(Node)12962_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Node)12421_storage": {
        "encoding": "inplace",
        "label": "struct DoubleLinkedList.Node",
        "members": [
          {
            "astId": 12418,
            "contract": "contracts/Governance.sol:Governance",
            "label": "next",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12420,
            "contract": "contracts/Governance.sol:Governance",
            "label": "previous",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Node)12962_storage": {
        "encoding": "inplace",
        "label": "struct ValuedDoubleLinkedList.Node",
        "members": [
          {
            "astId": 12957,
            "contract": "contracts/Governance.sol:Governance",
            "label": "next",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12959,
            "contract": "contracts/Governance.sol:Governance",
            "label": "previous",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12961,
            "contract": "contracts/Governance.sol:Governance",
            "label": "value",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}