{
  "address": "0x054db9EfbaFAe8bb75AD817417DF67cfD6b8A116",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "investmentId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ConvertInvestmentTickets",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOfNFTToConvert",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOfInvestmentTokenToTransfer",
          "type": "uint256"
        }
      ],
      "name": "ConvertNFTToInvestmentTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "investmentId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOfNfts",
          "type": "uint256"
        }
      ],
      "name": "LockInvestmentNfts",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "LotteryExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountToReturnForNonWonTickets",
          "type": "uint256"
        }
      ],
      "name": "LotteryLoserClaimedFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "ProjectApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProjectInterest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "ProjectRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ProjectRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "ProjectSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "ProjectStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketsToWithdraw",
          "type": "uint256"
        }
      ],
      "name": "WithdrawLockedInvestmentNfts",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountWithdrawn",
          "type": "uint256"
        }
      ],
      "name": "seekerWithdrawInvestment",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "__BaseProject_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lendingToken_",
          "type": "address"
        }
      ],
      "name": "addLendingToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "addressOfLotteryNumber",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseAmountForEachPartition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blocksLockedForReputation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "convertInvestmentTicketsToNfts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOfNFTToConvert",
          "type": "uint256"
        }
      ],
      "name": "convertNFTToInvestmentTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "decision",
          "type": "bool"
        }
      ],
      "name": "decideForProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrow",
      "outputs": [
        {
          "internalType": "contract IEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "executeLotteryRun",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundingNFT",
      "outputs": [
        {
          "internalType": "contract IERC1155Mint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "getInvestmentMetadata",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "investmentId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "approvalDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startingDate",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "investmentToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "investmentTokensAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "lendingToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAmountToBeRaised",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalPartitionsToBePurchased",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "extraInfo",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "partitionsRequested",
              "type": "uint256"
            }
          ],
          "internalType": "struct ProjectLibrary.InvestmentDetails",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "enum ProjectLibrary.ProjectStatus",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "getRequestingInterestStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "contract IGovernance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "escrowAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "governanceAddress_",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "lendingTokens_",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "fundingNFT_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "projectManager_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseAmountForEachPartition_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reputationalAlbt",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalTicketsPerRun_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rAlbtPerLotteryNumber_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blocksLockedForReputation_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lotteryNumbersForImmediateTicket_",
          "type": "uint256"
        }
      ],
      "name": "initializeInvestment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "investmentDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "investmentId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "approvalDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startingDate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "investmentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "investmentTokensAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lendingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountToBeRaised",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPartitionsToBePurchased",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "extraInfo",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "partitionsRequested",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "investmentTokensPerTicket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "investmentWithdrawn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isValidLendingToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "isValidReferralId",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastBlockCheckedForLockedNftsPerAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nftsToLock",
          "type": "uint256"
        }
      ],
      "name": "lockInvestmentNfts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockedNftsForSpecificInvestmentPerAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockedNftsPerAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryNumbersForImmediateTicket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectManager",
      "outputs": [
        {
          "internalType": "contract IProjectManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projectSeeker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "projectStatus",
      "outputs": [
        {
          "internalType": "enum ProjectLibrary.ProjectStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rALBT",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rAlbtPerLotteryNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "remainingTicketsPerAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "investmentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOfInvestmentTokens",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "lendingToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountRequested_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "extraInfo",
          "type": "string"
        }
      ],
      "name": "requestInvestment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "escrowAddress_",
          "type": "address"
        }
      ],
      "name": "setEscrowAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOfPartitions",
          "type": "uint256"
        }
      ],
      "name": "showInterestForInvestment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "startLotteryPhase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ticketsRemaining",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ticketsWonPerAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalLotteryNumbersPerInvestment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalProjects",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTicketsPerRun",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "withdrawAmountProvidedForNonWonTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "withdrawInvestment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nftsToWithdraw",
          "type": "uint256"
        }
      ],
      "name": "withdrawLockedInvestmentNfts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x90cdea53feb158b6b5c395497c95600174742a4505f73a4288e53af6ef6bb67d",
  "receipt": {
    "to": null,
    "from": "0x4C7B849e8F7c970744b4741BE35541E20990392d",
    "contractAddress": "0x054db9EfbaFAe8bb75AD817417DF67cfD6b8A116",
    "transactionIndex": 11,
    "gasUsed": "3829845",
    "logsBloom": "0x
    "blockHash": "0x37cc418eede3dcafaa5c393f12c20a45b92a691b3d040b7b816904e6ee3933fa",
    "transactionHash": "0x90cdea53feb158b6b5c395497c95600174742a4505f73a4288e53af6ef6bb67d",
    "logs": [],
    "blockNumber": 9132938,
    "cumulativeGasUsed": "5335219",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "2655e296375c08ec2ee94c1a605dd52e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"investmentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ConvertInvestmentTickets\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfNFTToConvert\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfInvestmentTokenToTransfer\",\"type\":\"uint256\"}],\"name\":\"ConvertNFTToInvestmentTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"investmentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOfNfts\",\"type\":\"uint256\"}],\"name\":\"LockInvestmentNfts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"LotteryExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToReturnForNonWonTickets\",\"type\":\"uint256\"}],\"name\":\"LotteryLoserClaimedFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"ProjectApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProjectInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"ProjectRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProjectRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"ProjectSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"ProjectStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketsToWithdraw\",\"type\":\"uint256\"}],\"name\":\"WithdrawLockedInvestmentNfts\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"name\":\"seekerWithdrawInvestment\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"__BaseProject_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lendingToken_\",\"type\":\"address\"}],\"name\":\"addLendingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressOfLotteryNumber\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseAmountForEachPartition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksLockedForReputation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"convertInvestmentTicketsToNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfNFTToConvert\",\"type\":\"uint256\"}],\"name\":\"convertNFTToInvestmentTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"decision\",\"type\":\"bool\"}],\"name\":\"decideForProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"internalType\":\"contract IEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"executeLotteryRun\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundingNFT\",\"outputs\":[{\"internalType\":\"contract IERC1155Mint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"getInvestmentMetadata\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"investmentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approvalDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"investmentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"investmentTokensAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lendingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountToBeRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPartitionsToBePurchased\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"extraInfo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"partitionsRequested\",\"type\":\"uint256\"}],\"internalType\":\"struct ProjectLibrary.InvestmentDetails\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"enum ProjectLibrary.ProjectStatus\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"getRequestingInterestStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"contract IGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"escrowAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governanceAddress_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"lendingTokens_\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"fundingNFT_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"projectManager_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseAmountForEachPartition_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reputationalAlbt\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalTicketsPerRun_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rAlbtPerLotteryNumber_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocksLockedForReputation_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lotteryNumbersForImmediateTicket_\",\"type\":\"uint256\"}],\"name\":\"initializeInvestment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investmentDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"investmentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approvalDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startingDate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"investmentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"investmentTokensAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lendingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountToBeRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPartitionsToBePurchased\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"extraInfo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"partitionsRequested\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investmentTokensPerTicket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"investmentWithdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isValidLendingToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"isValidReferralId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBlockCheckedForLockedNftsPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftsToLock\",\"type\":\"uint256\"}],\"name\":\"lockInvestmentNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedNftsForSpecificInvestmentPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedNftsPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryNumbersForImmediateTicket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectManager\",\"outputs\":[{\"internalType\":\"contract IProjectManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectSeeker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"projectStatus\",\"outputs\":[{\"internalType\":\"enum ProjectLibrary.ProjectStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rALBT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rAlbtPerLotteryNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"remainingTicketsPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investmentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOfInvestmentTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lendingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountRequested_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"extraInfo\",\"type\":\"string\"}],\"name\":\"requestInvestment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"escrowAddress_\",\"type\":\"address\"}],\"name\":\"setEscrowAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOfPartitions\",\"type\":\"uint256\"}],\"name\":\"showInterestForInvestment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"startLotteryPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketsRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ticketsWonPerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalLotteryNumbersPerInvestment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalProjects\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTicketsPerRun\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"withdrawAmountProvidedForNonWonTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"withdrawInvestment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftsToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdrawLockedInvestmentNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLendingToken(address)\":{\"details\":\"This function is called by the owner to add another lending token.\",\"params\":{\"lendingToken_\":\"The address of lending token that will be added.\"}},\"convertInvestmentTicketsToNfts(uint256)\":{\"details\":\"This function is called by an investor to convert his tickets won to NFTs.require Settled state and enough tickets won\",\"params\":{\"projectId\":\"The id of the investment.\"}},\"convertNFTToInvestmentTokens(uint256,uint256)\":{\"params\":{\"amountOfNFTToConvert\":\"the amount of nft to convert\",\"projectId\":\"the projectId\"}},\"decideForProject(uint256,bool)\":{\"details\":\"This function is called by governance to approve or reject a investment request.\",\"params\":{\"decision\":\"The decision of the governance. [true -> approved] [false -> rejected]\",\"projectId\":\"The id of the investment.\"}},\"executeLotteryRun(uint256)\":{\"details\":\"This function is called by any investor interested in an Investment Token to run part of the lottery.requires Started state and available tickets\",\"params\":{\"projectId\":\"The id of the investment.\"}},\"getInvestmentMetadata(uint256)\":{\"details\":\"This helper function provides a single point for querying the Investment metadatareturns Investment Details, Investment Status, Investment Seeker Address and Repayment Batch Type\",\"params\":{\"projectId\":\"The id of the investment.\"}},\"getRequestingInterestStatus(uint256)\":{\"details\":\"Returns true if investors have shown interest for equal or more than the total tickets.\",\"params\":{\"projectId\":\"The id of the investment type to be checked.\"}},\"initialize(address,address,address[],address,address,uint256)\":{\"details\":\"Constructor of the contract.\",\"params\":{\"baseAmountForEachPartition_\":\"The base amount for each partition\",\"escrowAddress\":\"address of the escrow contract\",\"fundingNFT_\":\"address of the Funding NFT\",\"governanceAddress_\":\"address of the DAO contract\",\"lendingTokens_\":\"addresses of the Lending Tokens\"}},\"initializeInvestment(address,uint256,uint256,uint256,uint256)\":{\"details\":\"This function is called by the owner to initialize the investment type.\",\"params\":{\"blocksLockedForReputation_\":\"The amount of blocks needed for a ticket to be locked,        so as investor to get 1 rALBT for locking it.\",\"rAlbtPerLotteryNumber_\":\"The amount of rALBT needed to allocate one lucky number.\",\"reputationalAlbt\":\"The address of the rALBT contract.\",\"totalTicketsPerRun_\":\"The amount of tickets that will be provided from each run of the lottery.\"}},\"isValidReferralId(uint256)\":{\"details\":\"returns true if investment id exists (so also seeker exists), otherwise returns false\",\"params\":{\"projectId\":\"The id of the investment.\"}},\"lockInvestmentNfts(uint256,uint256)\":{\"details\":\"This function is called by a investment nft holder to lock part of his nfts.\",\"params\":{\"nftsToLock\":\"The amount of nfts to lock.\",\"projectId\":\"The id of the investment.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requestInvestment(address,uint256,address,uint256,string)\":{\"details\":\"This function is used for seekers to request investment in exchange for investment tokens.require valid amount\",\"params\":{\"amountOfInvestmentTokens\":\"The amount of investment tokens to be purchased.\",\"extraInfo\":\"The ipfs hash where more specific details for investment request are stored.\",\"investmentToken\":\"The token that will be purchased by investors.\",\"lendingToken\":\"The token that investors will pay with.\",\"totalAmountRequested_\":\"The total amount requested so as all investment tokens to be sold.\"}},\"setEscrowAddress(address)\":{\"details\":\"This function is called by the owner to update the escrow address\",\"params\":{\"escrowAddress_\":\"The address of escrow that will be updated.\"}},\"showInterestForInvestment(uint256,uint256)\":{\"details\":\"This function is called by the investors who are interested to invest in a specific investment token.require Approval state and valid partition\",\"params\":{\"amountOfPartitions\":\"The amount of partitions this specific investor wanna invest in.\",\"projectId\":\"The id of the investment.\"}},\"startLotteryPhase(uint256)\":{\"details\":\"This function is called by governance to start the lottery phase for an investment.\",\"params\":{\"projectId\":\"The id of the investment.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawAmountProvidedForNonWonTickets(uint256)\":{\"details\":\"This function is called by an investor to withdraw lending tokens provided for non-won tickets.\",\"params\":{\"projectId\":\"The id of the investment.\"}},\"withdrawInvestment(uint256)\":{\"details\":\"This function is called by the seeker to withdraw the lending tokens provided by investors after lottery ends.\",\"params\":{\"projectId\":\"The id of the investment.\"}},\"withdrawLockedInvestmentNfts(uint256,uint256)\":{\"details\":\"This function is called by an investor to withdraw his locked tickets.requires Settled state and available tickets.\",\"params\":{\"nftsToWithdraw\":\"The amount of locked tickets to be withdrawn.\",\"projectId\":\"The id of the investment.\"}}},\"title\":\"TEST contract to simulate new type of project.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLendingToken(address)\":{\"notice\":\"Add lending token\"},\"convertInvestmentTicketsToNfts(uint256)\":{\"notice\":\"Convert Investment Tickets to Nfts.\"},\"convertNFTToInvestmentTokens(uint256,uint256)\":{\"notice\":\"Convert NFT to investment tokens\"},\"decideForProject(uint256,bool)\":{\"notice\":\"Decide For Investment\"},\"executeLotteryRun(uint256)\":{\"notice\":\"Executes lottery run\"},\"getInvestmentMetadata(uint256)\":{\"notice\":\"Get Investment Metadata\"},\"getRequestingInterestStatus(uint256)\":{\"notice\":\"Gets Requesting status\"},\"initialize(address,address,address[],address,address,uint256)\":{\"notice\":\"Initialize\"},\"initializeInvestment(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Initialize Investment\"},\"isValidReferralId(uint256)\":{\"notice\":\"IsValidReferralId\"},\"requestInvestment(address,uint256,address,uint256,string)\":{\"notice\":\"Requests investment\"},\"setEscrowAddress(address)\":{\"notice\":\"Update escrow address\"},\"showInterestForInvestment(uint256,uint256)\":{\"notice\":\"user show interest for investment\"},\"startLotteryPhase(uint256)\":{\"notice\":\"Start Lottery Phase\"},\"withdrawLockedInvestmentNfts(uint256,uint256)\":{\"notice\":\"Withdraw locked investment ticket.\"}},\"notice\":\"Same contract as investment\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol\":\"MockPersonalLoan\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x46034cd5cca740f636345c8f7aebae0f78adfd4b70e31e6f888cccbe1086586e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/interfaces/IERC1155Mint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title Interface of the IERC1155 mint function.\\n */\\ninterface IERC1155Mint {\\n    function mintGen0(\\n        address to,\\n        uint256 amount,\\n        uint256 investmentId\\n    ) external;\\n\\n    function mintOfGen(\\n        address to,\\n        uint256 amount,\\n        uint256 generation,\\n        uint256 investmentId\\n    ) external;\\n\\n    function decreaseGenerations(\\n        uint256 tokenId,\\n        address user,\\n        uint256 amount,\\n        uint256 generationsToDecrease\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    function pauseTokenTransfer(uint256 investmentId) external;\\n\\n    function unpauseTokenTransfer(uint256 tokenId) external;\\n\\n    function increaseGenerations(\\n        uint256 tokenId,\\n        address user,\\n        uint256 amount,\\n        uint256 generationsToAdd\\n    ) external;\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfe1b137003f4ca42aff71bdd275f6f1285c9b424558418ae7535692438088aec\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xcb64304470102b740e5ad24abb53e4e6d829796dd036cddff90aa21913eb0f97\",\"license\":\"MIT\"},\"contracts/interfaces/IEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title Interface of the Escrow.\\n */\\ninterface IEscrow {\\n    function receiveFunding(uint256 investmentId, uint256 amount) external;\\n\\n    function transferFundingNFT(\\n        uint256 investmentId,\\n        uint256 partitionsPurchased,\\n        address receiver\\n    ) external;\\n\\n    function lockFundingNFT(\\n        uint256 investmentId,\\n        uint256 amountOfNfts,\\n        address sender\\n    ) external;\\n\\n    function transferLendingToken(\\n        address lendingToken,\\n        address seeker,\\n        uint256 amount\\n    ) external;\\n\\n    function transferInvestmentToken(\\n        address investmentToken,\\n        address seeker,\\n        uint256 amount\\n    ) external;\\n\\n    function mintReputationalToken(address recipient, uint256 amount) external;\\n\\n    function burnReputationalToken(address from, uint256 amount) external;\\n\\n    function multiMintReputationalToken(address[] memory recipients, uint256[] memory amounts) external;\\n\\n    function burnFundingNFT(address account, uint256 investmentId, uint256 amount) external;\\n\\n}\\n\",\"keccak256\":\"0xd3ef7b84388624667aa8056bdd0dd6c01386d6b1f5f35d411ec6c5972eec9db9\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @title Interface of the Governance contract.\\n */\\ninterface IGovernance {\\n    function requestApproval(\\n        uint256 investmentId\\n    ) external;\\n\\n    function storeInvestmentTriggering(uint256 investmentId) external;\\n}\\n\",\"keccak256\":\"0x8a55dc6548bbb9a6f94a3e15a46640bc5bdb6d2fcc27d1a7c8351e4dd96dad71\",\"license\":\"MIT\"},\"contracts/interfaces/IProjectManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @title AllianceBlock Project Manager contract\\n * @dev Extends Initializable, OwnableUpgradeable\\n */\\ninterface IProjectManager {\\n\\n    /**\\n     * @notice Function to create a new project.\\n     * @dev Must be called from a valid project type contract.\\n     */\\n    function createProject() external returns(uint256);\\n\\n    /**\\n     * @notice Function to know if an address is a valid project type contract.\\n     * @param projectAddress address to verify.\\n     */\\n    function isProject(address projectAddress) external returns (bool);\\n\\n    /** \\n     * @notice Get the quantity of total projects created.\\n     */\\n    function totalProjects() view external returns (uint256);\\n\\n    /** \\n     * @notice Get project type number from a project Id.\\n     * @param projectId the projectId to search.\\n     */\\n    function projectTypeFromProjectId(uint256 projectId) external returns (uint256);\\n\\n    /** \\n     * @notice Get project type number from a project address.\\n     * @param projectAddress the project address to get the type number.\\n     */\\n    function projectTypeIndexFromAddress(address projectAddress) external returns (uint256);\\n\\n    /** \\n     * @notice Get project address from a project type number.\\n     * @param typeNumber the project type number to search.\\n     */\\n    function projectAddressFromType(uint256 typeNumber) external returns (address);\\n\\n    /** \\n     * @notice Get project address from a projectId.\\n     * @param projectId the projectId to search.\\n     */\\n    function projectAddressFromProjectId(uint256 projectId) external returns (address);\\n    \\n}\\n\",\"keccak256\":\"0xb6c7bfae0d7c5602eb0f075dbde3039100bddf9a13514dce13630ec95c2a4746\",\"license\":\"MIT\"},\"contracts/libs/ProjectLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\n/**\\n * @title Investment Library\\n */\\nlibrary ProjectLibrary {\\n    enum ProjectStatus {\\n        REQUESTED, // Status when investment has been requested, but not approved yet.\\n        APPROVED, // Status when investment has been approved from governors.\\n        STARTED, // Status when investment has been fully funded.\\n        SETTLED, // Status when investment has been fully repaid by the seeker.\\n        DEFAULT, // Status when seeker has not been able to repay the investment.\\n        REJECTED // Status when investment has been rejected by governors.\\n    }\\n\\n    struct InvestmentDetails {\\n        uint256 investmentId; // The Id of the investment.\\n        uint256 approvalDate; // The timestamp in which investment was approved.\\n        uint256 startingDate; // The timestamp in which investment was funded.\\n        address investmentToken; // The address of the token that will be sold to investors.\\n        uint256 investmentTokensAmount; // The amount of investment tokens that are deposited for investors by the seeker.\\n        address lendingToken; // The address of the token that investors should pay with.\\n        uint256 totalAmountToBeRaised; // The amount of lending tokens that seeker of investment will raise after all tickets are purchased.\\n        uint256 totalPartitionsToBePurchased; // The total partitions or ERC1155 tokens, in which investment is splitted.\\n        string extraInfo; // The ipfs hash, where all extra info about the investment are stored.\\n        uint256 partitionsRequested; // The total partitions or ERC1155 tokens that are requested for purchase.\\n    }\\n}\\n\",\"keccak256\":\"0xd4447bc5019b0caf5907d4e90e28d5f39e6ee2f48baaaf526322e1fb3a90a663\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libs/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb792d9217a73bf5d5c960130b931967ce7097dee280f449d501e43575dab48be\",\"license\":\"MIT\"},\"contracts/libs/TokenFormat.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\n/**\\n * @title The Token Format library\\n */\\nlibrary TokenFormat {\\n    // Use a split bit implementation.\\n    // Store the generation in the upper 128 bits..\\n    // ..and the non-fungible investment id in the lower 128\\n    uint256 private constant _INVESTMENT_ID_MASK = uint128(~0);\\n\\n    /**\\n     * @notice Format tokenId into generation and index\\n     * @param tokenId The Id of the token\\n     * @return generation\\n     * @return investmentId\\n     */\\n    function formatTokenId(uint256 tokenId) internal pure returns (uint256 generation, uint256 investmentId) {\\n        generation = tokenId >> 128;\\n        investmentId = tokenId & _INVESTMENT_ID_MASK;\\n    }\\n\\n    /**\\n     * @notice get tokenId from generation and investmentId\\n     * @param gen the generation\\n     * @param investmentId the investmentID\\n     * @return tokenId the token id\\n     */\\n    function getTokenId(uint256 gen, uint256 investmentId) internal pure returns (uint256 tokenId) {\\n        uint128 maxGen= type(uint128).max;\\n        require(gen < maxGen, \\\"Can't go over the max number of generations available\\\");\\n        require(investmentId < maxGen, \\\"Can't have more than the max number of investmentIds\\\");\\n        return (gen << 128) | investmentId;\\n    }\\n}\\n\",\"keccak256\":\"0x19807e6a0044677d40d5c1f40e52f2304e66755f06e92505b8fb3666ae08669f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"./MockPersonalLoanDetails.sol\\\";\\nimport \\\"../../../libs/SafeERC20.sol\\\";\\nimport \\\"../../../libs/TokenFormat.sol\\\";\\n\\n/**\\n * @title TEST contract to simulate new type of project.\\n * @notice Same contract as investment\\n */\\ncontract MockPersonalLoan is Initializable, MockPersonalLoanDetails, ReentrancyGuardUpgradeable {\\n    using SafeMath for uint256;\\n    using TokenFormat for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // EVENTS\\n    event LotteryExecuted(uint256 indexed projectId);\\n    event ConvertInvestmentTickets(uint256 indexed investmentId, address indexed user, uint256 amount);\\n    event LockInvestmentNfts(uint256 indexed investmentId, address indexed user, uint256 amountOfNfts);\\n    event seekerWithdrawInvestment(uint256 indexed projectId, uint256 amountWithdrawn);\\n    event LotteryLoserClaimedFunds(uint256 indexed projectId, uint256 amountToReturnForNonWonTickets);\\n    event WithdrawLockedInvestmentNfts(uint256 indexed projectId, uint256 ticketsToWithdraw);\\n    event ConvertNFTToInvestmentTokens(uint256 indexed projectId, uint256 amountOfNFTToConvert, uint256 amountOfInvestmentTokenToTransfer);\\n\\n    /**\\n     * @notice Initialize\\n     * @dev Constructor of the contract.\\n     * @param escrowAddress address of the escrow contract\\n     * @param governanceAddress_ address of the DAO contract\\n     * @param lendingTokens_ addresses of the Lending Tokens\\n     * @param fundingNFT_ address of the Funding NFT\\n     * @param baseAmountForEachPartition_ The base amount for each partition\\n     */\\n    function initialize(\\n        address escrowAddress,\\n        address governanceAddress_,\\n        address[] memory lendingTokens_,\\n        address fundingNFT_,\\n        address projectManager_,\\n        uint256 baseAmountForEachPartition_\\n    ) public initializer {\\n        require(escrowAddress != address(0), \\\"Cannot initialize escrowAddress with 0 address\\\");\\n        require(governanceAddress_ != address(0), \\\"Cannot initialize governanceAddress_ with 0 address\\\");\\n        require(fundingNFT_ != address(0), \\\"Cannot initialize fundingNFT_ with 0 address\\\");\\n        require(projectManager_ != address(0), \\\"Cannot initialize projectManager with 0 address\\\");\\n        require(baseAmountForEachPartition_ != 0, \\\"Cannot initialize baseAmountForEachPartition_ with 0\\\");\\n\\n        __ReentrancyGuard_init();\\n        __BaseProject_init();\\n\\n        escrow = IEscrow(escrowAddress);\\n        baseAmountForEachPartition = baseAmountForEachPartition_;\\n        governance = IGovernance(governanceAddress_);\\n        fundingNFT = IERC1155Mint(fundingNFT_);\\n        projectManager = IProjectManager(projectManager_);\\n\\n        for (uint256 i = 0; i < lendingTokens_.length; i++) {\\n            require(lendingTokens_[i] != address(0), \\\"Cannot initialize lendingToken_ with 0 address\\\");\\n            isValidLendingToken[lendingTokens_[i]] = true;\\n        }\\n    }\\n\\n    /**\\n     * @notice Initialize Investment\\n     * @dev This function is called by the owner to initialize the investment type.\\n     * @param reputationalAlbt The address of the rALBT contract.\\n     * @param totalTicketsPerRun_ The amount of tickets that will be provided from each run of the lottery.\\n     * @param rAlbtPerLotteryNumber_ The amount of rALBT needed to allocate one lucky number.\\n     * @param blocksLockedForReputation_ The amount of blocks needed for a ticket to be locked,\\n     *        so as investor to get 1 rALBT for locking it.\\n     */\\n    function initializeInvestment(\\n        address reputationalAlbt,\\n        uint256 totalTicketsPerRun_,\\n        uint256 rAlbtPerLotteryNumber_,\\n        uint256 blocksLockedForReputation_,\\n        uint256 lotteryNumbersForImmediateTicket_\\n    ) external onlyOwner() {\\n        require(reputationalAlbt != address(0), \\\"Cannot initialize with 0 addresses\\\");\\n        require(totalTicketsPerRun_ != 0 && rAlbtPerLotteryNumber_ != 0 && blocksLockedForReputation_ != 0 && lotteryNumbersForImmediateTicket_ != 0, \\\"Cannot initialize with 0 values\\\");\\n        require(address(rALBT) == address(0), \\\"Cannot initialize second time\\\");\\n\\n        rALBT = IERC20(reputationalAlbt);\\n        totalTicketsPerRun = totalTicketsPerRun_;\\n        rAlbtPerLotteryNumber = rAlbtPerLotteryNumber_;\\n        blocksLockedForReputation = blocksLockedForReputation_;\\n        lotteryNumbersForImmediateTicket = lotteryNumbersForImmediateTicket_;\\n    }\\n\\n    /**\\n     * @notice Decide For Investment\\n     * @dev This function is called by governance to approve or reject a investment request.\\n     * @param projectId The id of the investment.\\n     * @param decision The decision of the governance. [true -> approved] [false -> rejected]\\n     */\\n    function decideForProject(uint256 projectId, bool decision) external onlyGovernance() {\\n        if (decision) _approveInvestment(projectId);\\n        else _rejectInvestment(projectId);\\n    }\\n\\n    /**\\n     * @notice Start Lottery Phase\\n     * @dev This function is called by governance to start the lottery phase for an investment.\\n     * @param projectId The id of the investment.\\n     */\\n    function startLotteryPhase(uint256 projectId) external onlyGovernance() {\\n        _startInvestment(projectId);\\n    }\\n\\n    /**\\n     * @notice Approve Investment\\n     * @param projectId_ The id of the investment.\\n     */\\n    function _approveInvestment(uint256 projectId_) internal {\\n        projectStatus[projectId_] = ProjectLibrary.ProjectStatus.APPROVED;\\n        investmentDetails[projectId_].approvalDate = block.timestamp;\\n        ticketsRemaining[projectId_] = investmentDetails[projectId_].totalPartitionsToBePurchased;\\n        governance.storeInvestmentTriggering(projectId_);\\n        emit ProjectApproved(projectId_);\\n    }\\n\\n    /**\\n     * @notice Reject Investment\\n     * @param projectId_ The id of the investment.\\n     */\\n    function _rejectInvestment(uint256 projectId_) internal {\\n        projectStatus[projectId_] = ProjectLibrary.ProjectStatus.REJECTED;\\n        escrow.transferInvestmentToken(\\n            investmentDetails[projectId_].investmentToken,\\n            projectSeeker[projectId_],\\n            investmentDetails[projectId_].investmentTokensAmount\\n        );\\n        emit ProjectRejected(projectId_);\\n    }\\n\\n    /**\\n     * @notice Start Investment\\n     * @param projectId_ The id of the investment.\\n     */\\n    function _startInvestment(uint256 projectId_) internal {\\n        projectStatus[projectId_] = ProjectLibrary.ProjectStatus.STARTED;\\n        investmentDetails[projectId_].startingDate = block.timestamp;\\n\\n        emit ProjectStarted(projectId_);\\n    }\\n\\n    /**\\n     * @notice Get Investment Metadata\\n     * @dev This helper function provides a single point for querying the Investment metadata\\n     * @param projectId The id of the investment.\\n     * @dev returns Investment Details, Investment Status, Investment Seeker Address and Repayment Batch Type\\n     */\\n    function getInvestmentMetadata(uint256 projectId)\\n        public\\n        view\\n        returns (\\n            ProjectLibrary.InvestmentDetails memory, // the investmentDetails\\n            ProjectLibrary.ProjectStatus, // the projectStatus\\n            address // the projectSeeker\\n        )\\n    {\\n        return (\\n            investmentDetails[projectId],\\n            projectStatus[projectId],\\n            projectSeeker[projectId]\\n        );\\n    }\\n\\n    /**\\n     * @notice IsValidReferralId\\n     * @param projectId The id of the investment.\\n     * @dev returns true if investment id exists (so also seeker exists), otherwise returns false\\n     */\\n    function isValidReferralId(uint256 projectId) external view returns (bool) {\\n        return projectSeeker[projectId] != address(0);\\n    }\\n\\n    /**\\n     * @notice Requests investment\\n     * @dev This function is used for seekers to request investment in exchange for investment tokens.\\n     * @dev require valid amount\\n     * @param investmentToken The token that will be purchased by investors.\\n     * @param amountOfInvestmentTokens The amount of investment tokens to be purchased.\\n     * @param lendingToken The token that investors will pay with.\\n     * @param totalAmountRequested_ The total amount requested so as all investment tokens to be sold.\\n     * @param extraInfo The ipfs hash where more specific details for investment request are stored.\\n     */\\n    function requestInvestment(\\n        address investmentToken,\\n        uint256 amountOfInvestmentTokens,\\n        address lendingToken,\\n        uint256 totalAmountRequested_,\\n        string calldata extraInfo\\n    ) external nonReentrant() {\\n        require(isValidLendingToken[lendingToken], \\\"Lending token not supported\\\");\\n\\n        require(\\n            totalAmountRequested_.mod(baseAmountForEachPartition) == 0 &&\\n                amountOfInvestmentTokens.mod(totalAmountRequested_.div(baseAmountForEachPartition)) == 0,\\n            \\\"Token amount and price should result in integer amount of tickets\\\"\\n        );\\n\\n        uint256 projectId = _storeInvestmentDetails(\\n            lendingToken,\\n            totalAmountRequested_,\\n            investmentToken,\\n            amountOfInvestmentTokens,\\n            extraInfo\\n        );\\n\\n        IERC20(investmentToken).safeTransferFrom(msg.sender, address(escrow), amountOfInvestmentTokens);\\n\\n        fundingNFT.mintGen0(address(escrow), investmentDetails[projectId].totalPartitionsToBePurchased, projectId);\\n\\n        investmentTokensPerTicket[projectId] = amountOfInvestmentTokens.div(investmentDetails[projectId].totalPartitionsToBePurchased);\\n\\n        fundingNFT.pauseTokenTransfer(projectId); //Pause trades for ERC1155s with the specific investment ID.\\n\\n        governance.requestApproval(projectId);\\n\\n        // Add event for investment request\\n        emit ProjectRequested(projectId, msg.sender, totalAmountRequested_);\\n\\n    }\\n\\n    /**\\n     * @notice user show interest for investment\\n     * @dev This function is called by the investors who are interested to invest in a specific investment token.\\n     * @dev require Approval state and valid partition\\n     * @param projectId The id of the investment.\\n     * @param amountOfPartitions The amount of partitions this specific investor wanna invest in.\\n     */\\n    function showInterestForInvestment(uint256 projectId, uint256 amountOfPartitions) external  nonReentrant() {\\n        require(\\n            projectStatus[projectId] == ProjectLibrary.ProjectStatus.APPROVED,\\n            \\\"Can show interest only in Approved state\\\"\\n        );\\n        require(amountOfPartitions > 0, \\\"Cannot show interest for 0 partitions\\\");\\n\\n        IERC20(investmentDetails[projectId].lendingToken).safeTransferFrom(\\n            msg.sender, address(escrow), amountOfPartitions.mul(baseAmountForEachPartition)\\n        );\\n\\n        investmentDetails[projectId].partitionsRequested = investmentDetails[projectId].partitionsRequested.add(\\n            amountOfPartitions\\n        );\\n\\n        // if it's not the first time calling the function lucky numbers are not provided again.\\n        if (remainingTicketsPerAddress[projectId][msg.sender] > 0 || ticketsWonPerAddress[projectId][msg.sender] > 0) {\\n            remainingTicketsPerAddress[projectId][msg.sender] =\\n                remainingTicketsPerAddress[projectId][msg.sender].add(amountOfPartitions);\\n        }\\n        else {\\n            _applyImmediateTicketsAndProvideLuckyNumbers(projectId, amountOfPartitions);\\n        }\\n\\n        // Add event for investment interest\\n        emit ProjectInterest(projectId, amountOfPartitions);\\n\\n    }\\n\\n    function _applyImmediateTicketsAndProvideLuckyNumbers(uint256 projectId_, uint256 amountOfPartitions_) internal {\\n        uint256 reputationalBalance = _updateReputationalBalanceForPreviouslyLockedTokens();\\n        uint256 totalLotteryNumbers = reputationalBalance.div(rAlbtPerLotteryNumber);\\n\\n        if (totalLotteryNumbers == 0) revert(\\\"Not eligible for lottery numbers\\\");\\n\\n        uint256 immediateTickets = 0;\\n\\n        if (totalLotteryNumbers > lotteryNumbersForImmediateTicket) {\\n            // Calculated this way so as to avoid users from taking immediateTickets without lottery numbers in case\\n            // totalLotteryNumbers.mod(lotteryNumbersForImmediateTicket) == 0\\n            uint256 rest = (totalLotteryNumbers.sub(1)).mod(lotteryNumbersForImmediateTicket).add(1);\\n            immediateTickets = totalLotteryNumbers.sub(rest).div(lotteryNumbersForImmediateTicket);\\n            totalLotteryNumbers = rest;\\n        }\\n\\n        if (immediateTickets > amountOfPartitions_) immediateTickets = amountOfPartitions_;\\n\\n        if (immediateTickets > 0) {\\n            // Just in case we provided immediate tickets and tickets finished, so there is no lottery in this case.\\n            if (immediateTickets >= ticketsRemaining[projectId_]) {\\n                immediateTickets = ticketsRemaining[projectId_];\\n                projectStatus[projectId_] = ProjectLibrary.ProjectStatus.SETTLED;\\n                fundingNFT.unpauseTokenTransfer(projectId_); // UnPause trades for ERC1155s with the specific investment ID.\\n                emit ProjectSettled(projectId_);\\n            }\\n\\n            ticketsWonPerAddress[projectId_][msg.sender] = immediateTickets;\\n            ticketsRemaining[projectId_] = ticketsRemaining[projectId_].sub(immediateTickets);\\n        }\\n\\n        remainingTicketsPerAddress[projectId_][msg.sender] = amountOfPartitions_.sub(immediateTickets);\\n\\n        uint256 maxLotteryNumber = totalLotteryNumbersPerInvestment[projectId_].add(totalLotteryNumbers);\\n\\n        for (uint256 i = totalLotteryNumbersPerInvestment[projectId_].add(1); i <= maxLotteryNumber; i++) {\\n            addressOfLotteryNumber[projectId_][i] = msg.sender;\\n        }\\n\\n        totalLotteryNumbersPerInvestment[projectId_] = maxLotteryNumber;\\n    }\\n\\n    /**\\n     * @notice Executes lottery run\\n     * @dev This function is called by any investor interested in an Investment Token to run part of the lottery.\\n     * @dev requires Started state and available tickets\\n     * @param projectId The id of the investment.\\n     */\\n    function executeLotteryRun(uint256 projectId) external {\\n        require(projectStatus[projectId] == ProjectLibrary.ProjectStatus.STARTED, \\\"Can run lottery only in Started state\\\");\\n        require(\\n            remainingTicketsPerAddress[projectId][msg.sender] > 0,\\n            \\\"Can run lottery only if has remaining ticket\\\"\\n        );\\n\\n        ticketsWonPerAddress[projectId][msg.sender] = ticketsWonPerAddress[projectId][msg.sender].add(1);\\n        remainingTicketsPerAddress[projectId][msg.sender] = remainingTicketsPerAddress[projectId][msg.sender].sub(\\n            1\\n        );\\n        ticketsRemaining[projectId] = ticketsRemaining[projectId].sub(1);\\n\\n        uint256 counter = totalTicketsPerRun;\\n        uint256 maxNumber = totalLotteryNumbersPerInvestment[projectId];\\n\\n        if (ticketsRemaining[projectId] <= counter) {\\n            projectStatus[projectId] = ProjectLibrary.ProjectStatus.SETTLED;\\n            counter = ticketsRemaining[projectId];\\n            ticketsRemaining[projectId] = 0;\\n            fundingNFT.unpauseTokenTransfer(projectId); // UnPause trades for ERC1155s with the specific investment ID.\\n            emit ProjectSettled(projectId);\\n        } else {\\n            ticketsRemaining[projectId] = ticketsRemaining[projectId].sub(counter);\\n        }\\n\\n        while (counter > 0) {\\n            uint256 randomNumber = _getRandomNumber(maxNumber);\\n            lotteryNonce = lotteryNonce.add(1);\\n\\n            address randomAddress = addressOfLotteryNumber[projectId][randomNumber.add(1)];\\n\\n            if (remainingTicketsPerAddress[projectId][randomAddress] > 0) {\\n                remainingTicketsPerAddress[projectId][randomAddress] = remainingTicketsPerAddress[projectId][\\n                    randomAddress\\n                ]\\n                    .sub(1);\\n\\n                ticketsWonPerAddress[projectId][randomAddress] = ticketsWonPerAddress[projectId][randomAddress]\\n                    .add(1);\\n\\n                counter--;\\n            }\\n        }\\n\\n        // Add event for lottery executed\\n        emit LotteryExecuted(projectId);\\n    }\\n\\n    /**\\n     * @notice Convert Investment Tickets to Nfts.\\n     * @dev This function is called by an investor to convert his tickets won to NFTs.\\n     * @dev require Settled state and enough tickets won\\n     * @param projectId The id of the investment.\\n     */\\n    function convertInvestmentTicketsToNfts(\\n        uint256 projectId\\n    ) external  nonReentrant() {\\n        require(projectStatus[projectId] == ProjectLibrary.ProjectStatus.SETTLED, \\\"Can convert only in Settled state\\\");\\n        require(\\n            ticketsWonPerAddress[projectId][msg.sender] > 0,\\n            \\\"Not enough tickets won\\\"\\n        );\\n\\n        uint256 ticketsToConvert = ticketsWonPerAddress[projectId][msg.sender];\\n        ticketsWonPerAddress[projectId][msg.sender] = 0;\\n\\n        escrow.transferFundingNFT(projectId, ticketsToConvert, msg.sender);\\n\\n        if (remainingTicketsPerAddress[projectId][msg.sender] > 0) {\\n            _withdrawAmountProvidedForNonWonTickets(projectId);\\n        }\\n\\n        emit ConvertInvestmentTickets(projectId, msg.sender, ticketsToConvert);\\n    }\\n\\n    /**\\n     * @dev This function is called by a investment nft holder to lock part of his nfts.\\n     * @param projectId The id of the investment.\\n     * @param nftsToLock The amount of nfts to lock.\\n     */\\n    function lockInvestmentNfts(uint256 projectId, uint256 nftsToLock) external nonReentrant() {\\n        require(fundingNFT.balanceOf(msg.sender, projectId) >= nftsToLock, \\\"Not enough nfts\\\");\\n\\n        escrow.lockFundingNFT(projectId, nftsToLock, msg.sender);\\n\\n        _updateReputationalBalanceForPreviouslyLockedTokens();\\n\\n        lockedNftsForSpecificInvestmentPerAddress[projectId][\\n            msg.sender\\n        ] = lockedNftsForSpecificInvestmentPerAddress[projectId][msg.sender].add(nftsToLock);\\n\\n        lockedNftsPerAddress[msg.sender] = lockedNftsPerAddress[msg.sender].add(nftsToLock);\\n\\n        emit LockInvestmentNfts(projectId, msg.sender, nftsToLock);\\n    }\\n\\n    /**\\n     * @dev This function is called by an investor to withdraw lending tokens provided for non-won tickets.\\n     * @param projectId The id of the investment.\\n     */\\n    function withdrawAmountProvidedForNonWonTickets(uint256 projectId) external nonReentrant() {\\n        require(projectStatus[projectId] == ProjectLibrary.ProjectStatus.SETTLED, \\\"Can withdraw only in Settled state\\\");\\n        require(remainingTicketsPerAddress[projectId][msg.sender] > 0, \\\"No non-won tickets to withdraw\\\");\\n\\n        _withdrawAmountProvidedForNonWonTickets(projectId);\\n    }\\n\\n    /**\\n     * @notice Withdraw locked investment ticket.\\n     * @dev This function is called by an investor to withdraw his locked tickets.\\n     * @dev requires Settled state and available tickets.\\n     * @param projectId The id of the investment.\\n     * @param nftsToWithdraw The amount of locked tickets to be withdrawn.\\n     */\\n    function withdrawLockedInvestmentNfts(uint256 projectId, uint256 nftsToWithdraw) external nonReentrant() {\\n        require(projectStatus[projectId] == ProjectLibrary.ProjectStatus.SETTLED, \\\"Can withdraw only in Settled state\\\");\\n        require(\\n            nftsToWithdraw > 0 &&\\n                lockedNftsForSpecificInvestmentPerAddress[projectId][msg.sender] >= nftsToWithdraw,\\n            \\\"Not enough nfts to withdraw\\\"\\n        );\\n\\n        _updateReputationalBalanceForPreviouslyLockedTokens();\\n\\n        lockedNftsForSpecificInvestmentPerAddress[projectId][\\n            msg.sender\\n        ] = lockedNftsForSpecificInvestmentPerAddress[projectId][msg.sender].sub(nftsToWithdraw);\\n\\n        lockedNftsPerAddress[msg.sender] = lockedNftsPerAddress[msg.sender].sub(nftsToWithdraw);\\n\\n        escrow.transferFundingNFT(projectId, nftsToWithdraw, msg.sender);\\n\\n        // Add event for withdraw locked investment tickets\\n        emit WithdrawLockedInvestmentNfts(projectId, nftsToWithdraw);\\n    }\\n\\n    /**\\n     * @dev This function is called by the seeker to withdraw the lending tokens provided by investors after lottery ends.\\n     * @param projectId The id of the investment.\\n     */\\n    function withdrawInvestment(uint256 projectId) external nonReentrant() {\\n        require(projectStatus[projectId] == ProjectLibrary.ProjectStatus.SETTLED, \\\"Can withdraw only in Settled state\\\");\\n        require(projectSeeker[projectId] == msg.sender, \\\"Only seeker can withdraw\\\");\\n        require(!investmentWithdrawn[projectId], \\\"Already withdrawn\\\");\\n\\n        uint256 amountToWithdraw = investmentDetails[projectId].totalAmountToBeRaised;\\n        investmentWithdrawn[projectId] = true;\\n\\n        escrow.transferLendingToken(investmentDetails[projectId].lendingToken, msg.sender, amountToWithdraw);\\n        emit seekerWithdrawInvestment(projectId, amountToWithdraw);\\n    }\\n\\n    /**\\n     * @notice Gets Requesting status\\n     * @dev Returns true if investors have shown interest for equal or more than the total tickets.\\n     * @param projectId The id of the investment type to be checked.\\n     */\\n    function getRequestingInterestStatus(uint256 projectId) external view returns (bool) {\\n        return investmentDetails[projectId].totalPartitionsToBePurchased <= investmentDetails[projectId].partitionsRequested;\\n    }\\n\\n    /**\\n     * @notice Generates Random Number\\n     * @dev This function generates a random number\\n     * @param maxNumber the max number possible\\n     * @return randomNumber the random number generated\\n     */\\n    function _getRandomNumber(uint256 maxNumber) internal view returns (uint256 randomNumber) {\\n        randomNumber = uint256(\\n            keccak256(\\n                abi.encodePacked(block.difficulty, block.timestamp, lotteryNonce, blockhash(block.number), msg.sender)\\n            )\\n        )\\n            .mod(maxNumber);\\n    }\\n\\n    /**\\n     * @notice Updates reputation balance\\n     * @dev updates balance of reputation for locked tokens\\n     * @return the reputation balance of msg.sender\\n     */\\n    function _updateReputationalBalanceForPreviouslyLockedTokens() internal returns (uint256) {\\n        if (lockedNftsPerAddress[msg.sender] > 0) {\\n            // Decimals for rALBT => 18\\n            uint256 amountOfReputationalAlbtPerTicket =\\n                (block.number.sub(lastBlockCheckedForLockedNftsPerAddress[msg.sender])).mul(10**18).div(\\n                    blocksLockedForReputation\\n                );\\n\\n            uint256 amountOfReputationalAlbtToMint =\\n                amountOfReputationalAlbtPerTicket.mul(lockedNftsPerAddress[msg.sender]);\\n\\n            escrow.mintReputationalToken(msg.sender, amountOfReputationalAlbtToMint);\\n\\n            lastBlockCheckedForLockedNftsPerAddress[msg.sender] = block.number;\\n        }\\n\\n        return rALBT.balanceOf(msg.sender);\\n    }\\n\\n    function _withdrawAmountProvidedForNonWonTickets(uint256 projectId_) internal {\\n        uint256 amountToReturnForNonWonTickets =\\n            remainingTicketsPerAddress[projectId_][msg.sender].mul(baseAmountForEachPartition);\\n        remainingTicketsPerAddress[projectId_][msg.sender] = 0;\\n\\n        escrow.transferLendingToken(investmentDetails[projectId_].lendingToken, msg.sender, amountToReturnForNonWonTickets);\\n\\n        // Add event for withdraw amount provided for non tickets\\n        emit LotteryLoserClaimedFunds(projectId_, amountToReturnForNonWonTickets);\\n    }\\n\\n    /**\\n     * @notice Convert NFT to investment tokens\\n     * @param projectId the projectId\\n     * @param amountOfNFTToConvert the amount of nft to convert\\n     */\\n    function convertNFTToInvestmentTokens (uint256 projectId, uint256 amountOfNFTToConvert) external {\\n        require(projectStatus[projectId] == ProjectLibrary.ProjectStatus.SETTLED, \\\"Can withdraw only in Settled state\\\");\\n        require(amountOfNFTToConvert != 0, \\\"Amount of nft to convert cannot be 0\\\");\\n        require(amountOfNFTToConvert <= fundingNFT.balanceOf(msg.sender, projectId), \\\"Not enough NFT to convert\\\");\\n\\n        uint256 amountOfInvestmentTokenToTransfer = investmentTokensPerTicket[projectId].mul(amountOfNFTToConvert);\\n\\n        escrow.burnFundingNFT(msg.sender, projectId, amountOfNFTToConvert);\\n        escrow.transferInvestmentToken(investmentDetails[projectId].investmentToken, msg.sender, amountOfInvestmentTokenToTransfer);\\n\\n        // Add event for convert nft to investment tokens\\n        emit ConvertNFTToInvestmentTokens(projectId, amountOfNFTToConvert, amountOfInvestmentTokenToTransfer);\\n    }\\n}\\n\",\"keccak256\":\"0x4c7097e49ae6d67f6fbbae0e8a78db50cdf81260ba8d1e2d49a067f8454d4546\",\"license\":\"MIT\"},\"contracts/mocks/Tests/personalLoan/MockPersonalLoanDetails.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./MockStorage.sol\\\";\\nimport \\\"../../../libs/TokenFormat.sol\\\";\\nimport \\\"../../../projects/BaseProject/BaseProject.sol\\\";\\n\\n/**\\n * @title AllianceBlock InvestmentDetails contract\\n * @notice Functionality for storing investment details and modifiers.\\n * @dev Extends Storage\\n */\\ncontract MockPersonalLoanDetails is MockStorage, BaseProject {\\n    using SafeMath for uint256;\\n    using TokenFormat for uint256;\\n\\n    /**\\n     * @notice Stores Investment Details\\n     * @dev require a valid interest percentage\\n     * @param amountRequestedToBeRaised_ the amount requested\\n     * @param investmentToken_ the investment token address\\n     * @param investmentTokensAmount_ the amount of investment tokens provided by the seeker\\n     * @param extraInfo_ the IPFS hard data provided\\n     */\\n    function _storeInvestmentDetails(\\n        address lendingToken_,\\n        uint256 amountRequestedToBeRaised_,\\n        address investmentToken_,\\n        uint256 investmentTokensAmount_,\\n        string memory extraInfo_\\n    ) internal returns (uint256) {\\n        uint256 projectId = projectManager.createProject();\\n        \\n        ProjectLibrary.InvestmentDetails memory investment;\\n        investment.investmentId = projectId;\\n        investment.investmentToken = investmentToken_;\\n        investment.investmentTokensAmount = investmentTokensAmount_;\\n        investment.totalAmountToBeRaised = amountRequestedToBeRaised_;\\n        investment.extraInfo = extraInfo_;\\n        investment.totalPartitionsToBePurchased = amountRequestedToBeRaised_.div(baseAmountForEachPartition);\\n        investment.lendingToken = lendingToken_;\\n\\n        investmentDetails[projectId] = investment;\\n\\n        projectSeeker[projectId] = msg.sender;\\n\\n        return investment.investmentId;\\n\\n    }\\n}\\n\",\"keccak256\":\"0x43ce9ee30a558e9a0b2ffa8e2486d863c9cf9845a515f8899ea9a01ccc88aa89\",\"license\":\"MIT\"},\"contracts/mocks/Tests/personalLoan/MockStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"../../../libs/ProjectLibrary.sol\\\";\\nimport \\\"../../../interfaces/IERC20.sol\\\";\\nimport \\\"../../../interfaces/IERC1155Mint.sol\\\";\\nimport \\\"../../../interfaces/IGovernance.sol\\\";\\nimport \\\"../../../interfaces/IEscrow.sol\\\";\\n\\n/**\\n * @title AllianceBlock Storage contract\\n * @notice Responsible for investment storage\\n */\\ncontract MockStorage {\\n\\n    // The amount of investment tokens each ticket contains.\\n    mapping(uint256 => uint256) public investmentTokensPerTicket;\\n    // The amount of tickets remaining to be allocated to investors.\\n    mapping(uint256 => uint256) public ticketsRemaining;\\n    // The number lottery numbers allocated from all investors for a specific investment.\\n    mapping(uint256 => uint256) public totalLotteryNumbersPerInvestment;\\n    // If investment is withdrawn by the seeker then it is true, otherwise it is false.\\n    mapping(uint256 => bool) public investmentWithdrawn;\\n    // The address of the investor that has allocated a specific lottery number on a specific investment.\\n    mapping(uint256 => mapping(uint256 => address)) public addressOfLotteryNumber;\\n    // The amount of tickets that an investor requested that are still not allocated.\\n    mapping(uint256 => mapping(address => uint256)) public remainingTicketsPerAddress;\\n    // The amount of tickets that an investor requested that have been won already.\\n    mapping(uint256 => mapping(address => uint256)) public ticketsWonPerAddress;\\n    // The amount of tickets that an investor locked for a specific investment.\\n    mapping(uint256 => mapping(address => uint256)) public lockedNftsForSpecificInvestmentPerAddress;\\n    // The amount of tickets that an investor locked from all investments.\\n    mapping(address => uint256) public lockedNftsPerAddress;\\n    // The last block checked for rewards for the tickets locked per address.\\n    mapping(address => uint256) public lastBlockCheckedForLockedNftsPerAddress;\\n    \\n    // Mapping from investment id -> details for each and every investment.\\n    mapping(uint256 => ProjectLibrary.InvestmentDetails) public investmentDetails;\\n\\n    // This variable represents the base amount in which every investment amount is divided to. (also the starting value for each ERC1155)\\n    uint256 public baseAmountForEachPartition;\\n    // The amount of tickets to be provided by each run of the lottery.\\n    uint256 public totalTicketsPerRun;\\n    // The amount of rALBT needed to allocate one lottery number.\\n    uint256 public rAlbtPerLotteryNumber;\\n    // The amount of blocks needed for a ticket to be locked, so as the investor to get 1 rALBT.\\n    uint256 public blocksLockedForReputation;\\n    // The amount of lottery numbers, that if investor has after number allocation he gets one ticket without lottery.\\n    uint256 public lotteryNumbersForImmediateTicket;\\n    // The nonce for the lottery numbers.\\n    uint256 internal lotteryNonce;\\n}\\n\",\"keccak256\":\"0xc45cbabb620d38fde40c461f7f98fb5c94ea4e043fc72c450801c0d6dfa66274\",\"license\":\"MIT\"},\"contracts/projects/BaseProject/BaseProject.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./BaseProjectStorage.sol\\\";\\nimport \\\"../../libs/TokenFormat.sol\\\";\\nimport \\\"../../interfaces/IProjectManager.sol\\\";\\n\\n/**\\n * @title AllianceBlock BaseProject contract\\n * @notice Common functionality for all type of projects.\\n * @dev Extends BaseProjectStorage\\n */\\ncontract BaseProject is BaseProjectStorage, OwnableUpgradeable {\\n    using SafeMath for uint256;\\n    using TokenFormat for uint256;\\n\\n    // EVENTS\\n    event ProjectStarted(uint256 indexed projectId);\\n    event ProjectApproved(uint256 indexed projectId);\\n    event ProjectRejected(uint256 indexed projectId);\\n    event ProjectRequested(uint256 indexed projectId, address indexed user, uint256 amount);\\n    event ProjectInterest(uint256 indexed projectId, uint amount);\\n    event ProjectSettled(uint256 indexed projectId);\\n\\n    modifier onlyGovernance() {\\n        require(msg.sender == address(governance), \\\"Only Governance\\\");\\n        _;\\n    }\\n\\n    function __BaseProject_init() public{\\n        __Ownable_init();\\n    }\\n\\n    /**\\n     * @notice Update escrow address\\n     * @dev This function is called by the owner to update the escrow address\\n     * @param escrowAddress_ The address of escrow that will be updated.\\n     */\\n    function setEscrowAddress(\\n        address escrowAddress_\\n    ) external onlyOwner() {\\n        require(escrowAddress_ != address(0), \\\"Cannot provide escrowAddress_ with 0 address\\\");\\n        escrow = IEscrow(escrowAddress_);\\n    }\\n\\n    /**\\n     * @notice Add lending token\\n     * @dev This function is called by the owner to add another lending token.\\n     * @param lendingToken_ The address of lending token that will be added.\\n     */\\n    function addLendingToken(\\n        address lendingToken_\\n    ) external onlyOwner() {\\n        require(lendingToken_ != address(0), \\\"Cannot provide lendingToken_ with 0 address\\\");\\n        require(!isValidLendingToken[lendingToken_], \\\"Cannot add existing lending token\\\");\\n        isValidLendingToken[lendingToken_] = true;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xae503446d9321fc01151d02b034021a747faeaba74bb242768f07f7079086ecb\",\"license\":\"MIT\"},\"contracts/projects/BaseProject/BaseProjectStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"../../libs/ProjectLibrary.sol\\\";\\nimport \\\"../../interfaces/IERC20.sol\\\";\\nimport \\\"../../interfaces/IERC1155Mint.sol\\\";\\nimport \\\"../../interfaces/IGovernance.sol\\\";\\nimport \\\"../../interfaces/IEscrow.sol\\\";\\nimport \\\"../../interfaces/IProjectManager.sol\\\";\\n\\n/**\\n * @title AllianceBlock BaseProjectStorage contract\\n * @notice Responsible for common project storage\\n */\\ncontract BaseProjectStorage {\\n\\n    IGovernance public governance; // Governance's contract address.\\n    IERC1155Mint public fundingNFT; // Funding nft's contract address.\\n    IEscrow public escrow; // Escrow's contract address.\\n    IERC20 public rALBT; // rALBT's contract address.\\n    IProjectManager public projectManager; // rALBT's contract address.\\n\\n    uint256 public totalProjects; // The total amount of investment requests.\\n\\n    // Mapping from project id -> project seeker's address.\\n    mapping(uint256 => address) public projectSeeker;\\n\\n    // All supported lending tokens are giving true, while unsupported are giving false.\\n    mapping(address => bool) public isValidLendingToken;\\n    \\n    // Mapping from projectId -> project status.\\n    mapping(uint256 => ProjectLibrary.ProjectStatus) public projectStatus;\\n\\n}\",\"keccak256\":\"0x4ccc10d080d202dd0fb53069939ed35533ee50bc86cb0e85824a098151fdaa99\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLendingToken(address)": {
        "details": "This function is called by the owner to add another lending token.",
        "params": {
          "lendingToken_": "The address of lending token that will be added."
        }
      },
      "convertInvestmentTicketsToNfts(uint256)": {
        "details": "This function is called by an investor to convert his tickets won to NFTs.require Settled state and enough tickets won",
        "params": {
          "projectId": "The id of the investment."
        }
      },
      "convertNFTToInvestmentTokens(uint256,uint256)": {
        "params": {
          "amountOfNFTToConvert": "the amount of nft to convert",
          "projectId": "the projectId"
        }
      },
      "decideForProject(uint256,bool)": {
        "details": "This function is called by governance to approve or reject a investment request.",
        "params": {
          "decision": "The decision of the governance. [true -> approved] [false -> rejected]",
          "projectId": "The id of the investment."
        }
      },
      "executeLotteryRun(uint256)": {
        "details": "This function is called by any investor interested in an Investment Token to run part of the lottery.requires Started state and available tickets",
        "params": {
          "projectId": "The id of the investment."
        }
      },
      "getInvestmentMetadata(uint256)": {
        "details": "This helper function provides a single point for querying the Investment metadatareturns Investment Details, Investment Status, Investment Seeker Address and Repayment Batch Type",
        "params": {
          "projectId": "The id of the investment."
        }
      },
      "getRequestingInterestStatus(uint256)": {
        "details": "Returns true if investors have shown interest for equal or more than the total tickets.",
        "params": {
          "projectId": "The id of the investment type to be checked."
        }
      },
      "initialize(address,address,address[],address,address,uint256)": {
        "details": "Constructor of the contract.",
        "params": {
          "baseAmountForEachPartition_": "The base amount for each partition",
          "escrowAddress": "address of the escrow contract",
          "fundingNFT_": "address of the Funding NFT",
          "governanceAddress_": "address of the DAO contract",
          "lendingTokens_": "addresses of the Lending Tokens"
        }
      },
      "initializeInvestment(address,uint256,uint256,uint256,uint256)": {
        "details": "This function is called by the owner to initialize the investment type.",
        "params": {
          "blocksLockedForReputation_": "The amount of blocks needed for a ticket to be locked,        so as investor to get 1 rALBT for locking it.",
          "rAlbtPerLotteryNumber_": "The amount of rALBT needed to allocate one lucky number.",
          "reputationalAlbt": "The address of the rALBT contract.",
          "totalTicketsPerRun_": "The amount of tickets that will be provided from each run of the lottery."
        }
      },
      "isValidReferralId(uint256)": {
        "details": "returns true if investment id exists (so also seeker exists), otherwise returns false",
        "params": {
          "projectId": "The id of the investment."
        }
      },
      "lockInvestmentNfts(uint256,uint256)": {
        "details": "This function is called by a investment nft holder to lock part of his nfts.",
        "params": {
          "nftsToLock": "The amount of nfts to lock.",
          "projectId": "The id of the investment."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requestInvestment(address,uint256,address,uint256,string)": {
        "details": "This function is used for seekers to request investment in exchange for investment tokens.require valid amount",
        "params": {
          "amountOfInvestmentTokens": "The amount of investment tokens to be purchased.",
          "extraInfo": "The ipfs hash where more specific details for investment request are stored.",
          "investmentToken": "The token that will be purchased by investors.",
          "lendingToken": "The token that investors will pay with.",
          "totalAmountRequested_": "The total amount requested so as all investment tokens to be sold."
        }
      },
      "setEscrowAddress(address)": {
        "details": "This function is called by the owner to update the escrow address",
        "params": {
          "escrowAddress_": "The address of escrow that will be updated."
        }
      },
      "showInterestForInvestment(uint256,uint256)": {
        "details": "This function is called by the investors who are interested to invest in a specific investment token.require Approval state and valid partition",
        "params": {
          "amountOfPartitions": "The amount of partitions this specific investor wanna invest in.",
          "projectId": "The id of the investment."
        }
      },
      "startLotteryPhase(uint256)": {
        "details": "This function is called by governance to start the lottery phase for an investment.",
        "params": {
          "projectId": "The id of the investment."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawAmountProvidedForNonWonTickets(uint256)": {
        "details": "This function is called by an investor to withdraw lending tokens provided for non-won tickets.",
        "params": {
          "projectId": "The id of the investment."
        }
      },
      "withdrawInvestment(uint256)": {
        "details": "This function is called by the seeker to withdraw the lending tokens provided by investors after lottery ends.",
        "params": {
          "projectId": "The id of the investment."
        }
      },
      "withdrawLockedInvestmentNfts(uint256,uint256)": {
        "details": "This function is called by an investor to withdraw his locked tickets.requires Settled state and available tickets.",
        "params": {
          "nftsToWithdraw": "The amount of locked tickets to be withdrawn.",
          "projectId": "The id of the investment."
        }
      }
    },
    "title": "TEST contract to simulate new type of project.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLendingToken(address)": {
        "notice": "Add lending token"
      },
      "convertInvestmentTicketsToNfts(uint256)": {
        "notice": "Convert Investment Tickets to Nfts."
      },
      "convertNFTToInvestmentTokens(uint256,uint256)": {
        "notice": "Convert NFT to investment tokens"
      },
      "decideForProject(uint256,bool)": {
        "notice": "Decide For Investment"
      },
      "executeLotteryRun(uint256)": {
        "notice": "Executes lottery run"
      },
      "getInvestmentMetadata(uint256)": {
        "notice": "Get Investment Metadata"
      },
      "getRequestingInterestStatus(uint256)": {
        "notice": "Gets Requesting status"
      },
      "initialize(address,address,address[],address,address,uint256)": {
        "notice": "Initialize"
      },
      "initializeInvestment(address,uint256,uint256,uint256,uint256)": {
        "notice": "Initialize Investment"
      },
      "isValidReferralId(uint256)": {
        "notice": "IsValidReferralId"
      },
      "requestInvestment(address,uint256,address,uint256,string)": {
        "notice": "Requests investment"
      },
      "setEscrowAddress(address)": {
        "notice": "Update escrow address"
      },
      "showInterestForInvestment(uint256,uint256)": {
        "notice": "user show interest for investment"
      },
      "startLotteryPhase(uint256)": {
        "notice": "Start Lottery Phase"
      },
      "withdrawLockedInvestmentNfts(uint256,uint256)": {
        "notice": "Withdraw locked investment ticket."
      }
    },
    "notice": "Same contract as investment",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13505,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "investmentTokensPerTicket",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 13509,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "ticketsRemaining",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 13513,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "totalLotteryNumbersPerInvestment",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 13517,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "investmentWithdrawn",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 13523,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "addressOfLotteryNumber",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 13529,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "remainingTicketsPerAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 13535,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "ticketsWonPerAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 13541,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "lockedNftsForSpecificInvestmentPerAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 13545,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "lockedNftsPerAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13549,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "lastBlockCheckedForLockedNftsPerAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13553,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "investmentDetails",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(InvestmentDetails)11165_storage)"
      },
      {
        "astId": 13555,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "baseAmountForEachPartition",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 13557,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "totalTicketsPerRun",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 13559,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "rAlbtPerLotteryNumber",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 13561,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "blocksLockedForReputation",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 13563,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "lotteryNumbersForImmediateTicket",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 13565,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "lotteryNonce",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 13706,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "governance",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IGovernance)9567"
      },
      {
        "astId": 13708,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "fundingNFT",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IERC1155Mint)9354"
      },
      {
        "astId": 13710,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "escrow",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(IEscrow)9553"
      },
      {
        "astId": 13712,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "rALBT",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(IERC20)9465"
      },
      {
        "astId": 13714,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "projectManager",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(IProjectManager)9664"
      },
      {
        "astId": 13716,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "totalProjects",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 13720,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "projectSeeker",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 13724,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "isValidLendingToken",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13728,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "projectStatus",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_enum(ProjectStatus)11144)"
      },
      {
        "astId": 890,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "_initialized",
        "offset": 0,
        "slot": "26",
        "type": "t_bool"
      },
      {
        "astId": 893,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "_initializing",
        "offset": 1,
        "slot": "26",
        "type": "t_bool"
      },
      {
        "astId": 2584,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "__gap",
        "offset": 0,
        "slot": "27",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "_owner",
        "offset": 0,
        "slot": "77",
        "type": "t_address"
      },
      {
        "astId": 440,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "__gap",
        "offset": 0,
        "slot": "78",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3091,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "_status",
        "offset": 0,
        "slot": "127",
        "type": "t_uint256"
      },
      {
        "astId": 3134,
        "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
        "label": "__gap",
        "offset": 0,
        "slot": "128",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC1155Mint)9354": {
        "encoding": "inplace",
        "label": "contract IERC1155Mint",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)9465": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IEscrow)9553": {
        "encoding": "inplace",
        "label": "contract IEscrow",
        "numberOfBytes": "20"
      },
      "t_contract(IGovernance)9567": {
        "encoding": "inplace",
        "label": "contract IGovernance",
        "numberOfBytes": "20"
      },
      "t_contract(IProjectManager)9664": {
        "encoding": "inplace",
        "label": "contract IProjectManager",
        "numberOfBytes": "20"
      },
      "t_enum(ProjectStatus)11144": {
        "encoding": "inplace",
        "label": "enum ProjectLibrary.ProjectStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_enum(ProjectStatus)11144)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum ProjectLibrary.ProjectStatus)",
        "numberOfBytes": "32",
        "value": "t_enum(ProjectStatus)11144"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_uint256,t_struct(InvestmentDetails)11165_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ProjectLibrary.InvestmentDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(InvestmentDetails)11165_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(InvestmentDetails)11165_storage": {
        "encoding": "inplace",
        "label": "struct ProjectLibrary.InvestmentDetails",
        "members": [
          {
            "astId": 11146,
            "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
            "label": "investmentId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11148,
            "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
            "label": "approvalDate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11150,
            "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
            "label": "startingDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11152,
            "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
            "label": "investmentToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 11154,
            "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
            "label": "investmentTokensAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 11156,
            "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
            "label": "lendingToken",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 11158,
            "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
            "label": "totalAmountToBeRaised",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 11160,
            "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
            "label": "totalPartitionsToBePurchased",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 11162,
            "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
            "label": "extraInfo",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 11164,
            "contract": "contracts/mocks/Tests/personalLoan/MockPersonalLoan.sol:MockPersonalLoan",
            "label": "partitionsRequested",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}