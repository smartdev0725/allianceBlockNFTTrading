{
  "address": "0xbaE279E8f0c6530Dad223A34C455A56b2830f879",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "albt",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrow",
      "outputs": [
        {
          "internalType": "contract IEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAmountsToStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakerLvl1Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakerLvl2Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakerLvl3Amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker_",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "albt_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "escrow_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakerMedalNFT_",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "stakingTypeAmounts_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "reputationalStakingTypeAmounts_",
          "type": "uint256[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reputationalStakingTypeAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum StakingTypesAndStorage.StakingType",
          "name": "stakingType",
          "type": "uint8"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakerMedalNFT",
      "outputs": [
        {
          "internalType": "contract IERC1155StakerNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakingTypeAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum StakingTypesAndStorage.StakingType",
          "name": "stakingType",
          "type": "uint8"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe6ffb82d33b1ae2dc74e589caa47e81ad2028283450204c8ea746b5a7ca1325c",
  "receipt": {
    "to": null,
    "from": "0x4C7B849e8F7c970744b4741BE35541E20990392d",
    "contractAddress": "0xbaE279E8f0c6530Dad223A34C455A56b2830f879",
    "transactionIndex": 13,
    "gasUsed": "1519397",
    "logsBloom": "0x
    "blockHash": "0xa00af7587ddc687dfc3e691f7901268999150bd5d97627a9877fab0d5439a3ac",
    "transactionHash": "0xe6ffb82d33b1ae2dc74e589caa47e81ad2028283450204c8ea746b5a7ca1325c",
    "logs": [],
    "blockNumber": 9132932,
    "cumulativeGasUsed": "7047872",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "2655e296375c08ec2ee94c1a605dd52e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"albt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"internalType\":\"contract IEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAmountsToStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakerLvl1Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakerLvl2Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakerLvl3Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"albt_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"escrow_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakerMedalNFT_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"stakingTypeAmounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"reputationalStakingTypeAmounts_\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reputationalStakingTypeAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StakingTypesAndStorage.StakingType\",\"name\":\"stakingType\",\"type\":\"uint8\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerMedalNFT\",\"outputs\":[{\"internalType\":\"contract IERC1155StakerNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingTypeAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StakingTypesAndStorage.StakingType\",\"name\":\"stakingType\",\"type\":\"uint8\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extends  Initializable, StakingDetails, OwnableUpgradeable\",\"kind\":\"dev\",\"methods\":{\"exit()\":{\"details\":\"msg.sender withdraws and exits\"},\"getAmountsToStake()\":{\"returns\":{\"stakerLvl1Amount\":\"Staker lvl 1 Amount\",\"stakerLvl2Amount\":\"Staker lvl 2 Amount\",\"stakerLvl3Amount\":\"Staker lvl 3 Amount\"}},\"getBalance(address)\":{\"details\":\"Retrieves the staked balance for a given user\",\"params\":{\"staker_\":\"the address of the staker\"}},\"initialize(address,address,address,uint256[],uint256[])\":{\"details\":\"Initialize of the contract.\",\"params\":{\"albt_\":\"the albt IERC20 token\",\"escrow_\":\"the escrow address\",\"reputationalStakingTypeAmounts_\":\"the array of Reputation Staking Type Amounts\",\"stakingTypeAmounts_\":\"the array of Staking Type Amounts\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"stake(uint8)\":{\"details\":\"requires not Delegator and cannot repeat staking type\",\"params\":{\"stakingType\":\"The staking type\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstake(uint8)\":{\"details\":\"msg.sender withdraws till reaching stakingType\",\"params\":{\"stakingType\":\"The staking type to drop to\"}}},\"title\":\"AllianceBlock Staking contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exit()\":{\"notice\":\"Exit\"},\"getAmountsToStake()\":{\"notice\":\"Get Amounts to Stake\"},\"getBalance(address)\":{\"notice\":\"Get Balance\"},\"initialize(address,address,address,uint256[],uint256[])\":{\"notice\":\"Initialize\"},\"stake(uint8)\":{\"notice\":\"Stake\"},\"unstake(uint8)\":{\"notice\":\"Unstake\"}},\"notice\":\"Responsible for ALBT Staking\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x46034cd5cca740f636345c8f7aebae0f78adfd4b70e31e6f888cccbe1086586e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./staking/StakingDetails.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\n/**\\n * @title AllianceBlock Staking contract\\n * @notice Responsible for ALBT Staking\\n * @dev Extends  Initializable, StakingDetails, OwnableUpgradeable\\n */\\ncontract Staking is Initializable, StakingDetails, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Initialize\\n     * @dev Initialize of the contract.\\n     * @param albt_ the albt IERC20 token\\n     * @param escrow_ the escrow address\\n     * @param stakingTypeAmounts_ the array of Staking Type Amounts\\n     * @param reputationalStakingTypeAmounts_ the array of Reputation Staking Type Amounts\\n     */\\n    function initialize(\\n        address albt_,\\n        address escrow_,\\n        address stakerMedalNFT_,\\n        uint256[] memory stakingTypeAmounts_,\\n        uint256[] memory reputationalStakingTypeAmounts_\\n    ) external initializer {\\n        require(albt_ != address(0), \\\"Cannot initialize albt with 0 address\\\");\\n        require(escrow_ != address(0), \\\"Cannot initialize escrow_ with 0 address\\\");\\n        require(stakerMedalNFT_ != address(0), \\\"Cannot initialize stakerMedalNFT_ with 0 address\\\");\\n        require(stakingTypeAmounts_.length != 0, \\\"Cannot initialize stakingTypeAmounts_ with 0\\\");\\n        require(reputationalStakingTypeAmounts_.length != 0, \\\"Cannot initialize reputationalStakingTypeAmounts_ with 0\\\");\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n\\n        albt = IERC20(albt_);\\n        escrow = IEscrow(escrow_);\\n        stakerMedalNFT = IERC1155StakerNFT(stakerMedalNFT_);\\n\\n        for (uint256 i = 0; i < stakingTypeAmounts_.length; i++) {\\n            stakingTypeAmounts[i] = stakingTypeAmounts_[i];\\n        }\\n\\n        for (uint256 i = 0; i < reputationalStakingTypeAmounts_.length; i++) {\\n            reputationalStakingTypeAmounts[i] = reputationalStakingTypeAmounts_[i];\\n        }\\n    }\\n\\n    /**\\n     * @notice Stake\\n     * @param stakingType The staking type\\n     * @dev requires not Delegator and cannot repeat staking type\\n     */\\n    function stake(StakingType stakingType) external nonReentrant() {\\n        require(uint256(stakingType) != 0, \\\"Cannot stake for type zero\\\");\\n        require(balance[msg.sender] < stakingTypeAmounts[uint256(stakingType)], \\\"Cannot stake for same type again\\\");\\n\\n        uint256 amount = stakingTypeAmounts[uint256(stakingType)];\\n\\n        uint256 stakingTypeIndex = _getStakingType(msg.sender);\\n\\n        _applyReputation(msg.sender, stakingTypeIndex, uint256(stakingType));\\n\\n        _applyMedal(msg.sender, stakingTypeIndex, uint256(stakingType));\\n\\n        uint256 amountToStake = amount.sub(balance[msg.sender]);\\n        _stake(msg.sender, amountToStake);\\n    }\\n\\n    /**\\n     * @notice Unstake\\n     * @param stakingType The staking type to drop to\\n     * @dev msg.sender withdraws till reaching stakingType\\n     */\\n    function unstake(StakingType stakingType) external nonReentrant() {\\n        require(balance[msg.sender] > stakingTypeAmounts[uint256(stakingType)], \\\"Can only drop to lower level\\\");\\n\\n        uint256 stakingTypeIndex = _getStakingType(msg.sender);\\n        uint256 amount = stakingTypeAmounts[uint256(stakingType)];\\n\\n        _applyReputation(msg.sender, stakingTypeIndex, uint256(stakingType));\\n\\n        _applyMedal(msg.sender, stakingTypeIndex, uint256(stakingType));\\n\\n        uint256 amountToWithdraw = balance[msg.sender].sub(amount);\\n        _withdraw(msg.sender, amountToWithdraw);\\n    }\\n\\n    /**\\n     * @notice Exit\\n     * @dev msg.sender withdraws and exits\\n     */\\n    function exit() external nonReentrant() {\\n        uint256 stakingTypeIndex = _getStakingType(msg.sender);\\n\\n        _applyReputation(msg.sender, stakingTypeIndex, 0);\\n\\n        _applyMedal(msg.sender, stakingTypeIndex, 0);\\n\\n        uint256 amountToWithdraw = balance[msg.sender];\\n\\n        _withdraw(msg.sender, amountToWithdraw);\\n    }\\n\\n    /**\\n     * @notice Get Staking Type\\n     * @param account the address\\n     * @return the staking type\\n     */\\n    function _getStakingType(address account) internal view returns (uint256) {\\n        for (uint256 i = 0; i < 4; i++) {\\n            if (balance[account] == stakingTypeAmounts[i]) {\\n                return i;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Apply Reputation\\n     * @param account the address\\n     * @param previousLevelIndex The index of the previous level\\n     * @param newLevelIndex The index for the new level\\n     */\\n    function _applyReputation(\\n        address account,\\n        uint256 previousLevelIndex,\\n        uint256 newLevelIndex\\n    ) internal {\\n        if (previousLevelIndex < newLevelIndex) {\\n            uint256 amountToMint = _findAmount(newLevelIndex, previousLevelIndex);\\n            escrow.mintReputationalToken(account, amountToMint);\\n        } else {\\n            uint256 amountToBurn = _findAmount(previousLevelIndex, newLevelIndex);\\n            escrow.burnReputationalToken(account, amountToBurn);\\n        }\\n    }\\n\\n    /**\\n     * @notice Apply Medal\\n     * @param account the address\\n     * @param previousLevelIndex The index of the previous level\\n     * @param newLevelIndex The index for the new level\\n     */\\n    function _applyMedal(\\n        address account,\\n        uint256 previousLevelIndex,\\n        uint256 newLevelIndex\\n    ) internal {\\n        if(newLevelIndex > 0) {\\n            stakerMedalNFT.mint(account, newLevelIndex);\\n        }\\n\\n        if(previousLevelIndex > 0 || newLevelIndex == 0) {\\n            stakerMedalNFT.burn(account, previousLevelIndex);\\n        }\\n    }\\n\\n    /**\\n     * @notice Find Amount\\n     * @param bigIndex ???\\n     * @param smallIndex ???\\n     * @return amount of reputation\\n     */\\n    function _findAmount(uint256 bigIndex, uint256 smallIndex) internal view returns (uint256 amount) {\\n        if (smallIndex == 0) {\\n            amount = reputationalStakingTypeAmounts[bigIndex];\\n        } else {\\n            amount = reputationalStakingTypeAmounts[bigIndex].sub(\\n                reputationalStakingTypeAmounts[smallIndex]\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x109b3f798d509701a395097b3ed74638792bee88956d454650b1d1e70e10033c\",\"license\":\"MIT\"},\"contracts/interfaces/IERC1155StakerNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title Interface of the IERC1155StakerNFT function.\\n */\\ninterface IERC1155StakerNFT {\\n    function burn(\\n        address account,\\n        uint256 id\\n    ) external;\\n\\n    function mint(\\n        address account,\\n        uint256 id\\n    ) external;\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0x1f1068bde7e7cb39fffa475c6894e1dfda84f5cc44da02869b2854b99c311910\",\"license\":\"MIT\"},\"contracts/interfaces/IEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title Interface of the Escrow.\\n */\\ninterface IEscrow {\\n    function receiveFunding(uint256 investmentId, uint256 amount) external;\\n\\n    function transferFundingNFT(\\n        uint256 investmentId,\\n        uint256 partitionsPurchased,\\n        address receiver\\n    ) external;\\n\\n    function lockFundingNFT(\\n        uint256 investmentId,\\n        uint256 amountOfNfts,\\n        address sender\\n    ) external;\\n\\n    function transferLendingToken(\\n        address lendingToken,\\n        address seeker,\\n        uint256 amount\\n    ) external;\\n\\n    function transferInvestmentToken(\\n        address investmentToken,\\n        address seeker,\\n        uint256 amount\\n    ) external;\\n\\n    function mintReputationalToken(address recipient, uint256 amount) external;\\n\\n    function burnReputationalToken(address from, uint256 amount) external;\\n\\n    function multiMintReputationalToken(address[] memory recipients, uint256[] memory amounts) external;\\n\\n    function burnFundingNFT(address account, uint256 investmentId, uint256 amount) external;\\n\\n}\\n\",\"keccak256\":\"0xd3ef7b84388624667aa8056bdd0dd6c01386d6b1f5f35d411ec6c5972eec9db9\",\"license\":\"MIT\"},\"contracts/staking/StakingDetails.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./StakingTypesAndStorage.sol\\\";\\n\\n/**\\n * @title Alliance Block Staking Details\\n * @dev Extends StakingTypesAndStorage\\n */\\ncontract StakingDetails is StakingTypesAndStorage {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Withdraw\\n     * @param staker_ the address of the staker\\n     * @param amount_ the amount of ALBT to withdraw\\n     */\\n    function _withdraw(address staker_, uint256 amount_) internal {\\n        totalSupply = totalSupply.sub(amount_);\\n        balance[staker_] = balance[staker_].sub(amount_);\\n        albt.safeTransfer(staker_, amount_);\\n        emit Withdrawn(staker_, amount_);\\n    }\\n\\n    /**\\n     * @notice Stake\\n     * @param staker_ the address of the staker\\n     * @param amount_ the amount of ALBT to withdraw\\n     */\\n    function _stake(address staker_, uint256 amount_) internal {\\n        albt.safeTransferFrom(staker_, address(this), amount_);\\n        totalSupply = totalSupply.add(amount_);\\n        balance[staker_] = balance[staker_].add(amount_);\\n        emit Staked(staker_, amount_);\\n    }\\n\\n    /**\\n     * @notice Get Balance\\n     * @dev Retrieves the staked balance for a given user\\n     * @param staker_ the address of the staker\\n     */\\n    function getBalance(address staker_) external view returns (uint256) {\\n        return balance[staker_];\\n    }\\n\\n    /**\\n     * @notice Get Amounts to Stake\\n     * @return stakerLvl1Amount Staker lvl 1 Amount\\n     * @return stakerLvl2Amount Staker lvl 2 Amount\\n     * @return stakerLvl3Amount Staker lvl 3 Amount\\n     */\\n    function getAmountsToStake()\\n        external\\n        view\\n        returns (\\n            uint256 stakerLvl1Amount,\\n            uint256 stakerLvl2Amount,\\n            uint256 stakerLvl3Amount\\n        )\\n    {\\n        stakerLvl1Amount = stakingTypeAmounts[uint256(StakingType.STAKER_LVL_1)];\\n        stakerLvl2Amount = stakingTypeAmounts[uint256(StakingType.STAKER_LVL_2)];\\n        stakerLvl3Amount = stakingTypeAmounts[uint256(StakingType.STAKER_LVL_3)];\\n    }\\n}\\n\",\"keccak256\":\"0xb660fdf549b495d741c6746714f2d4ddcfab5c1048de8698966e34d89300eaa0\",\"license\":\"MIT\"},\"contracts/staking/StakingTypesAndStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"../interfaces/IEscrow.sol\\\";\\nimport \\\"../interfaces/IERC1155StakerNFT.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title AllianceBlock StakingStorage contract\\n * @notice Responsible for staking storage\\n */\\ncontract StakingTypesAndStorage {\\n    enum StakingType {STAKER_LVL_0, STAKER_LVL_1, STAKER_LVL_2, STAKER_LVL_3}\\n\\n    // ALBT token\\n    IERC20 public albt;\\n    IEscrow public escrow;\\n    IERC1155StakerNFT public stakerMedalNFT;\\n\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balance;\\n    mapping(uint256 => uint256) public stakingTypeAmounts; // Amounts required for each staking type.\\n    mapping(uint256 => uint256) public reputationalStakingTypeAmounts; // Amounts of rALBT provided for each staking type.\\n\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n}\\n\",\"keccak256\":\"0x4693e547eb983bb84c711bb335b6661754c113c7fc1ba8db656cc52d78df9b06\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063b800361111610097578063e9fad8ee11610066578063e9fad8ee14610356578063f2fde38b1461035e578063f8b2cb4f14610384578063ffa3151f146103aa57610100565b8063b8003611146102fa578063db31af4514610302578063e2fdcc1714610328578063e3d670d71461033057610100565b8063715018a6116100d3578063715018a61461018257806387335c7d1461018a57806387a02172146102d25780638da5cb5b146102f257610100565b806318160ddd14610105578063604f21771461011f57806363e80329146101415780636c61d1cc14610165575b600080fd5b61010d6103c7565b60408051918252519081900360200190f35b61013f6004803603602081101561013557600080fd5b503560ff166103cd565b005b610149610597565b604080516001600160a01b039092168252519081900360200190f35b61010d6004803603602081101561017b57600080fd5b50356105a6565b61013f6105b8565b61013f600480360360a08110156101a057600080fd5b6001600160a01b03823581169260208101358216926040820135909216918101906080810160608201356401000000008111156101dc57600080fd5b8201836020820111156101ee57600080fd5b8035906020019184602083028401116401000000008311171561021057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561026057600080fd5b82018360208201111561027257600080fd5b8035906020019184602083028401116401000000008311171561029457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610676945050505050565b61013f600480360360208110156102e857600080fd5b503560ff16610927565b610149610a7e565b610149610a8d565b61030a610a9c565b60408051938452602084019290925282820152519081900360600190f35b610149610b13565b61010d6004803603602081101561034657600080fd5b50356001600160a01b0316610b22565b61013f610b34565b61013f6004803603602081101561037457600080fd5b50356001600160a01b0316610bda565b61010d6004803603602081101561039a57600080fd5b50356001600160a01b0316610cef565b61010d600480360360208110156103c057600080fd5b5035610d0e565b60035481565b6002606c541415610425576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002606c5580600381111561043657fe5b610487576040805162461bcd60e51b815260206004820152601a60248201527f43616e6e6f74207374616b6520666f722074797065207a65726f000000000000604482015290519081900360640190fd5b6005600082600381111561049757fe5b815260208082019290925260409081016000908120543382526004909352205410610509576040805162461bcd60e51b815260206004820181905260248201527f43616e6e6f74207374616b6520666f722073616d65207479706520616761696e604482015290519081900360640190fd5b60006005600083600381111561051b57fe5b8152602001908152602001600020549050600061053733610d20565b905061054f338285600381111561054a57fe5b610d72565b610565338285600381111561056057fe5b610e7d565b33600090815260046020526040812054610580908490610f75565b905061058c3382610fd7565b50506001606c555050565b6000546001600160a01b031681565b60066020526000908152604090205481565b6105c0611078565b6001600160a01b03166105d1610a7e565b6001600160a01b03161461062c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b603a546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603a80546001600160a01b0319169055565b600754610100900460ff168061068f575061068f61107c565b8061069d575060075460ff16155b6106d85760405162461bcd60e51b815260040180806020018281038252602e815260200180611948602e913960400191505060405180910390fd5b600754610100900460ff16158015610703576007805460ff1961ff0019909116610100171660011790555b6001600160a01b0386166107485760405162461bcd60e51b81526004018080602001828103825260258152602001806119ca6025913960400191505060405180910390fd5b6001600160a01b03851661078d5760405162461bcd60e51b81526004018080602001828103825260288152602001806119766028913960400191505060405180910390fd5b6001600160a01b0384166107d25760405162461bcd60e51b81526004018080602001828103825260308152602001806118cc6030913960400191505060405180910390fd5b825161080f5760405162461bcd60e51b815260040180806020018281038252602c81526020018061199e602c913960400191505060405180910390fd5b815161084c5760405162461bcd60e51b81526004018080602001828103825260388152602001806119ef6038913960400191505060405180910390fd5b61085461108d565b61085c61113f565b600080546001600160a01b038089166001600160a01b03199283161783556001805489831690841617905560028054918816919092161790555b83518110156108cf578381815181106108ab57fe5b60209081029190910181015160008381526005909252604090912055600101610896565b5060005b825181101561090c578281815181106108e857fe5b602090810291909101810151600083815260069092526040909120556001016108d3565b50801561091f576007805461ff00191690555b505050505050565b6002606c54141561097f576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002606c556005600082600381111561099457fe5b815260208082019290925260409081016000908120543382526004909352205411610a06576040805162461bcd60e51b815260206004820152601c60248201527f43616e206f6e6c792064726f7020746f206c6f776572206c6576656c00000000604482015290519081900360640190fd5b6000610a1133610d20565b9050600060056000846003811115610a2557fe5b8152602001908152602001600020549050610a47338385600381111561054a57fe5b610a58338385600381111561056057fe5b33600090815260046020526040812054610a729083610f75565b905061058c33826111d4565b603a546001600160a01b031690565b6002546001600160a01b031681565b60056020527f1471eb6eb2c5e789fc3de43f8ce62938c7d1836ec861730447e2ada8fd81017b547f89832631fb3c3307a103ba2c84ab569c64d6182a18893dcd163f0f1c2090733a5460036000527fa9bc9a3a348c357ba16b37005d7e6b3236198c0e939f4af8c5f19b8deeb8ebc0549192909190565b6001546001600160a01b031681565b60046020526000908152604090205481565b6002606c541415610b8c576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002606c556000610b9c33610d20565b9050610baa33826000610d72565b610bb633826000610e7d565b3360008181526004602052604090205490610bd190826111d4565b50506001606c55565b610be2611078565b6001600160a01b0316610bf3610a7e565b6001600160a01b031614610c4e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610c935760405162461bcd60e51b81526004018080602001828103825260268152602001806118fc6026913960400191505060405180910390fd5b603a546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603a80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600460205260409020545b919050565b60056020526000908152604090205481565b6000805b6004811015610d69576000818152600560209081526040808320546001600160a01b03871684526004909252909120541415610d61579050610d09565b600101610d24565b50600092915050565b80821015610dfb576000610d868284611275565b6001546040805163d017797960e01b81526001600160a01b03888116600483015260248201859052915193945091169163d01779799160448082019260009290919082900301818387803b158015610ddd57600080fd5b505af1158015610df1573d6000803e3d6000fd5b5050505050610e78565b6000610e078383611275565b60015460408051634e391f3d60e01b81526001600160a01b038881166004830152602482018590529151939450911691634e391f3d9160448082019260009290919082900301818387803b158015610e5e57600080fd5b505af1158015610e72573d6000803e3d6000fd5b50505050505b505050565b8015610ef157600254604080516340c10f1960e01b81526001600160a01b03868116600483015260248201859052915191909216916340c10f1991604480830192600092919082900301818387803b158015610ed857600080fd5b505af1158015610eec573d6000803e3d6000fd5b505050505b6000821180610efe575080155b15610e785760025460408051632770a7eb60e21b81526001600160a01b0386811660048301526024820186905291519190921691639dc29fac91604480830192600092919082900301818387803b158015610f5857600080fd5b505af1158015610f6c573d6000803e3d6000fd5b50505050505050565b600082821115610fcc576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b508082035b92915050565b600054610fef906001600160a01b03168330846112b7565b600354610ffc9082611317565b6003556001600160a01b0382166000908152600460205260409020546110229082611317565b6001600160a01b038316600081815260046020908152604091829020939093558051848152905191927f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d92918290030190a25050565b3390565b600061108730611371565b15905090565b600754610100900460ff16806110a657506110a661107c565b806110b4575060075460ff16155b6110ef5760405162461bcd60e51b815260040180806020018281038252602e815260200180611948602e913960400191505060405180910390fd5b600754610100900460ff1615801561111a576007805460ff1961ff0019909116610100171660011790555b611122611377565b61112a611417565b801561113c576007805461ff00191690555b50565b600754610100900460ff1680611158575061115861107c565b80611166575060075460ff16155b6111a15760405162461bcd60e51b815260040180806020018281038252602e815260200180611948602e913960400191505060405180910390fd5b600754610100900460ff161580156111cc576007805460ff1961ff0019909116610100171660011790555b61112a611510565b6003546111e19082610f75565b6003556001600160a01b0382166000908152600460205260409020546112079082610f75565b6001600160a01b038084166000908152600460205260408120929092559054611232911683836115b6565b6040805182815290516001600160a01b038416917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a25050565b6000816112915750600082815260066020526040902054610fd1565b600082815260066020526040808220548583529120546112b091610f75565b9392505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611311908590611604565b50505050565b6000828201838110156112b0576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3b151590565b600754610100900460ff1680611390575061139061107c565b8061139e575060075460ff16155b6113d95760405162461bcd60e51b815260040180806020018281038252602e815260200180611948602e913960400191505060405180910390fd5b600754610100900460ff1615801561112a576007805460ff1961ff001990911661010017166001179055801561113c576007805461ff001916905550565b600754610100900460ff1680611430575061143061107c565b8061143e575060075460ff16155b6114795760405162461bcd60e51b815260040180806020018281038252602e815260200180611948602e913960400191505060405180910390fd5b600754610100900460ff161580156114a4576007805460ff1961ff0019909116610100171660011790555b60006114ae611078565b603a80546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350801561113c576007805461ff001916905550565b600754610100900460ff1680611529575061152961107c565b80611537575060075460ff16155b6115725760405162461bcd60e51b815260040180806020018281038252602e815260200180611948602e913960400191505060405180910390fd5b600754610100900460ff1615801561159d576007805460ff1961ff0019909116610100171660011790555b6001606c55801561113c576007805461ff001916905550565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610e789084905b6000611659826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166116b59092919063ffffffff16565b805190915015610e785780806020019051602081101561167857600080fd5b5051610e785760405162461bcd60e51b815260040180806020018281038252602a815260200180611a27602a913960400191505060405180910390fd5b60606116c484846000856116cc565b949350505050565b60608247101561170d5760405162461bcd60e51b81526004018080602001828103825260268152602001806119226026913960400191505060405180910390fd5b61171685611371565b611767576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106117a55780518252601f199092019160209182019101611786565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611807576040519150601f19603f3d011682016040523d82523d6000602084013e61180c565b606091505b509150915061181c828286611827565b979650505050505050565b606083156118365750816112b0565b8251156118465782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611890578181015183820152602001611878565b50505050905090810190601f1680156118bd5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe43616e6e6f7420696e697469616c697a65207374616b65724d6564616c4e46545f2077697468203020616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656443616e6e6f7420696e697469616c697a6520657363726f775f20776974682030206164647265737343616e6e6f7420696e697469616c697a65207374616b696e6754797065416d6f756e74735f2077697468203043616e6e6f7420696e697469616c697a6520616c627420776974682030206164647265737343616e6e6f7420696e697469616c697a652072657075746174696f6e616c5374616b696e6754797065416d6f756e74735f207769746820305361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220eb675c2ce70168a0bbc0e74fce8d667efb67b83c6ebffa1a1454d82a8b04ac3264736f6c63430007060033",
  "devdoc": {
    "details": "Extends  Initializable, StakingDetails, OwnableUpgradeable",
    "kind": "dev",
    "methods": {
      "exit()": {
        "details": "msg.sender withdraws and exits"
      },
      "getAmountsToStake()": {
        "returns": {
          "stakerLvl1Amount": "Staker lvl 1 Amount",
          "stakerLvl2Amount": "Staker lvl 2 Amount",
          "stakerLvl3Amount": "Staker lvl 3 Amount"
        }
      },
      "getBalance(address)": {
        "details": "Retrieves the staked balance for a given user",
        "params": {
          "staker_": "the address of the staker"
        }
      },
      "initialize(address,address,address,uint256[],uint256[])": {
        "details": "Initialize of the contract.",
        "params": {
          "albt_": "the albt IERC20 token",
          "escrow_": "the escrow address",
          "reputationalStakingTypeAmounts_": "the array of Reputation Staking Type Amounts",
          "stakingTypeAmounts_": "the array of Staking Type Amounts"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "stake(uint8)": {
        "details": "requires not Delegator and cannot repeat staking type",
        "params": {
          "stakingType": "The staking type"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstake(uint8)": {
        "details": "msg.sender withdraws till reaching stakingType",
        "params": {
          "stakingType": "The staking type to drop to"
        }
      }
    },
    "title": "AllianceBlock Staking contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "exit()": {
        "notice": "Exit"
      },
      "getAmountsToStake()": {
        "notice": "Get Amounts to Stake"
      },
      "getBalance(address)": {
        "notice": "Get Balance"
      },
      "initialize(address,address,address,uint256[],uint256[])": {
        "notice": "Initialize"
      },
      "stake(uint8)": {
        "notice": "Stake"
      },
      "unstake(uint8)": {
        "notice": "Unstake"
      }
    },
    "notice": "Responsible for ALBT Staking",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15995,
        "contract": "contracts/Staking.sol:Staking",
        "label": "albt",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)4769"
      },
      {
        "astId": 15997,
        "contract": "contracts/Staking.sol:Staking",
        "label": "escrow",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IEscrow)9553"
      },
      {
        "astId": 15999,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakerMedalNFT",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC1155StakerNFT)9381"
      },
      {
        "astId": 16001,
        "contract": "contracts/Staking.sol:Staking",
        "label": "totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 16005,
        "contract": "contracts/Staking.sol:Staking",
        "label": "balance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16009,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakingTypeAmounts",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 16013,
        "contract": "contracts/Staking.sol:Staking",
        "label": "reputationalStakingTypeAmounts",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 890,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_initialized",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 893,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_initializing",
        "offset": 1,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 2584,
        "contract": "contracts/Staking.sol:Staking",
        "label": "__gap",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_owner",
        "offset": 0,
        "slot": "58",
        "type": "t_address"
      },
      {
        "astId": 440,
        "contract": "contracts/Staking.sol:Staking",
        "label": "__gap",
        "offset": 0,
        "slot": "59",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3091,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_status",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 3134,
        "contract": "contracts/Staking.sol:Staking",
        "label": "__gap",
        "offset": 0,
        "slot": "109",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC1155StakerNFT)9381": {
        "encoding": "inplace",
        "label": "contract IERC1155StakerNFT",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)4769": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IEscrow)9553": {
        "encoding": "inplace",
        "label": "contract IEscrow",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}