{
  "address": "0x772b615D062F2Fff3cED4C210B7c51a67BF3aC83",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "albt",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrow",
      "outputs": [
        {
          "internalType": "contract IEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAmountsToStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "stakerLvl1Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakerLvl2Amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stakerLvl3Amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "staker_",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getEligibilityForActionProvision",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "albt_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "escrow_",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "stakingTypeAmounts_",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "reputationalStakingTypeAmounts_",
          "type": "uint256[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reputationalStakingTypeAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum StakingTypesAndStorage.StakingType",
          "name": "stakingType",
          "type": "uint8"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakingTypeAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum StakingTypesAndStorage.StakingType",
          "name": "stakingType",
          "type": "uint8"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x791e78c2b186a00a58839fc5923ce928079ce2b390d8b27abe3ba0cecae8129a",
  "receipt": {
    "to": null,
    "from": "0xB29aE9a9BF7CA2984a6a09939e49d9Cf46AB0c1d",
    "contractAddress": "0x772b615D062F2Fff3cED4C210B7c51a67BF3aC83",
    "transactionIndex": 4,
    "gasUsed": "1102420",
    "logsBloom": "0x
    "blockHash": "0xb3df659da8a6d5e7bb63c98931cd0898b6d126862de47aafa9633a20d47e8722",
    "transactionHash": "0x791e78c2b186a00a58839fc5923ce928079ce2b390d8b27abe3ba0cecae8129a",
    "logs": [],
    "blockNumber": 8775465,
    "cumulativeGasUsed": "2947195",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "77418e487aa49c62cd8713bd4061a191",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"albt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"internalType\":\"contract IEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAmountsToStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakerLvl1Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakerLvl2Amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakerLvl3Amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker_\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getEligibilityForActionProvision\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"albt_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"escrow_\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"stakingTypeAmounts_\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"reputationalStakingTypeAmounts_\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reputationalStakingTypeAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StakingTypesAndStorage.StakingType\",\"name\":\"stakingType\",\"type\":\"uint8\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingTypeAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum StakingTypesAndStorage.StakingType\",\"name\":\"stakingType\",\"type\":\"uint8\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extends  Initializable, StakingDetails, OwnableUpgradeable\",\"kind\":\"dev\",\"methods\":{\"exit()\":{\"details\":\"msg.sender withdraws and exits\"},\"getAmountsToStake()\":{\"returns\":{\"stakerLvl1Amount\":\"Staker lvl 1 Amount\",\"stakerLvl2Amount\":\"Staker lvl 2 Amount\",\"stakerLvl3Amount\":\"Staker lvl 3 Amount\"}},\"getBalance(address)\":{\"details\":\"Retrieves the staked balance for a given user\",\"params\":{\"staker_\":\"the address of the staker\"}},\"getEligibilityForActionProvision(address)\":{\"params\":{\"account\":\"The staker to check for\"}},\"initialize(address,address,uint256[],uint256[])\":{\"details\":\"Initialize of the contract.\",\"params\":{\"albt_\":\"the albt IERC20 token\",\"escrow_\":\"the escrow address\",\"reputationalStakingTypeAmounts_\":\"the array of Reputation Staking Type Amounts\",\"stakingTypeAmounts_\":\"the array of Staking Type Amounts\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"stake(uint8)\":{\"details\":\"requires not Delegator and cannot repeat staking type\",\"params\":{\"stakingType\":\"The staking type\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unstake(uint8)\":{\"details\":\"msg.sender withdraws till reaching stakingType\",\"params\":{\"stakingType\":\"The staking type to drop to\"}}},\"title\":\"AllianceBlock Staking contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"exit()\":{\"notice\":\"Exit\"},\"getAmountsToStake()\":{\"notice\":\"Get Amounts to Stake\"},\"getBalance(address)\":{\"notice\":\"Get Balance\"},\"getEligibilityForActionProvision(address)\":{\"notice\":\"Returns true if account is staker Lvl2 or more\"},\"initialize(address,address,uint256[],uint256[])\":{\"notice\":\"Initialize\"},\"stake(uint8)\":{\"notice\":\"Stake\"},\"unstake(uint8)\":{\"notice\":\"Unstake\"}},\"notice\":\"Responsible for ALBT Staking\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"./staking/StakingDetails.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @title AllianceBlock Staking contract\\n * @notice Responsible for ALBT Staking\\n * @dev Extends  Initializable, StakingDetails, OwnableUpgradeable\\n */\\ncontract Staking is Initializable, StakingDetails, OwnableUpgradeable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice Initialize\\n     * @dev Initialize of the contract.\\n     * @param albt_ the albt IERC20 token\\n     * @param escrow_ the escrow address\\n     * @param stakingTypeAmounts_ the array of Staking Type Amounts\\n     * @param reputationalStakingTypeAmounts_ the array of Reputation Staking Type Amounts\\n     */\\n    function initialize(\\n        IERC20 albt_,\\n        address escrow_,\\n        uint256[] memory stakingTypeAmounts_,\\n        uint256[] memory reputationalStakingTypeAmounts_\\n    ) public initializer {\\n        __Ownable_init();\\n        albt = albt_;\\n        escrow = IEscrow(escrow_);\\n\\n        for (uint256 i = 0; i < stakingTypeAmounts_.length; i++) {\\n            stakingTypeAmounts[i] = stakingTypeAmounts_[i];\\n        }\\n\\n        for (uint256 i = 0; i < reputationalStakingTypeAmounts_.length; i++) {\\n            reputationalStakingTypeAmounts[i] = reputationalStakingTypeAmounts_[i];\\n        }\\n    }\\n\\n    /**\\n     * @notice Stake\\n     * @param stakingType The staking type\\n     * @dev requires not Delegator and cannot repeat staking type\\n     */\\n    function stake(StakingType stakingType) public {\\n        require(balance[msg.sender] < stakingTypeAmounts[uint256(stakingType)], \\\"Cannot stake for same type again\\\");\\n        uint256 amount = stakingTypeAmounts[uint256(stakingType)];\\n\\n        uint256 stakingTypeIndex = _getStakingType(msg.sender);\\n\\n        _applyReputation(msg.sender, stakingTypeIndex, uint256(stakingType).add(1));\\n\\n        uint256 amountToStake = amount.sub(balance[msg.sender]);\\n        _stake(msg.sender, amountToStake);\\n        emit Staked(msg.sender, amountToStake);\\n    }\\n\\n    /**\\n     * @notice Unstake\\n     * @param stakingType The staking type to drop to\\n     * @dev msg.sender withdraws till reaching stakingType\\n     */\\n    function unstake(StakingType stakingType) external {\\n        require(balance[msg.sender] > stakingTypeAmounts[uint256(stakingType)], \\\"Can only drop to lower level\\\");\\n\\n        uint256 stakingTypeIndex = _getStakingType(msg.sender);\\n        uint256 amount = stakingTypeAmounts[uint256(stakingType)];\\n\\n        _applyReputation(msg.sender, stakingTypeIndex, uint256(stakingType).add(1));\\n\\n        uint256 amountToWithdraw = balance[msg.sender].sub(amount);\\n        _withdraw(msg.sender, amountToWithdraw);\\n    }\\n\\n    /**\\n     * @notice Exit\\n     * @dev msg.sender withdraws and exits\\n     */\\n    function exit() external {\\n        uint256 stakingTypeIndex = _getStakingType(msg.sender);\\n\\n        _applyReputation(msg.sender, stakingTypeIndex, 0);\\n\\n        uint256 amountToWithdraw = balance[msg.sender];\\n\\n        _withdraw(msg.sender, amountToWithdraw);\\n    }\\n\\n    /**\\n     * @notice Returns true if account is staker Lvl2 or more\\n     * @param account The staker to check for\\n     */\\n    function getEligibilityForActionProvision(address account) external view returns (bool) {\\n        if (balance[account] >= stakingTypeAmounts[1]) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Get Staking Type\\n     * @param account the address\\n     * @return the staking type\\n     */\\n    function _getStakingType(address account) internal view returns (uint256) {\\n        for (uint256 i = 0; i < 3; i++) {\\n            if (balance[account] == stakingTypeAmounts[i]) {\\n                return i.add(1);\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Apply Reputation\\n     * @param account the address\\n     * @param previousLevelIndex The index of the previous level\\n     * @param newLevelIndex the index for the new level\\n     */\\n    function _applyReputation(\\n        address account,\\n        uint256 previousLevelIndex,\\n        uint256 newLevelIndex\\n    ) internal {\\n        if (previousLevelIndex < newLevelIndex) {\\n            uint256 amountToMint = _findAmount(newLevelIndex, previousLevelIndex);\\n            escrow.mintReputationalToken(account, amountToMint);\\n        } else {\\n            uint256 amountToBurn = _findAmount(previousLevelIndex, newLevelIndex);\\n            escrow.burnReputationalToken(account, amountToBurn);\\n        }\\n    }\\n\\n    /**\\n     * @notice Find Amount\\n     * @param bigIndex ???\\n     * @param smallIndex ???\\n     * @return amount of reputation\\n     */\\n    function _findAmount(uint256 bigIndex, uint256 smallIndex) internal view returns (uint256 amount) {\\n        if (smallIndex == 0) {\\n            amount = reputationalStakingTypeAmounts[bigIndex.sub(1)];\\n        } else {\\n            amount = reputationalStakingTypeAmounts[bigIndex.sub(1)].sub(\\n                reputationalStakingTypeAmounts[smallIndex.sub(1)]\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8a83ba58fe565cd328f049f99d445d76736baf929ed79fce16ff349e4fdfe9d9\",\"license\":\"MIT\"},\"contracts/interfaces/IEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title Interface of the Escrow.\\n */\\ninterface IEscrow {\\n    function receiveFunding(uint256 loanId, uint256 amount) external;\\n\\n    function transferFundingNFT(\\n        uint256 investmentId,\\n        uint256 partitionsPurchased,\\n        address receiver\\n    ) external;\\n\\n    function transferLendingToken(address seeker, uint256 amount) external;\\n\\n    function transferProjectToken(\\n        address projectToken,\\n        address seeker,\\n        uint256 amount\\n    ) external;\\n\\n    function mintReputationalToken(address recipient, uint256 amount) external;\\n\\n    function burnReputationalToken(address from, uint256 amount) external;\\n\\n    function multiMintReputationalToken(address[] memory recipients, uint256[] memory amounts) external;\\n}\\n\",\"keccak256\":\"0x035ea4ceee242bd73e24b82cb28c4c9d5dc6e0a2019afb099bd6047f8cbba91f\",\"license\":\"MIT\"},\"contracts/staking/StakingDetails.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./StakingTypesAndStorage.sol\\\";\\n\\n/**\\n * @title Alliance Block Staking Details\\n * @dev Extends StakingTypesAndStorage\\n */\\ncontract StakingDetails is StakingTypesAndStorage {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice Withdraw\\n     * @param staker_ the address of the staker\\n     * @param amount_ the amount of ALBT to withdraw\\n     */\\n    function _withdraw(address staker_, uint256 amount_) internal {\\n        totalSupply = totalSupply.sub(amount_);\\n        balance[staker_] = balance[staker_].sub(amount_);\\n        albt.transfer(staker_, amount_);\\n        emit Withdrawn(staker_, amount_);\\n    }\\n\\n    /**\\n     * @notice Stake\\n     * @param staker_ the address of the staker\\n     * @param amount_ the amount of ALBT to withdraw\\n     */\\n    function _stake(address staker_, uint256 amount_) internal {\\n        albt.transferFrom(staker_, address(this), amount_);\\n        totalSupply = totalSupply.add(amount_);\\n        balance[staker_] = balance[staker_].add(amount_);\\n        emit Staked(staker_, amount_);\\n    }\\n\\n    /**\\n     * @notice Get Balance\\n     * @dev Retrieves the staked balance for a given user\\n     * @param staker_ the address of the staker\\n     */\\n    function getBalance(address staker_) external view returns (uint256) {\\n        return balance[staker_];\\n    }\\n\\n    /**\\n     * @notice Get Amounts to Stake\\n     * @return stakerLvl1Amount Staker lvl 1 Amount\\n     * @return stakerLvl2Amount Staker lvl 2 Amount\\n     * @return stakerLvl3Amount Staker lvl 3 Amount\\n     */\\n    function getAmountsToStake()\\n        external\\n        view\\n        returns (\\n            uint256 stakerLvl1Amount,\\n            uint256 stakerLvl2Amount,\\n            uint256 stakerLvl3Amount\\n        )\\n    {\\n        stakerLvl1Amount = stakingTypeAmounts[uint256(StakingType.STAKER_LVL_1)];\\n        stakerLvl2Amount = stakingTypeAmounts[uint256(StakingType.STAKER_LVL_2)];\\n        stakerLvl3Amount = stakingTypeAmounts[uint256(StakingType.STAKER_LVL_3)];\\n    }\\n}\\n\",\"keccak256\":\"0x1d1bad530284cb6c32a8ec98720f2cf8a3f6d4ec21e77907eb9f43f635c9c638\",\"license\":\"MIT\"},\"contracts/staking/StakingTypesAndStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../interfaces/IEscrow.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title AllianceBlock StakingStorage contract\\n * @notice Responsible for staking storage\\n */\\ncontract StakingTypesAndStorage {\\n    enum StakingType {STAKER_LVL_1, STAKER_LVL_2, STAKER_LVL_3}\\n\\n    // ALBT token\\n    IERC20 public albt;\\n    IEscrow public escrow;\\n\\n    uint256 public totalSupply;\\n    mapping(address => uint256) public balance;\\n    mapping(uint256 => uint256) public stakingTypeAmounts; // Amounts required for each staking type.\\n    mapping(uint256 => uint256) public reputationalStakingTypeAmounts; // Amounts of rALBT provided for each staking type.\\n\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n}\\n\",\"keccak256\":\"0xee1ff5f568b44a3793e1112d1a37778ae03d9f71163ac69f0c5a17e10836efa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506112fc806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063e9fad8ee11610066578063e9fad8ee14610380578063f2fde38b14610388578063f8b2cb4f146103ae578063ffa3151f146103d457610100565b80638da5cb5b14610324578063db31af451461032c578063e2fdcc1714610352578063e3d670d71461035a57610100565b806363e80329116100d357806363e80329146102bb5780636c61d1cc146102df578063715018a6146102fc57806387a021721461030457610100565b80630d9ab8211461010557806318160ddd1461013f57806327e7036414610159578063604f21771461029b575b600080fd5b61012b6004803603602081101561011b57600080fd5b50356001600160a01b03166103f1565b604080519115158252519081900360200190f35b610147610444565b60408051918252519081900360200190f35b6102996004803603608081101561016f57600080fd5b6001600160a01b0382358116926020810135909116918101906060810160408201356401000000008111156101a357600080fd5b8201836020820111156101b557600080fd5b803590602001918460208302840111640100000000831117156101d757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561022757600080fd5b82018360208201111561023957600080fd5b8035906020019184602083028401116401000000008311171561025b57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061044a945050505050565b005b610299600480360360208110156102b157600080fd5b503560ff1661059c565b6102c36106d2565b604080516001600160a01b039092168252519081900360200190f35b610147600480360360208110156102f557600080fd5b50356106e1565b6102996106f3565b6102996004803603602081101561031a57600080fd5b503560ff166107b1565b6102c36108a5565b6103346108b4565b60408051938452602084019290925282820152519081900360600190f35b6102c361092b565b6101476004803603602081101561037057600080fd5b50356001600160a01b031661093a565b61029961094c565b6102996004803603602081101561039e57600080fd5b50356001600160a01b0316610984565b610147600480360360208110156103c457600080fd5b50356001600160a01b0316610a99565b610147600480360360208110156103ea57600080fd5b5035610ab4565b7fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe05546001600160a01b03821660009081526003602052604081205490911161043b5750600161043f565b5060005b919050565b60025481565b600654610100900460ff16806104635750610463610ac6565b80610471575060065460ff16155b6104ac5760405162461bcd60e51b815260040180806020018281038252602e815260200180611299602e913960400191505060405180910390fd5b600654610100900460ff161580156104d7576006805460ff1961ff0019909116610100171660011790555b6104df610ad7565b600080546001600160a01b038088166001600160a01b031992831617835560018054918816919092161790555b83518110156105455783818151811061052157fe5b6020908102919091018101516000838152600490925260409091205560010161050c565b5060005b82518110156105825782818151811061055e57fe5b60209081029190910181015160008381526005909252604090912055600101610549565b508015610595576006805461ff00191690555b5050505050565b600460008260028111156105ac57fe5b81526020808201929092526040908101600090812054338252600390935220541061061e576040805162461bcd60e51b815260206004820181905260248201527f43616e6e6f74207374616b6520666f722073616d65207479706520616761696e604482015290519081900360640190fd5b60006004600083600281111561063057fe5b8152602001908152602001600020549050600061064c33610b89565b905061066f338261066a600187600281111561066457fe5b90610be7565b610c4a565b3360009081526003602052604081205461068a908490610d55565b90506106963382610d97565b60408051828152905133917f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d919081900360200190a250505050565b6000546001600160a01b031681565b60056020526000908152604090205481565b6106fb610eab565b6001600160a01b031661070c6108a5565b6001600160a01b031614610767576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6039546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603980546001600160a01b0319169055565b600460008260028111156107c157fe5b815260208082019290925260409081016000908120543382526003909352205411610833576040805162461bcd60e51b815260206004820152601c60248201527f43616e206f6e6c792064726f7020746f206c6f776572206c6576656c00000000604482015290519081900360640190fd5b600061083e33610b89565b905060006004600084600281111561085257fe5b8152602001908152602001600020549050610879338361066a600187600281111561066457fe5b336000908152600360205260408120546108939083610d55565b905061089f3382610eaf565b50505050565b6039546001600160a01b031690565b60046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec547fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe055460026000527f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a7549192909190565b6001546001600160a01b031681565b60036020526000908152604090205481565b600061095733610b89565b905061096533826000610c4a565b33600081815260036020526040902054906109809082610eaf565b5050565b61098c610eab565b6001600160a01b031661099d6108a5565b6001600160a01b0316146109f8576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610a3d5760405162461bcd60e51b81526004018080602001828103825260268152602001806112736026913960400191505060405180910390fd5b6039546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603980546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b031660009081526003602052604090205490565b60046020526000908152604090205481565b6000610ad130610fba565b15905090565b600654610100900460ff1680610af05750610af0610ac6565b80610afe575060065460ff16155b610b395760405162461bcd60e51b815260040180806020018281038252602e815260200180611299602e913960400191505060405180910390fd5b600654610100900460ff16158015610b64576006805460ff1961ff0019909116610100171660011790555b610b6c610fc0565b610b74611060565b8015610b86576006805461ff00191690555b50565b6000805b6003811015610bde576000818152600460209081526040808320546001600160a01b03871684526003909252909120541415610bd657610bce816001610be7565b91505061043f565b600101610b8d565b50600092915050565b600082820183811015610c41576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b80821015610cd3576000610c5e8284611159565b6001546040805163d017797960e01b81526001600160a01b03888116600483015260248201859052915193945091169163d01779799160448082019260009290919082900301818387803b158015610cb557600080fd5b505af1158015610cc9573d6000803e3d6000fd5b5050505050610d50565b6000610cdf8383611159565b60015460408051634e391f3d60e01b81526001600160a01b038881166004830152602482018590529151939450911691634e391f3d9160448082019260009290919082900301818387803b158015610d3657600080fd5b505af1158015610d4a573d6000803e3d6000fd5b50505050505b505050565b6000610c4183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506111db565b60008054604080516323b872dd60e01b81526001600160a01b03868116600483015230602483015260448201869052915191909216926323b872dd92606480820193602093909283900390910190829087803b158015610df657600080fd5b505af1158015610e0a573d6000803e3d6000fd5b505050506040513d6020811015610e2057600080fd5b5050600254610e2f9082610be7565b6002556001600160a01b038216600090815260036020526040902054610e559082610be7565b6001600160a01b038316600081815260036020908152604091829020939093558051848152905191927f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d92918290030190a25050565b3390565b600254610ebc9082610d55565b6002556001600160a01b038216600090815260036020526040902054610ee29082610d55565b6001600160a01b038084166000818152600360209081526040808320959095558154855163a9059cbb60e01b81526004810194909452602484018790529451949093169363a9059cbb936044808501949193918390030190829087803b158015610f4b57600080fd5b505af1158015610f5f573d6000803e3d6000fd5b505050506040513d6020811015610f7557600080fd5b50506040805182815290516001600160a01b038416917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a25050565b3b151590565b600654610100900460ff1680610fd95750610fd9610ac6565b80610fe7575060065460ff16155b6110225760405162461bcd60e51b815260040180806020018281038252602e815260200180611299602e913960400191505060405180910390fd5b600654610100900460ff16158015610b74576006805460ff1961ff0019909116610100171660011790558015610b86576006805461ff001916905550565b600654610100900460ff16806110795750611079610ac6565b80611087575060065460ff16155b6110c25760405162461bcd60e51b815260040180806020018281038252602e815260200180611299602e913960400191505060405180910390fd5b600654610100900460ff161580156110ed576006805460ff1961ff0019909116610100171660011790555b60006110f7610eab565b603980546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610b86576006805461ff001916905550565b600081611185576005600061116f856001610d55565b8152602001908152602001600020549050610c44565b610c4160056000611197856001610d55565b815260200190815260200160002054600560006111be600188610d5590919063ffffffff16565b815260200190815260200160002054610d5590919063ffffffff16565b6000818484111561126a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561122f578181015183820152602001611217565b50505050905090810190601f16801561125c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564a26469706673582212202e34517718e8d3a5e8ddbf99989458fed9c9b4638cd0151a4e8d33557e1508d264736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063e9fad8ee11610066578063e9fad8ee14610380578063f2fde38b14610388578063f8b2cb4f146103ae578063ffa3151f146103d457610100565b80638da5cb5b14610324578063db31af451461032c578063e2fdcc1714610352578063e3d670d71461035a57610100565b806363e80329116100d357806363e80329146102bb5780636c61d1cc146102df578063715018a6146102fc57806387a021721461030457610100565b80630d9ab8211461010557806318160ddd1461013f57806327e7036414610159578063604f21771461029b575b600080fd5b61012b6004803603602081101561011b57600080fd5b50356001600160a01b03166103f1565b604080519115158252519081900360200190f35b610147610444565b60408051918252519081900360200190f35b6102996004803603608081101561016f57600080fd5b6001600160a01b0382358116926020810135909116918101906060810160408201356401000000008111156101a357600080fd5b8201836020820111156101b557600080fd5b803590602001918460208302840111640100000000831117156101d757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929594936020810193503591505064010000000081111561022757600080fd5b82018360208201111561023957600080fd5b8035906020019184602083028401116401000000008311171561025b57600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061044a945050505050565b005b610299600480360360208110156102b157600080fd5b503560ff1661059c565b6102c36106d2565b604080516001600160a01b039092168252519081900360200190f35b610147600480360360208110156102f557600080fd5b50356106e1565b6102996106f3565b6102996004803603602081101561031a57600080fd5b503560ff166107b1565b6102c36108a5565b6103346108b4565b60408051938452602084019290925282820152519081900360600190f35b6102c361092b565b6101476004803603602081101561037057600080fd5b50356001600160a01b031661093a565b61029961094c565b6102996004803603602081101561039e57600080fd5b50356001600160a01b0316610984565b610147600480360360208110156103c457600080fd5b50356001600160a01b0316610a99565b610147600480360360208110156103ea57600080fd5b5035610ab4565b7fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe05546001600160a01b03821660009081526003602052604081205490911161043b5750600161043f565b5060005b919050565b60025481565b600654610100900460ff16806104635750610463610ac6565b80610471575060065460ff16155b6104ac5760405162461bcd60e51b815260040180806020018281038252602e815260200180611299602e913960400191505060405180910390fd5b600654610100900460ff161580156104d7576006805460ff1961ff0019909116610100171660011790555b6104df610ad7565b600080546001600160a01b038088166001600160a01b031992831617835560018054918816919092161790555b83518110156105455783818151811061052157fe5b6020908102919091018101516000838152600490925260409091205560010161050c565b5060005b82518110156105825782818151811061055e57fe5b60209081029190910181015160008381526005909252604090912055600101610549565b508015610595576006805461ff00191690555b5050505050565b600460008260028111156105ac57fe5b81526020808201929092526040908101600090812054338252600390935220541061061e576040805162461bcd60e51b815260206004820181905260248201527f43616e6e6f74207374616b6520666f722073616d65207479706520616761696e604482015290519081900360640190fd5b60006004600083600281111561063057fe5b8152602001908152602001600020549050600061064c33610b89565b905061066f338261066a600187600281111561066457fe5b90610be7565b610c4a565b3360009081526003602052604081205461068a908490610d55565b90506106963382610d97565b60408051828152905133917f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d919081900360200190a250505050565b6000546001600160a01b031681565b60056020526000908152604090205481565b6106fb610eab565b6001600160a01b031661070c6108a5565b6001600160a01b031614610767576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6039546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603980546001600160a01b0319169055565b600460008260028111156107c157fe5b815260208082019290925260409081016000908120543382526003909352205411610833576040805162461bcd60e51b815260206004820152601c60248201527f43616e206f6e6c792064726f7020746f206c6f776572206c6576656c00000000604482015290519081900360640190fd5b600061083e33610b89565b905060006004600084600281111561085257fe5b8152602001908152602001600020549050610879338361066a600187600281111561066457fe5b336000908152600360205260408120546108939083610d55565b905061089f3382610eaf565b50505050565b6039546001600160a01b031690565b60046020527f17ef568e3e12ab5b9c7254a8d58478811de00f9e6eb34345acd53bf8fd09d3ec547fabd6e7cb50984ff9c2f3e18a2660c3353dadf4e3291deeb275dae2cd1e44fe055460026000527f91da3fd0782e51c6b3986e9e672fd566868e71f3dbc2d6c2cd6fbb3e361af2a7549192909190565b6001546001600160a01b031681565b60036020526000908152604090205481565b600061095733610b89565b905061096533826000610c4a565b33600081815260036020526040902054906109809082610eaf565b5050565b61098c610eab565b6001600160a01b031661099d6108a5565b6001600160a01b0316146109f8576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610a3d5760405162461bcd60e51b81526004018080602001828103825260268152602001806112736026913960400191505060405180910390fd5b6039546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603980546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b031660009081526003602052604090205490565b60046020526000908152604090205481565b6000610ad130610fba565b15905090565b600654610100900460ff1680610af05750610af0610ac6565b80610afe575060065460ff16155b610b395760405162461bcd60e51b815260040180806020018281038252602e815260200180611299602e913960400191505060405180910390fd5b600654610100900460ff16158015610b64576006805460ff1961ff0019909116610100171660011790555b610b6c610fc0565b610b74611060565b8015610b86576006805461ff00191690555b50565b6000805b6003811015610bde576000818152600460209081526040808320546001600160a01b03871684526003909252909120541415610bd657610bce816001610be7565b91505061043f565b600101610b8d565b50600092915050565b600082820183811015610c41576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b80821015610cd3576000610c5e8284611159565b6001546040805163d017797960e01b81526001600160a01b03888116600483015260248201859052915193945091169163d01779799160448082019260009290919082900301818387803b158015610cb557600080fd5b505af1158015610cc9573d6000803e3d6000fd5b5050505050610d50565b6000610cdf8383611159565b60015460408051634e391f3d60e01b81526001600160a01b038881166004830152602482018590529151939450911691634e391f3d9160448082019260009290919082900301818387803b158015610d3657600080fd5b505af1158015610d4a573d6000803e3d6000fd5b50505050505b505050565b6000610c4183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506111db565b60008054604080516323b872dd60e01b81526001600160a01b03868116600483015230602483015260448201869052915191909216926323b872dd92606480820193602093909283900390910190829087803b158015610df657600080fd5b505af1158015610e0a573d6000803e3d6000fd5b505050506040513d6020811015610e2057600080fd5b5050600254610e2f9082610be7565b6002556001600160a01b038216600090815260036020526040902054610e559082610be7565b6001600160a01b038316600081815260036020908152604091829020939093558051848152905191927f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d92918290030190a25050565b3390565b600254610ebc9082610d55565b6002556001600160a01b038216600090815260036020526040902054610ee29082610d55565b6001600160a01b038084166000818152600360209081526040808320959095558154855163a9059cbb60e01b81526004810194909452602484018790529451949093169363a9059cbb936044808501949193918390030190829087803b158015610f4b57600080fd5b505af1158015610f5f573d6000803e3d6000fd5b505050506040513d6020811015610f7557600080fd5b50506040805182815290516001600160a01b038416917f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5919081900360200190a25050565b3b151590565b600654610100900460ff1680610fd95750610fd9610ac6565b80610fe7575060065460ff16155b6110225760405162461bcd60e51b815260040180806020018281038252602e815260200180611299602e913960400191505060405180910390fd5b600654610100900460ff16158015610b74576006805460ff1961ff0019909116610100171660011790558015610b86576006805461ff001916905550565b600654610100900460ff16806110795750611079610ac6565b80611087575060065460ff16155b6110c25760405162461bcd60e51b815260040180806020018281038252602e815260200180611299602e913960400191505060405180910390fd5b600654610100900460ff161580156110ed576006805460ff1961ff0019909116610100171660011790555b60006110f7610eab565b603980546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610b86576006805461ff001916905550565b600081611185576005600061116f856001610d55565b8152602001908152602001600020549050610c44565b610c4160056000611197856001610d55565b815260200190815260200160002054600560006111be600188610d5590919063ffffffff16565b815260200190815260200160002054610d5590919063ffffffff16565b6000818484111561126a5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561122f578181015183820152602001611217565b50505050905090810190601f16801561125c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564a26469706673582212202e34517718e8d3a5e8ddbf99989458fed9c9b4638cd0151a4e8d33557e1508d264736f6c63430007060033",
  "devdoc": {
    "details": "Extends  Initializable, StakingDetails, OwnableUpgradeable",
    "kind": "dev",
    "methods": {
      "exit()": {
        "details": "msg.sender withdraws and exits"
      },
      "getAmountsToStake()": {
        "returns": {
          "stakerLvl1Amount": "Staker lvl 1 Amount",
          "stakerLvl2Amount": "Staker lvl 2 Amount",
          "stakerLvl3Amount": "Staker lvl 3 Amount"
        }
      },
      "getBalance(address)": {
        "details": "Retrieves the staked balance for a given user",
        "params": {
          "staker_": "the address of the staker"
        }
      },
      "getEligibilityForActionProvision(address)": {
        "params": {
          "account": "The staker to check for"
        }
      },
      "initialize(address,address,uint256[],uint256[])": {
        "details": "Initialize of the contract.",
        "params": {
          "albt_": "the albt IERC20 token",
          "escrow_": "the escrow address",
          "reputationalStakingTypeAmounts_": "the array of Reputation Staking Type Amounts",
          "stakingTypeAmounts_": "the array of Staking Type Amounts"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "stake(uint8)": {
        "details": "requires not Delegator and cannot repeat staking type",
        "params": {
          "stakingType": "The staking type"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unstake(uint8)": {
        "details": "msg.sender withdraws till reaching stakingType",
        "params": {
          "stakingType": "The staking type to drop to"
        }
      }
    },
    "title": "AllianceBlock Staking contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "exit()": {
        "notice": "Exit"
      },
      "getAmountsToStake()": {
        "notice": "Get Amounts to Stake"
      },
      "getBalance(address)": {
        "notice": "Get Balance"
      },
      "getEligibilityForActionProvision(address)": {
        "notice": "Returns true if account is staker Lvl2 or more"
      },
      "initialize(address,address,uint256[],uint256[])": {
        "notice": "Initialize"
      },
      "stake(uint8)": {
        "notice": "Stake"
      },
      "unstake(uint8)": {
        "notice": "Unstake"
      }
    },
    "notice": "Responsible for ALBT Staking",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11645,
        "contract": "contracts/Staking.sol:Staking",
        "label": "albt",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)4574"
      },
      {
        "astId": 11647,
        "contract": "contracts/Staking.sol:Staking",
        "label": "escrow",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IEscrow)8277"
      },
      {
        "astId": 11649,
        "contract": "contracts/Staking.sol:Staking",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 11653,
        "contract": "contracts/Staking.sol:Staking",
        "label": "balance",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11657,
        "contract": "contracts/Staking.sol:Staking",
        "label": "stakingTypeAmounts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 11661,
        "contract": "contracts/Staking.sol:Staking",
        "label": "reputationalStakingTypeAmounts",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 890,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_initialized",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 893,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_initializing",
        "offset": 1,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 2584,
        "contract": "contracts/Staking.sol:Staking",
        "label": "__gap",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/Staking.sol:Staking",
        "label": "_owner",
        "offset": 0,
        "slot": "57",
        "type": "t_address"
      },
      {
        "astId": 440,
        "contract": "contracts/Staking.sol:Staking",
        "label": "__gap",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)4574": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IEscrow)8277": {
        "encoding": "inplace",
        "label": "contract IEscrow",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}