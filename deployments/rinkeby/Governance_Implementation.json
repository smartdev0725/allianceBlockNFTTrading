{
  "address": "0xB6c84206E65a5deaD2E2A3B29F89Bdf9FfB9A326",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "ApprovalRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "projectAddress_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "InitGovernance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "decision",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "VotedForRequest",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "APPLICATIONS_FOR_INVESTMENT_DURATION",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LATE_APPLICATIONS_FOR_INVESTMENT_DURATION",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "__SuperGovernance_init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approvalRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "approvalsProvided",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isApproved",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isProcessed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkCronjobs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cronjobList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "head",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tail",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cronjobs",
      "outputs": [
        {
          "internalType": "enum GovernanceTypesAndStorage.CronjobType",
          "name": "cronjobType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superDelegator_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "applicationsForInvestmentDuration_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lateApplicationsForInvestmentDuration_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "projectManager_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectManager",
      "outputs": [
        {
          "internalType": "contract IProjectManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "requestApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "startLotteryPhase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "projectId",
          "type": "uint256"
        }
      ],
      "name": "storeInvestmentTriggering",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "superDelegator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "decision",
          "type": "bool"
        }
      ],
      "name": "superVoteForRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalApprovalRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCronjobs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "updatableVariables",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superDelegator_",
          "type": "address"
        }
      ],
      "name": "updateSuperDelegator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x36846e7f873f64745a914f1a9ba6f0a0d729954e6290323b60ec5915ad44eab4",
  "receipt": {
    "to": null,
    "from": "0x4C7B849e8F7c970744b4741BE35541E20990392d",
    "contractAddress": "0xB6c84206E65a5deaD2E2A3B29F89Bdf9FfB9A326",
    "transactionIndex": 6,
    "gasUsed": "1723897",
    "logsBloom": "0x
    "blockHash": "0x7f95a72ffa6a388b5743c33e04bd0ca9f1f71cfeead1153d920bcb89ee76158f",
    "transactionHash": "0x36846e7f873f64745a914f1a9ba6f0a0d729954e6290323b60ec5915ad44eab4",
    "logs": [],
    "blockNumber": 9132926,
    "cumulativeGasUsed": "2226410",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "2655e296375c08ec2ee94c1a605dd52e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ApprovalRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"projectAddress_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"InitGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"decision\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"VotedForRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APPLICATIONS_FOR_INVESTMENT_DURATION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LATE_APPLICATIONS_FOR_INVESTMENT_DURATION\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__SuperGovernance_init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvalRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approvalsProvided\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isProcessed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkCronjobs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cronjobList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tail\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cronjobs\",\"outputs\":[{\"internalType\":\"enum GovernanceTypesAndStorage.CronjobType\",\"name\":\"cronjobType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superDelegator_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"applicationsForInvestmentDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lateApplicationsForInvestmentDuration_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"projectManager_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectManager\",\"outputs\":[{\"internalType\":\"contract IProjectManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"requestApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"startLotteryPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"projectId\",\"type\":\"uint256\"}],\"name\":\"storeInvestmentTriggering\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superDelegator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"decision\",\"type\":\"bool\"}],\"name\":\"superVoteForRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalApprovalRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCronjobs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"updatableVariables\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superDelegator_\",\"type\":\"address\"}],\"name\":\"updateSuperDelegator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extends Initializable, SuperGovernance\",\"kind\":\"dev\",\"methods\":{\"checkCronjobs()\":{\"details\":\"Calls executeCronjob() at the most 1 cronJob per tx\"},\"initialize(address,uint256,uint256,address)\":{\"params\":{\"applicationsForInvestmentDuration_\":\"duration for applications for investment\",\"lateApplicationsForInvestmentDuration_\":\"duration for late applications for investment\",\"superDelegator_\":\"The address of the admin in charge during the first epoch\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requestApproval(uint256)\":{\"details\":\"Executes cronJob()\",\"params\":{\"projectId\":\"The id of the investment or investment to approve\"}},\"startLotteryPhase(uint256)\":{\"details\":\"First check if the lottery should start\",\"params\":{\"projectId\":\"The id of the project to update\"}},\"storeInvestmentTriggering(uint256)\":{\"details\":\"Adds cronJob\",\"params\":{\"projectId\":\"The id of the investment to store\"}},\"superVoteForRequest(uint256,bool)\":{\"details\":\"Executes cronJobrequires msg.sender to be Super Delegatorrequires current epoch to be 0 or 1\",\"params\":{\"decision\":\"the decision (Approve / Deny)\",\"requestId\":\"the Request ID\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateSuperDelegator(address)\":{\"details\":\"This function is used to update the superDelegator address.\",\"params\":{\"superDelegator_\":\"The address of the upgraded super delegator.\"}}},\"title\":\"AllianceBlock Governance contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkCronjobs()\":{\"notice\":\"Checks if needs to execute a DAO cronJob\"},\"initialize(address,uint256,uint256,address)\":{\"notice\":\"Initialize the contract.\"},\"requestApproval(uint256)\":{\"notice\":\"Request a investment or investment approval\"},\"startLotteryPhase(uint256)\":{\"notice\":\"Start lottery phase\"},\"storeInvestmentTriggering(uint256)\":{\"notice\":\"Stores Investment Duration\"},\"superVoteForRequest(uint256,bool)\":{\"notice\":\"Votes for Request\"},\"updateSuperDelegator(address)\":{\"notice\":\"Update Superdelegator\"}},\"notice\":\"Responsible for governing AllianceBlock's ecosystem\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Governance.sol\":\"Governance\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x46034cd5cca740f636345c8f7aebae0f78adfd4b70e31e6f888cccbe1086586e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/Governance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./governance/SuperGovernance.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IStaking.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\n/**\\n * @title AllianceBlock Governance contract\\n * @dev Extends Initializable, SuperGovernance\\n * @notice Responsible for governing AllianceBlock's ecosystem\\n */\\ncontract Governance is Initializable, SuperGovernance {\\n    using SafeMath for uint256;\\n    using DoubleLinkedList for DoubleLinkedList.LinkedList;\\n\\n    /**\\n     * @notice Initialize the contract.\\n     * @param superDelegator_ The address of the admin in charge during the first epoch\\n     * @param applicationsForInvestmentDuration_ duration for applications for investment\\n     * @param lateApplicationsForInvestmentDuration_ duration for late applications for investment\\n     */\\n    function initialize(\\n        address superDelegator_,\\n        uint256 applicationsForInvestmentDuration_,\\n        uint256 lateApplicationsForInvestmentDuration_,\\n        address projectManager_\\n    ) external initializer {\\n        require(superDelegator_ != address(0), \\\"Cannot initialize with 0 addresses\\\");\\n        require(applicationsForInvestmentDuration_ != 0, \\\"Cannot initialize applicationsForInvestmentDuration_ with 0\\\");\\n        require(lateApplicationsForInvestmentDuration_ != 0, \\\"Cannot initialize lateApplicationsForInvestmentDuration_ with 0\\\");\\n\\n        __SuperGovernance_init();\\n        \\n        projectManager = IProjectManager(projectManager_);\\n        superDelegator = superDelegator_;\\n\\n        updatableVariables[APPLICATIONS_FOR_INVESTMENT_DURATION] = applicationsForInvestmentDuration_;\\n        updatableVariables[LATE_APPLICATIONS_FOR_INVESTMENT_DURATION] = lateApplicationsForInvestmentDuration_;\\n    }\\n\\n    /**\\n     * @notice Update Superdelegator\\n     * @dev This function is used to update the superDelegator address.\\n     * @param superDelegator_ The address of the upgraded super delegator.\\n     */\\n    function updateSuperDelegator(address superDelegator_) external onlyOwner() {\\n        require(superDelegator_ != address(0), \\\"Cannot initialize with 0 addresses\\\");\\n        superDelegator = superDelegator_;\\n    }\\n\\n    /**\\n     * @notice Request a investment or investment approval\\n     * @dev Executes cronJob()\\n     * @param projectId The id of the investment or investment to approve\\n     */\\n    function requestApproval(\\n        uint256 projectId\\n    ) external onlyProject() checkCronjob() nonReentrant() {\\n        approvalRequests[totalApprovalRequests].projectId = projectId;\\n\\n        emit ApprovalRequested(\\n            approvalRequests[totalApprovalRequests].projectId,\\n            msg.sender\\n        );\\n\\n        totalApprovalRequests = totalApprovalRequests.add(1);\\n    }\\n\\n    /**\\n     * @notice Stores Investment Duration\\n     * @dev Adds cronJob\\n     * @param projectId The id of the investment to store\\n     */\\n    function storeInvestmentTriggering(uint256 projectId) external onlyProject() {\\n        uint256 nextCronjobTimestamp =\\n            block.timestamp.add(updatableVariables[APPLICATIONS_FOR_INVESTMENT_DURATION]);\\n        addCronjob(CronjobType.INVESTMENT, nextCronjobTimestamp, projectId);\\n    }\\n}\\n\",\"keccak256\":\"0xe829e0dc9759aa299d4a73a327bca4e427ba08f5e0ee2e546ace7a5f01e08481\",\"license\":\"MIT\"},\"contracts/governance/DaoCronjob.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./GovernanceTypesAndStorage.sol\\\";\\nimport \\\"../interfaces/IProject.sol\\\";\\nimport \\\"../libs/OrderedDoubleLinkedList.sol\\\";\\nimport \\\"../libs/DoubleLinkedList.sol\\\";\\nimport \\\"../libs/ProjectLibrary.sol\\\";\\n\\n/**\\n * @title AllianceBlock Governance contract\\n * @dev Extends GovernanceTypesAndStorage\\n * @notice Responsible for governing AllianceBlock's ecosystem\\n */\\ncontract DaoCronjob is GovernanceTypesAndStorage {\\n    using SafeMath for uint256;\\n    using OrderedDoubleLinkedList for OrderedDoubleLinkedList.LinkedList;\\n    using DoubleLinkedList for DoubleLinkedList.LinkedList;\\n\\n    modifier checkCronjob() {\\n        checkCronjobs();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks if needs to execute a DAO cronJob\\n     * @dev Calls executeCronjob() at the most 1 cronJob per tx\\n     */\\n    function checkCronjobs() public returns (bool) {\\n        uint256 mostRecentCronjobTimestamp = cronjobList.getHeadValue();\\n        if (mostRecentCronjobTimestamp == 0 || block.timestamp < mostRecentCronjobTimestamp) return false;\\n        else {\\n            // only pop head for now for gas reasons, maybe later we can execute them all together.\\n            (uint256 head, uint256 timestamp) = cronjobList.popHeadAndValue();\\n            executeCronjob(head, timestamp);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Executes the next DAO cronJob\\n     * @param cronjobId The cronJob id to be executed.\\n     * @param timestamp The current block height\\n     */\\n    function executeCronjob(uint256 cronjobId, uint256 timestamp) internal {\\n        updateProject(cronjobs[cronjobId].projectId, timestamp);\\n    }\\n\\n    /**\\n     * @notice Adds a cronJob to the queue\\n     * @dev Adds a node to the cronjobList (OrderedDoubleLinkedList)\\n     * @param cronjobType The type of cronJob\\n     * @param timestamp The current block height\\n     * @param projectId Id of the request in case of dao approval, change voting request or investment\\n     */\\n    function addCronjob(\\n        CronjobType cronjobType,\\n        uint256 timestamp,\\n        uint256 projectId\\n    ) internal {\\n        totalCronjobs = totalCronjobs.add(1);\\n        cronjobs[totalCronjobs] = Cronjob(cronjobType, projectId);\\n        cronjobList.addNodeIncrement(timestamp, totalCronjobs);\\n    }\\n\\n    /**\\n     * @notice Updates an investment\\n     * @dev checks if lottery should start or adds cronJob for late application\\n     * @param projectId The id of the project to update\\n     * @param timestamp the current block height\\n     */\\n    function updateProject(uint256 projectId, uint256 timestamp) internal {\\n        if (IProject(projectManager.projectAddressFromProjectId(projectId)).getRequestingInterestStatus(projectId)) {\\n            IProject(projectManager.projectAddressFromProjectId(projectId)).startLotteryPhase(projectId);\\n        } else {\\n            uint256 nextCronjobTimestamp =\\n                timestamp.add(updatableVariables[LATE_APPLICATIONS_FOR_INVESTMENT_DURATION]);\\n            addCronjob(CronjobType.INVESTMENT, nextCronjobTimestamp, projectId);\\n        }\\n    }\\n\\n    /**\\n     * @notice Start lottery phase\\n     * @dev First check if the lottery should start\\n     * @param projectId The id of the project to update\\n     */\\n    function startLotteryPhase(uint256 projectId) external  onlySuperDelegator() {\\n        address projectAddress = projectManager.projectAddressFromProjectId(projectId);\\n\\n        require(IProject(projectAddress).projectStatus(projectId) == ProjectLibrary.ProjectStatus.APPROVED\\n        , 'The project must be in approved status');\\n        require(IProject(projectAddress).getRequestingInterestStatus(projectId), 'Interest must have been shown');\\n\\n        IProject(projectAddress).startLotteryPhase(projectId);\\n    }\\n}\\n\",\"keccak256\":\"0x2508fdcee059047db1d13f87be6373af60f396dbabaede59076cdc17f77c44d5\",\"license\":\"MIT\"},\"contracts/governance/GovernanceTypesAndStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"../interfaces/IProject.sol\\\";\\nimport \\\"../interfaces/IProjectManager.sol\\\";\\nimport \\\"../libs/OrderedDoubleLinkedList.sol\\\";\\n\\n/**\\n * @title AllianceBlock GovernanceStorage contract\\n * @notice Responsible for governance storage\\n */\\ncontract GovernanceTypesAndStorage {\\n\\n    bytes32 public constant APPLICATIONS_FOR_INVESTMENT_DURATION = keccak256(\\\"applicationsForInvestmentDuration\\\");\\n    bytes32 public constant LATE_APPLICATIONS_FOR_INVESTMENT_DURATION = keccak256(\\\"lateApplicationsForInvestmentDuration\\\");\\n\\n    struct ApprovalRequest {\\n        uint256 projectId; // The investment id for which approcal is requested.\\n        uint256 approvalsProvided; // The number of approvals that this request has gathered.\\n        bool isApproved; // True if request was approved, false if not.\\n        bool isProcessed; // True if request was processed, false if not.\\n    }\\n\\n    // EVENTS\\n    event VotedForRequest(uint256 indexed projectId, bool decision, address indexed user);\\n    event ApprovalRequested(\\n        uint256 indexed projectId,\\n        address indexed user\\n    );\\n    event InitGovernance(address indexed projectAddress_, address indexed user);\\n\\n    uint256 public totalApprovalRequests; // The total amount of approvals requested.\\n\\n    address public superDelegator;\\n\\n    mapping(uint256 => ApprovalRequest) public approvalRequests;\\n\\n    IProjectManager public projectManager;\\n\\n    mapping(bytes32 => uint256) public updatableVariables;\\n\\n    // CRONJOB types and variables\\n    enum CronjobType {\\n        INVESTMENT // Cronjob type for users to show interest for an investment.\\n    }\\n\\n    struct Cronjob {\\n        CronjobType cronjobType; // This is the cronjob type.\\n        uint256 projectId; // This is the id of the request in case of dao approval, change voting request or investment.\\n    }\\n\\n    // TODO - Make this simple linked list, not double (we don't need to remove anything else than head MAYBE).\\n    OrderedDoubleLinkedList.LinkedList public cronjobList;\\n    uint256 public totalCronjobs;\\n\\n    mapping(uint256 => Cronjob) public cronjobs; // cronjobId to Cronjob.\\n\\n    // MODIFIERS\\n\\n    modifier onlyProject() {\\n        require(projectManager.isProject(msg.sender), \\\"Only Project contract\\\");\\n        _;\\n    }\\n\\n    modifier onlySuperDelegator() {\\n        require(msg.sender == superDelegator, \\\"Only super delegator can call this function\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x5a7d0a6df195d0c2689dd3c9738922d060e94f8340d36413842ee0712f8bebfa\",\"license\":\"MIT\"},\"contracts/governance/SuperGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"./DaoCronjob.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @title AllianceBlock Governance contract\\n * @dev Extends OwnableUpgradeable, DaoCronjob\\n * @notice Responsible for govern AllianceBlock's ecosystem\\n */\\ncontract SuperGovernance is Initializable, OwnableUpgradeable, DaoCronjob, ReentrancyGuardUpgradeable {\\n    using SafeMath for uint256;\\n\\n    function __SuperGovernance_init() public initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n    }\\n\\n    /**\\n     * @notice Votes for Request\\n     * @dev Executes cronJob\\n     * @dev requires msg.sender to be Super Delegator\\n     * @dev requires current epoch to be 0 or 1\\n     * @param requestId the Request ID\\n     * @param decision the decision (Approve / Deny)\\n     */\\n    function superVoteForRequest(uint256 requestId, bool decision) external checkCronjob() nonReentrant() onlySuperDelegator() {\\n        require(!approvalRequests[requestId].isProcessed, \\\"Cannot process again same investment\\\");\\n\\n        IProject(projectManager.projectAddressFromProjectId(approvalRequests[requestId].projectId)).decideForProject(approvalRequests[requestId].projectId, decision);\\n\\n        if (decision) {\\n            approvalRequests[requestId].approvalsProvided = 1;\\n            approvalRequests[requestId].isApproved = true;\\n        }\\n\\n        approvalRequests[requestId].isProcessed = true;\\n\\n        emit VotedForRequest(approvalRequests[requestId].projectId, decision, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0x8bda0a2871dc2286ded58476bd06feee5fe3e698561e9a98e3e0565c6a41c477\",\"license\":\"MIT\"},\"contracts/interfaces/IProject.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\nimport \\\"../libs/ProjectLibrary.sol\\\";\\n\\n/**\\n * @title Interface of the Investment contract.\\n */\\ninterface IProject {\\n    function decideForProject(uint256 projectId, bool decision) external;\\n\\n    function getRequestingInterestStatus(uint256 projectId) external view returns (bool);\\n\\n    function startLotteryPhase(uint256 projectId) external;\\n\\n    function setEscrowAddress(address escrowAddress_) external;\\n\\n    function addLendingToken(address lendingToken_) external;\\n\\n    function projectStatus(uint256 projectId) external returns (ProjectLibrary.ProjectStatus);\\n\\n}\\n\",\"keccak256\":\"0x2365f5d25b3bdb8db6a2d67b754ea3c6b2a69ecfe90c94b21cf35d440dc6f5e8\",\"license\":\"MIT\"},\"contracts/interfaces/IProjectManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @title AllianceBlock Project Manager contract\\n * @dev Extends Initializable, OwnableUpgradeable\\n */\\ninterface IProjectManager {\\n\\n    /**\\n     * @notice Function to create a new project.\\n     * @dev Must be called from a valid project type contract.\\n     */\\n    function createProject() external returns(uint256);\\n\\n    /**\\n     * @notice Function to know if an address is a valid project type contract.\\n     * @param projectAddress address to verify.\\n     */\\n    function isProject(address projectAddress) external returns (bool);\\n\\n    /** \\n     * @notice Get the quantity of total projects created.\\n     */\\n    function totalProjects() view external returns (uint256);\\n\\n    /** \\n     * @notice Get project type number from a project Id.\\n     * @param projectId the projectId to search.\\n     */\\n    function projectTypeFromProjectId(uint256 projectId) external returns (uint256);\\n\\n    /** \\n     * @notice Get project type number from a project address.\\n     * @param projectAddress the project address to get the type number.\\n     */\\n    function projectTypeIndexFromAddress(address projectAddress) external returns (uint256);\\n\\n    /** \\n     * @notice Get project address from a project type number.\\n     * @param typeNumber the project type number to search.\\n     */\\n    function projectAddressFromType(uint256 typeNumber) external returns (address);\\n\\n    /** \\n     * @notice Get project address from a projectId.\\n     * @param projectId the projectId to search.\\n     */\\n    function projectAddressFromProjectId(uint256 projectId) external returns (address);\\n    \\n}\\n\",\"keccak256\":\"0xb6c7bfae0d7c5602eb0f075dbde3039100bddf9a13514dce13630ec95c2a4746\",\"license\":\"MIT\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @title Interface of the Staking contract.\\n */\\ninterface IStaking {\\n    function getBalance(address staker_) external view returns (uint256);\\n\\n    function getAmountsToStake()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getEligibilityForActionProvision(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9cd0ce0fc893236485f01d3feced3b3fed897051160f83191da70f9fc314f4b6\",\"license\":\"MIT\"},\"contracts/libs/DoubleLinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @title Double linked-list\\n */\\nlibrary DoubleLinkedList {\\n    struct Node {\\n        uint256 next;\\n        uint256 previous;\\n    }\\n\\n    struct LinkedList {\\n        uint256 head;\\n        uint256 tail;\\n        uint256 size;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    /**\\n     * @notice Get Head ID\\n     * @param self the LinkedList\\n     * @return the first item of the list\\n     */\\n    function getHeadId(LinkedList storage self) internal view returns (uint256) {\\n        return self.head;\\n    }\\n\\n    /**\\n     * @notice Get list size\\n     * @param self the LinkedList\\n     * @return the size of the list\\n     */\\n    function getSize(LinkedList storage self) internal view returns (uint256) {\\n        return self.size;\\n    }\\n\\n    /**\\n     * @notice Adds a new node to the list\\n     * @param self the LinkedList\\n     * @param id the node to add\\n     */\\n    function addNode(LinkedList storage self, uint256 id) internal {\\n        require(id != 0, \\\"Id should be different from zero\\\");\\n\\n        //If empty\\n        if (self.head == 0) {\\n            self.head = id;\\n            self.tail = id;\\n        }\\n        //Else push in tail\\n        else {\\n            uint256 tail = self.tail;\\n            self.nodes[tail].next = id;\\n            self.nodes[id] = Node(0, tail);\\n            self.tail = id;\\n        }\\n\\n        self.size += 1;\\n    }\\n\\n    /**\\n     * @notice Removes node from the list\\n     * @param self the LinkedList\\n     * @param id the id of the node to remove\\n     */\\n    function removeNode(LinkedList storage self, uint256 id) internal {\\n        require(self.size > 0, \\\"Cannot remove an item from an empty list\\\");\\n        require(id != 0, \\\"Id should be different from zero\\\");\\n\\n        uint256 head = self.head;\\n        uint256 tail = self.tail;\\n\\n        if (self.size == 1) {\\n            self.head = 0;\\n            self.tail = 0;\\n        } else if (id == head) {\\n            self.head = self.nodes[head].next;\\n            // head was updated previously, so we can't use the memory variable here\\n            self.nodes[self.head].previous = 0;\\n        } else if (id == tail) {\\n            self.tail = self.nodes[tail].previous;\\n            // tail was updated previously, so we can't use the memory variable here\\n            self.nodes[self.tail].next = 0;\\n        } else {\\n            self.nodes[self.nodes[id].next].previous = self.nodes[id].previous;\\n            self.nodes[self.nodes[id].previous].next = self.nodes[id].next;\\n        }\\n\\n        delete self.nodes[id];\\n        self.size -= 1;\\n    }\\n\\n    /**\\n     * @notice Pops the head of the list\\n     * @param self the LinkedList\\n     * @return head the first item of the list\\n     */\\n    function popHead(LinkedList storage self) internal returns (uint256 head) {\\n        require(self.size > 0, \\\"Cannot pop an item from an empty list\\\");\\n\\n        head = self.head;\\n\\n        if (self.size == 1) {\\n            self.head = 0;\\n            self.tail = 0;\\n        } else {\\n            self.head = self.nodes[self.head].next;\\n            self.nodes[self.head].previous = 0;\\n        }\\n\\n        delete self.nodes[head];\\n        self.size -= 1;\\n    }\\n\\n    /**\\n     * @notice Get id by index\\n     * @param self the LinkedList\\n     * @param index the id of the index\\n     * @return id the item in index position\\n     * @return found boolean whether or not the entry was found\\n     */\\n    function getIndexedId(LinkedList storage self, uint256 index) internal view returns (uint256 id, bool found) {\\n        id = self.head;\\n\\n        for (uint256 i = 1; i < index && !found; i++) {\\n            id = self.nodes[id].next;\\n            found = id != 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Clone LinkedList\\n     * @param self the LinkedList\\n     * @param listToClone the LinkedList storage to clone the list from\\n     */\\n    function cloneList(LinkedList storage self, LinkedList storage listToClone) internal {\\n        self.head = listToClone.head;\\n        self.tail = listToClone.tail;\\n        self.size = listToClone.size;\\n\\n        uint256 id = listToClone.head;\\n\\n        for (uint256 i = 0; i < listToClone.size; i++) {\\n            self.nodes[id] = listToClone.nodes[id];\\n            id = listToClone.nodes[id].next;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f40407150ce2a602c705ca147c6ef21b1f54c257da1e444c268d74d4cef813e\",\"license\":\"MIT\"},\"contracts/libs/OrderedDoubleLinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @title the Ordered Double Linked List library\\n */\\nlibrary OrderedDoubleLinkedList {\\n    struct Node {\\n        uint256 next;\\n        uint256 previous;\\n        uint256 value;\\n    }\\n\\n    struct LinkedList {\\n        uint256 head;\\n        uint256 tail;\\n        uint256 size;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    /**\\n     * @notice Get Head ID\\n     * @param self the LinkedList\\n     * @return the first item of the list\\n     */\\n    function getHeadId(LinkedList storage self) internal view returns (uint256) {\\n        return self.head;\\n    }\\n\\n    /**\\n     * @notice Get head value\\n     * @param self the LinkedList\\n     * @return the value of the first node\\n     */\\n    function getHeadValue(LinkedList storage self) internal view returns (uint256) {\\n        return self.nodes[self.head].value;\\n    }\\n\\n    /**\\n     * @notice Get list size\\n     * @param self the LinkedList\\n     * @return the size of the list\\n     */\\n    function getSize(LinkedList storage self) internal view returns (uint256) {\\n        return self.size;\\n    }\\n\\n    /**\\n     * @notice Adds node increment\\n     * @param self the LinkedList\\n     * @param value the value to add\\n     * @param id the id of the node\\n     */\\n    function addNodeIncrement(\\n        LinkedList storage self,\\n        uint256 value,\\n        uint256 id\\n    ) internal {\\n        require(id != 0, \\\"Id should be different from zero\\\");\\n        Node memory node = self.nodes[self.head];\\n\\n        //If empty\\n        if (self.head == 0) {\\n            self.head = id;\\n            self.tail = id;\\n            self.nodes[id] = Node(0, 0, value);\\n        }\\n        //If head\\n        else if (value < node.value) {\\n            self.nodes[self.head].previous = id;\\n            self.nodes[id] = Node(self.head, 0, value);\\n            self.head = id;\\n        } else {\\n            //If middle\\n            if (self.size > 1) {\\n                for (uint256 i = 1; i < self.size; i++) {\\n                    node = self.nodes[node.next];\\n                    if (value < node.value) {\\n                        uint256 nextId = self.nodes[node.next].previous;\\n                        uint256 previousId = self.nodes[nextId].previous;\\n                        self.nodes[id] = Node(nextId, previousId, value);\\n                        self.nodes[previousId].next = id;\\n                        self.nodes[nextId].previous = id;\\n                        break;\\n                    }\\n                }\\n            }\\n            //If tail\\n            if (self.nodes[id].value != value) {\\n                self.nodes[id] = Node(0, self.tail, value);\\n                self.nodes[self.tail].next = id;\\n                self.tail = id;\\n            }\\n        }\\n\\n        self.size += 1;\\n    }\\n\\n    /**\\n     * @notice Adds node decrement\\n     * @param self the LinkedList\\n     * @param value the value to decrement\\n     * @param id the id of the node\\n     */\\n    function addNodeDecrement(\\n        LinkedList storage self,\\n        uint256 value,\\n        uint256 id\\n    ) internal {\\n        require(id != 0, \\\"Id should be different from zero\\\");\\n\\n        Node memory node = self.nodes[self.head];\\n\\n        //If empty\\n        if (self.head == 0) {\\n            self.head = id;\\n            self.tail = id;\\n            self.nodes[id] = Node(0, 0, value);\\n        }\\n        //If head\\n        else if (value > node.value) {\\n            self.nodes[self.head].previous = id;\\n            self.nodes[id] = Node(self.head, 0, value);\\n            self.head = id;\\n        } else {\\n            //If middle\\n            if (self.size > 1) {\\n                for (uint256 i = 1; i < self.size; i++) {\\n                    node = self.nodes[node.next];\\n                    if (value > node.value) {\\n                        uint256 nextId = self.nodes[node.next].previous;\\n                        uint256 previousId = self.nodes[nextId].previous;\\n                        self.nodes[id] = Node(nextId, previousId, value);\\n                        self.nodes[previousId].next = id;\\n                        self.nodes[nextId].previous = id;\\n                        break;\\n                    }\\n                }\\n            }\\n            //If tail\\n            if (self.nodes[id].value != value) {\\n                self.nodes[id] = Node(0, self.tail, value);\\n                self.nodes[self.tail].next = id;\\n                self.tail = id;\\n            }\\n        }\\n\\n        self.size += 1;\\n    }\\n\\n    /**\\n     * @notice Removes a node\\n     * @param self the LinkedList\\n     * @param id the id of the node to remove\\n     */\\n    function removeNode(LinkedList storage self, uint256 id) internal {\\n        require(self.size > 0, \\\"Cannot remove an item from an empty list\\\");\\n        require(id != 0, \\\"Id should be different from zero\\\");\\n\\n        if (self.size == 1) {\\n            self.head = 0;\\n            self.tail = 0;\\n        } else if (id == self.head) {\\n            self.head = self.nodes[self.head].next;\\n            self.nodes[self.head].previous = 0;\\n        } else if (id == self.tail) {\\n            self.tail = self.nodes[self.tail].previous;\\n            self.nodes[self.tail].next = 0;\\n        } else {\\n            self.nodes[self.nodes[id].next].previous = self.nodes[id].previous;\\n            self.nodes[self.nodes[id].previous].next = self.nodes[id].next;\\n        }\\n\\n        delete self.nodes[id];\\n        self.size -= 1;\\n    }\\n\\n    /**\\n     * @notice Pops the head of the list\\n     * @param self the LinkedList\\n     * @return head the first item of the list\\n     */\\n    function popHead(LinkedList storage self) internal returns (uint256 head) {\\n        require(self.size > 0, \\\"Cannot pop an item from an empty list\\\");\\n\\n        head = self.head;\\n\\n        if (self.size == 1) {\\n            self.head = 0;\\n            self.tail = 0;\\n        } else {\\n            self.head = self.nodes[self.head].next;\\n            self.nodes[self.head].previous = 0;\\n        }\\n\\n        delete self.nodes[head];\\n        self.size -= 1;\\n    }\\n\\n    /**\\n     * @notice Pops the head and value of the list\\n     * @param self the LinkedList\\n     * @return head\\n     * @return value\\n     */\\n    function popHeadAndValue(LinkedList storage self) internal returns (uint256 head, uint256 value) {\\n        head = self.head;\\n        value = self.nodes[self.head].value;\\n\\n        popHead(self);\\n    }\\n\\n    /**\\n     * @notice Removes multiple nodes\\n     * @param self the LinkedList\\n     * @param amountOfNodes the number of nodes to remove starting from Head\\n     */\\n    function removeMultipleFromHead(LinkedList storage self, uint256 amountOfNodes) internal {\\n        require(amountOfNodes <= self.size, \\\"amountOfNodes should be less than or equal to self.size\\\");\\n        for (uint256 i = 0; i < amountOfNodes; i++) {\\n            uint256 nodeToRemove = self.head;\\n            if (self.size == 1) {\\n                self.head = 0;\\n                self.tail = 0;\\n            } else {\\n                self.head = self.nodes[self.head].next;\\n                self.nodes[self.head].previous = 0;\\n            }\\n\\n            delete self.nodes[nodeToRemove];\\n            self.size -= 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get position from ID\\n     * @param self the LinkedList\\n     * @param id the id to search\\n     * @return the index position for the id provided\\n     */\\n    function getPositionForId(LinkedList storage self, uint256 id) internal view returns (uint256) {\\n        uint256 positionCounter;\\n\\n        if (self.nodes[id].value == 0) return 0; // If not in list.\\n\\n        while (true) {\\n            positionCounter += 1;\\n            if (id == self.head) break;\\n\\n            id = self.nodes[id].previous;\\n        }\\n\\n        return positionCounter;\\n    }\\n\\n    /**\\n     * @notice Clones OrderedDoubleLinkedList\\n     * @param self the LinkedList\\n     * @param listToClone the LinkedList storage to clone the list from\\n     */\\n    function cloneList(LinkedList storage self, LinkedList storage listToClone) internal {\\n        self.head = listToClone.head;\\n        self.tail = listToClone.tail;\\n        self.size = listToClone.size;\\n\\n        uint256 id = listToClone.head;\\n\\n        for (uint256 i = 0; i < listToClone.size; i++) {\\n            self.nodes[id] = listToClone.nodes[id];\\n            id = listToClone.nodes[id].next;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3458d67189a21eb493fe44b881183a29a353186ff7992ea07245ccbd4232dfdb\",\"license\":\"MIT\"},\"contracts/libs/ProjectLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.7.6;\\n\\n/**\\n * @title Investment Library\\n */\\nlibrary ProjectLibrary {\\n    enum ProjectStatus {\\n        REQUESTED, // Status when investment has been requested, but not approved yet.\\n        APPROVED, // Status when investment has been approved from governors.\\n        STARTED, // Status when investment has been fully funded.\\n        SETTLED, // Status when investment has been fully repaid by the seeker.\\n        DEFAULT, // Status when seeker has not been able to repay the investment.\\n        REJECTED // Status when investment has been rejected by governors.\\n    }\\n\\n    struct InvestmentDetails {\\n        uint256 investmentId; // The Id of the investment.\\n        uint256 approvalDate; // The timestamp in which investment was approved.\\n        uint256 startingDate; // The timestamp in which investment was funded.\\n        address investmentToken; // The address of the token that will be sold to investors.\\n        uint256 investmentTokensAmount; // The amount of investment tokens that are deposited for investors by the seeker.\\n        address lendingToken; // The address of the token that investors should pay with.\\n        uint256 totalAmountToBeRaised; // The amount of lending tokens that seeker of investment will raise after all tickets are purchased.\\n        uint256 totalPartitionsToBePurchased; // The total partitions or ERC1155 tokens, in which investment is splitted.\\n        string extraInfo; // The ipfs hash, where all extra info about the investment are stored.\\n        uint256 partitionsRequested; // The total partitions or ERC1155 tokens that are requested for purchase.\\n    }\\n}\\n\",\"keccak256\":\"0xd4447bc5019b0caf5907d4e90e28d5f39e6ee2f48baaaf526322e1fb3a90a663\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611e39806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80636d148f84116100b85780638da5cb5b1161007c5780638da5cb5b146102e95780639e3d87cd146102f1578063bae196cf1461032b578063c99fcbeb14610351578063e710491114610359578063f2fde38b1461037657610137565b80636d148f8414610252578063715018a61461026f5780637baf48fe146102775780638cb13c2e1461027f5780638cb75a24146102c457610137565b806338f40f5b116100ff57806338f40f5b146101c65780633c96cd2a146101e35780633e0c10a7146102255780635eaa98c61461024257806366eaedb51461024a57610137565b8063029eb76e1461013c57806311ca2ea61461016057806317c076661461017a5780632e8fe18e1461018457806335e245b8146101aa575b600080fd5b61014461039c565b604080516001600160a01b039092168252519081900360200190f35b6101686103ab565b60408051918252519081900360200190f35b6101826103b1565b005b6101826004803603602081101561019a57600080fd5b50356001600160a01b0316610463565b6101b261053e565b604080519115158252519081900360200190f35b610182600480360360208110156101dc57600080fd5b503561058e565b610200600480360360208110156101f957600080fd5b5035610830565b6040518083801561020d57fe5b81526020018281526020019250505060405180910390f35b6101826004803603602081101561023b57600080fd5b503561084f565b61016861097a565b61016861099e565b6101826004803603602081101561026857600080fd5b50356109a4565b610182610b2a565b610144610be8565b61029c6004803603602081101561029557600080fd5b5035610bf7565b6040805194855260208501939093529015158383015215156060830152519081900360800190f35b610182600480360360408110156102da57600080fd5b50803590602001351515610c24565b610144610eb4565b6101826004803603608081101561030757600080fd5b506001600160a01b0381358116916020810135916040820135916060013516610ec3565b6103336110cf565b60408051938452602084019290925282820152519081900360600190f35b6101686110db565b6101686004803603602081101561036f57600080fd5b50356110ff565b6101826004803603602081101561038c57600080fd5b50356001600160a01b0316611111565b6068546001600160a01b031681565b606e5481565b600054610100900460ff16806103ca57506103ca611226565b806103d8575060005460ff16155b6104135760405162461bcd60e51b815260040180806020018281038252602e815260200180611d25602e913960400191505060405180910390fd5b600054610100900460ff1615801561043e576000805460ff1961ff0019909116610100171660011790555b610446611237565b61044e6112d4565b8015610460576000805461ff00191690555b50565b61046b611369565b6001600160a01b031661047c610eb4565b6001600160a01b0316146104d7576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661051c5760405162461bcd60e51b8152600401808060200182810382526022815260200180611d036022913960400191505060405180910390fd5b606680546001600160a01b0319166001600160a01b0392909216919091179055565b60008061054b606a61136d565b905080158061055957508042105b1561056857600091505061058b565b600080610575606a611387565b9150915061058382826113ac565b505060019150505b90565b6066546001600160a01b031633146105d75760405162461bcd60e51b815260040180806020018281038252602b815260200180611d79602b913960400191505060405180910390fd5b60685460408051637ddc91e760e11b81526004810184905290516000926001600160a01b03169163fbb923ce91602480830192602092919082900301818787803b15801561062457600080fd5b505af1158015610638573d6000803e3d6000fd5b505050506040513d602081101561064e57600080fd5b505190506001816001600160a01b03166350ac5892846040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561069a57600080fd5b505af11580156106ae573d6000803e3d6000fd5b505050506040513d60208110156106c457600080fd5b505160058111156106d157fe5b1461070d5760405162461bcd60e51b8152600401808060200182810382526026815260200180611d536026913960400191505060405180910390fd5b806001600160a01b03166379e66676836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561075157600080fd5b505afa158015610765573d6000803e3d6000fd5b505050506040513d602081101561077b57600080fd5b50516107ce576040805162461bcd60e51b815260206004820152601d60248201527f496e746572657374206d7573742068617665206265656e2073686f776e000000604482015290519081900360640190fd5b806001600160a01b03166338f40f5b836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561081457600080fd5b505af1158015610828573d6000803e3d6000fd5b505050505050565b606f602052600090815260409020805460019091015460ff9091169082565b6068546040805162b9028160e31b815233600482015290516001600160a01b03909216916305c81408916024808201926020929091908290030181600087803b15801561089b57600080fd5b505af11580156108af573d6000803e3d6000fd5b505050506040513d60208110156108c557600080fd5b5051610910576040805162461bcd60e51b815260206004820152601560248201527413db9b1e48141c9bda9958dd0818dbdb9d1c9858dd605a1b604482015290519081900360640190fd5b7f9080639d5d157882c14efff1f7c9db23b3cf22d2d58b9bc4d5cabdf8f486b31d600090815260696020527f581f23a4a0deb400a8a4e06663ebf76ff0f0b604e60a13eda480f71b646f10a9546109689042906113c8565b905061097660008284611429565b5050565b7f9080639d5d157882c14efff1f7c9db23b3cf22d2d58b9bc4d5cabdf8f486b31d81565b60655481565b6068546040805162b9028160e31b815233600482015290516001600160a01b03909216916305c81408916024808201926020929091908290030181600087803b1580156109f057600080fd5b505af1158015610a04573d6000803e3d6000fd5b505050506040513d6020811015610a1a57600080fd5b5051610a65576040805162461bcd60e51b815260206004820152601560248201527413db9b1e48141c9bda9958dd0818dbdb9d1c9858dd605a1b604482015290519081900360640190fd5b610a6d61053e565b5060026070541415610ac6576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260705560658054600090815260676020526040808220849055915481528181205491513392917f84b8b39cd51b9b546002c46c70fab2c1b727ccd4b78d23cb126abbb965a8e79691a3606554610b1f9060016113c8565b606555506001607055565b610b32611369565b6001600160a01b0316610b43610eb4565b6001600160a01b031614610b9e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6066546001600160a01b031681565b60676020526000908152604090208054600182015460029092015490919060ff8082169161010090041684565b610c2c61053e565b5060026070541415610c85576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026070556066546001600160a01b03163314610cd35760405162461bcd60e51b815260040180806020018281038252602b815260200180611d79602b913960400191505060405180910390fd5b600082815260676020526040902060020154610100900460ff1615610d295760405162461bcd60e51b8152600401808060200182810382526024815260200180611cdf6024913960400191505060405180910390fd5b6068546000838152606760209081526040808320548151637ddc91e760e11b8152600481019190915290516001600160a01b039094169363fbb923ce93602480840194938390030190829087803b158015610d8357600080fd5b505af1158015610d97573d6000803e3d6000fd5b505050506040513d6020811015610dad57600080fd5b50516000838152606760205260408082205481516361820b3960e01b81526004810191909152841515602482015290516001600160a01b03909316926361820b399260448084019391929182900301818387803b158015610e0d57600080fd5b505af1158015610e21573d6000803e3d6000fd5b505050508015610e5257600082815260676020526040902060018181018190556002909101805460ff191690911790555b60008281526067602090815260409182902060028101805461ff00191661010017905554825184151581529251339391927f3fb74d6e0075eb59087dded98c690b788d0da980a5dc8e55bc95b130cd376991928290030190a350506001607055565b6033546001600160a01b031690565b600054610100900460ff1680610edc5750610edc611226565b80610eea575060005460ff16155b610f255760405162461bcd60e51b815260040180806020018281038252602e815260200180611d25602e913960400191505060405180910390fd5b600054610100900460ff16158015610f50576000805460ff1961ff0019909116610100171660011790555b6001600160a01b038516610f955760405162461bcd60e51b8152600401808060200182810382526022815260200180611d036022913960400191505060405180910390fd5b83610fd15760405162461bcd60e51b815260040180806020018281038252603b815260200180611dc9603b913960400191505060405180910390fd5b8261100d5760405162461bcd60e51b815260040180806020018281038252603f815260200180611c7a603f913960400191505060405180910390fd5b6110156103b1565b606880546001600160a01b038085166001600160a01b031992831617909255606680549288169290911691909117905560696020527f581f23a4a0deb400a8a4e06663ebf76ff0f0b604e60a13eda480f71b646f10a98490557f3f865dedbc67ccfb5808b39aa5f97fc73fd2525f9b72b3ec09fff2b4cf1809d06000527fd3e324e2cafe12a9f62bcfe0d0539288ba8c4893a71b42b860c74fe88dc78a6c83905580156110c8576000805461ff00191690555b5050505050565b606a54606b54606c5483565b7f3f865dedbc67ccfb5808b39aa5f97fc73fd2525f9b72b3ec09fff2b4cf1809d081565b60696020526000908152604090205481565b611119611369565b6001600160a01b031661112a610eb4565b6001600160a01b031614611185576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166111ca5760405162461bcd60e51b8152600401808060200182810382526026815260200180611cb96026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6000611231306114a6565b15905090565b600054610100900460ff16806112505750611250611226565b8061125e575060005460ff16155b6112995760405162461bcd60e51b815260040180806020018281038252602e815260200180611d25602e913960400191505060405180910390fd5b600054610100900460ff161580156112c4576000805460ff1961ff0019909116610100171660011790555b6112cc6114ac565b61044e61154c565b600054610100900460ff16806112ed57506112ed611226565b806112fb575060005460ff16155b6113365760405162461bcd60e51b815260040180806020018281038252602e815260200180611d25602e913960400191505060405180910390fd5b600054610100900460ff16158015611361576000805460ff1961ff0019909116610100171660011790555b61044e611645565b3390565b805460009081526003909101602052604090206002015490565b805460008181526003830160205260409020600201546113a6836116eb565b50915091565b6000828152606f6020526040902060010154610976908261179f565b600082820183811015611422576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b606e546114379060016113c8565b606e55604080518082019091528084801561144e57fe5b81526020908101839052606e546000908152606f9091526040902081518154829060ff1916600183801561147e57fe5b021790555060209190910151600190910155606e546114a190606a9084906119da565b505050565b3b151590565b600054610100900460ff16806114c557506114c5611226565b806114d3575060005460ff16155b61150e5760405162461bcd60e51b815260040180806020018281038252602e815260200180611d25602e913960400191505060405180910390fd5b600054610100900460ff1615801561044e576000805460ff1961ff0019909116610100171660011790558015610460576000805461ff001916905550565b600054610100900460ff16806115655750611565611226565b80611573575060005460ff16155b6115ae5760405162461bcd60e51b815260040180806020018281038252602e815260200180611d25602e913960400191505060405180910390fd5b600054610100900460ff161580156115d9576000805460ff1961ff0019909116610100171660011790555b60006115e3611369565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610460576000805461ff001916905550565b600054610100900460ff168061165e575061165e611226565b8061166c575060005460ff16155b6116a75760405162461bcd60e51b815260040180806020018281038252602e815260200180611d25602e913960400191505060405180910390fd5b600054610100900460ff161580156116d2576000805460ff1961ff0019909116610100171660011790555b60016070558015610460576000805461ff001916905550565b60008082600201541161172f5760405162461bcd60e51b8152600401808060200182810382526025815260200180611da46025913960400191505060405180910390fd5b50805460028201546001141561174e576000808355600183015561176e565b815460009081526003830160205260408082205480855582528120600101555b6000818152600383016020526040812081815560018101829055600290810191909155909101805460001901905590565b60685460408051637ddc91e760e11b81526004810185905290516001600160a01b039092169163fbb923ce916024808201926020929091908290030181600087803b1580156117ed57600080fd5b505af1158015611801573d6000803e3d6000fd5b505050506040513d602081101561181757600080fd5b505160408051633cf3333b60e11b81526004810185905290516001600160a01b03909216916379e6667691602480820192602092909190829003018186803b15801561186257600080fd5b505afa158015611876573d6000803e3d6000fd5b505050506040513d602081101561188c57600080fd5b5051156119745760685460408051637ddc91e760e11b81526004810185905290516001600160a01b039092169163fbb923ce916024808201926020929091908290030181600087803b1580156118e157600080fd5b505af11580156118f5573d6000803e3d6000fd5b505050506040513d602081101561190b57600080fd5b5051604080516338f40f5b60e01b81526004810185905290516001600160a01b03909216916338f40f5b9160248082019260009290919082900301818387803b15801561195757600080fd5b505af115801561196b573d6000803e3d6000fd5b50505050610976565b7f3f865dedbc67ccfb5808b39aa5f97fc73fd2525f9b72b3ec09fff2b4cf1809d0600090815260696020527fd3e324e2cafe12a9f62bcfe0d0539288ba8c4893a71b42b860c74fe88dc78a6c546119cc9083906113c8565b90506114a160008285611429565b80611a2c576040805162461bcd60e51b815260206004820181905260248201527f49642073686f756c6420626520646966666572656e742066726f6d207a65726f604482015290519081900360640190fd5b82546000818152600385016020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290611ab9578184556001808501839055604080516060810182526000808252602080830182815283850189815288845260038b01909252939091209151825591519281019290925551600290910155611c6a565b8060400151831015611b215783546000908152600385016020818152604080842060019081018790558151606081018352895481528084018681528184018a815289885295909452919094209051815590519281019290925551600290910155818455611c6a565b600184600201541115611bf85760015b8460020154811015611bf65790516000908152600385016020908152604091829020825160608101845281548152600182015492810192909252600201549181018290529190841015611bee578151600090815260038601602081815260408084206001908101548086528286208201805484516060810186528381528087018281528187018e81528d8b529890975285892090518155955193860193909355945160029094019390935584528320869055909152839055611bf6565b600101611b31565b505b60008281526003850160205260409020600201548314611c6a576040805160608101825260008082526001808801805460208086019182528587018a815289865260038c0190915286852095518655905192850192909255905160029093019290925581548152919091208390558290555b5050506002018054600101905556fe43616e6e6f7420696e697469616c697a65206c6174654170706c69636174696f6e73466f72496e766573746d656e744475726174696f6e5f207769746820304f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737343616e6e6f742070726f6365737320616761696e2073616d6520696e766573746d656e7443616e6e6f7420696e697469616c697a652077697468203020616464726573736573496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65645468652070726f6a656374206d75737420626520696e20617070726f766564207374617475734f6e6c792073757065722064656c656761746f722063616e2063616c6c20746869732066756e6374696f6e43616e6e6f7420706f7020616e206974656d2066726f6d20616e20656d707479206c69737443616e6e6f7420696e697469616c697a65206170706c69636174696f6e73466f72496e766573746d656e744475726174696f6e5f20776974682030a264697066735822122004c8daf8cb71d9296fbbf5780fb0fb3cd1c8ca228d9c1dfdee74eeb12aebe4f864736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80636d148f84116100b85780638da5cb5b1161007c5780638da5cb5b146102e95780639e3d87cd146102f1578063bae196cf1461032b578063c99fcbeb14610351578063e710491114610359578063f2fde38b1461037657610137565b80636d148f8414610252578063715018a61461026f5780637baf48fe146102775780638cb13c2e1461027f5780638cb75a24146102c457610137565b806338f40f5b116100ff57806338f40f5b146101c65780633c96cd2a146101e35780633e0c10a7146102255780635eaa98c61461024257806366eaedb51461024a57610137565b8063029eb76e1461013c57806311ca2ea61461016057806317c076661461017a5780632e8fe18e1461018457806335e245b8146101aa575b600080fd5b61014461039c565b604080516001600160a01b039092168252519081900360200190f35b6101686103ab565b60408051918252519081900360200190f35b6101826103b1565b005b6101826004803603602081101561019a57600080fd5b50356001600160a01b0316610463565b6101b261053e565b604080519115158252519081900360200190f35b610182600480360360208110156101dc57600080fd5b503561058e565b610200600480360360208110156101f957600080fd5b5035610830565b6040518083801561020d57fe5b81526020018281526020019250505060405180910390f35b6101826004803603602081101561023b57600080fd5b503561084f565b61016861097a565b61016861099e565b6101826004803603602081101561026857600080fd5b50356109a4565b610182610b2a565b610144610be8565b61029c6004803603602081101561029557600080fd5b5035610bf7565b6040805194855260208501939093529015158383015215156060830152519081900360800190f35b610182600480360360408110156102da57600080fd5b50803590602001351515610c24565b610144610eb4565b6101826004803603608081101561030757600080fd5b506001600160a01b0381358116916020810135916040820135916060013516610ec3565b6103336110cf565b60408051938452602084019290925282820152519081900360600190f35b6101686110db565b6101686004803603602081101561036f57600080fd5b50356110ff565b6101826004803603602081101561038c57600080fd5b50356001600160a01b0316611111565b6068546001600160a01b031681565b606e5481565b600054610100900460ff16806103ca57506103ca611226565b806103d8575060005460ff16155b6104135760405162461bcd60e51b815260040180806020018281038252602e815260200180611d25602e913960400191505060405180910390fd5b600054610100900460ff1615801561043e576000805460ff1961ff0019909116610100171660011790555b610446611237565b61044e6112d4565b8015610460576000805461ff00191690555b50565b61046b611369565b6001600160a01b031661047c610eb4565b6001600160a01b0316146104d7576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b03811661051c5760405162461bcd60e51b8152600401808060200182810382526022815260200180611d036022913960400191505060405180910390fd5b606680546001600160a01b0319166001600160a01b0392909216919091179055565b60008061054b606a61136d565b905080158061055957508042105b1561056857600091505061058b565b600080610575606a611387565b9150915061058382826113ac565b505060019150505b90565b6066546001600160a01b031633146105d75760405162461bcd60e51b815260040180806020018281038252602b815260200180611d79602b913960400191505060405180910390fd5b60685460408051637ddc91e760e11b81526004810184905290516000926001600160a01b03169163fbb923ce91602480830192602092919082900301818787803b15801561062457600080fd5b505af1158015610638573d6000803e3d6000fd5b505050506040513d602081101561064e57600080fd5b505190506001816001600160a01b03166350ac5892846040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561069a57600080fd5b505af11580156106ae573d6000803e3d6000fd5b505050506040513d60208110156106c457600080fd5b505160058111156106d157fe5b1461070d5760405162461bcd60e51b8152600401808060200182810382526026815260200180611d536026913960400191505060405180910390fd5b806001600160a01b03166379e66676836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561075157600080fd5b505afa158015610765573d6000803e3d6000fd5b505050506040513d602081101561077b57600080fd5b50516107ce576040805162461bcd60e51b815260206004820152601d60248201527f496e746572657374206d7573742068617665206265656e2073686f776e000000604482015290519081900360640190fd5b806001600160a01b03166338f40f5b836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561081457600080fd5b505af1158015610828573d6000803e3d6000fd5b505050505050565b606f602052600090815260409020805460019091015460ff9091169082565b6068546040805162b9028160e31b815233600482015290516001600160a01b03909216916305c81408916024808201926020929091908290030181600087803b15801561089b57600080fd5b505af11580156108af573d6000803e3d6000fd5b505050506040513d60208110156108c557600080fd5b5051610910576040805162461bcd60e51b815260206004820152601560248201527413db9b1e48141c9bda9958dd0818dbdb9d1c9858dd605a1b604482015290519081900360640190fd5b7f9080639d5d157882c14efff1f7c9db23b3cf22d2d58b9bc4d5cabdf8f486b31d600090815260696020527f581f23a4a0deb400a8a4e06663ebf76ff0f0b604e60a13eda480f71b646f10a9546109689042906113c8565b905061097660008284611429565b5050565b7f9080639d5d157882c14efff1f7c9db23b3cf22d2d58b9bc4d5cabdf8f486b31d81565b60655481565b6068546040805162b9028160e31b815233600482015290516001600160a01b03909216916305c81408916024808201926020929091908290030181600087803b1580156109f057600080fd5b505af1158015610a04573d6000803e3d6000fd5b505050506040513d6020811015610a1a57600080fd5b5051610a65576040805162461bcd60e51b815260206004820152601560248201527413db9b1e48141c9bda9958dd0818dbdb9d1c9858dd605a1b604482015290519081900360640190fd5b610a6d61053e565b5060026070541415610ac6576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260705560658054600090815260676020526040808220849055915481528181205491513392917f84b8b39cd51b9b546002c46c70fab2c1b727ccd4b78d23cb126abbb965a8e79691a3606554610b1f9060016113c8565b606555506001607055565b610b32611369565b6001600160a01b0316610b43610eb4565b6001600160a01b031614610b9e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6066546001600160a01b031681565b60676020526000908152604090208054600182015460029092015490919060ff8082169161010090041684565b610c2c61053e565b5060026070541415610c85576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026070556066546001600160a01b03163314610cd35760405162461bcd60e51b815260040180806020018281038252602b815260200180611d79602b913960400191505060405180910390fd5b600082815260676020526040902060020154610100900460ff1615610d295760405162461bcd60e51b8152600401808060200182810382526024815260200180611cdf6024913960400191505060405180910390fd5b6068546000838152606760209081526040808320548151637ddc91e760e11b8152600481019190915290516001600160a01b039094169363fbb923ce93602480840194938390030190829087803b158015610d8357600080fd5b505af1158015610d97573d6000803e3d6000fd5b505050506040513d6020811015610dad57600080fd5b50516000838152606760205260408082205481516361820b3960e01b81526004810191909152841515602482015290516001600160a01b03909316926361820b399260448084019391929182900301818387803b158015610e0d57600080fd5b505af1158015610e21573d6000803e3d6000fd5b505050508015610e5257600082815260676020526040902060018181018190556002909101805460ff191690911790555b60008281526067602090815260409182902060028101805461ff00191661010017905554825184151581529251339391927f3fb74d6e0075eb59087dded98c690b788d0da980a5dc8e55bc95b130cd376991928290030190a350506001607055565b6033546001600160a01b031690565b600054610100900460ff1680610edc5750610edc611226565b80610eea575060005460ff16155b610f255760405162461bcd60e51b815260040180806020018281038252602e815260200180611d25602e913960400191505060405180910390fd5b600054610100900460ff16158015610f50576000805460ff1961ff0019909116610100171660011790555b6001600160a01b038516610f955760405162461bcd60e51b8152600401808060200182810382526022815260200180611d036022913960400191505060405180910390fd5b83610fd15760405162461bcd60e51b815260040180806020018281038252603b815260200180611dc9603b913960400191505060405180910390fd5b8261100d5760405162461bcd60e51b815260040180806020018281038252603f815260200180611c7a603f913960400191505060405180910390fd5b6110156103b1565b606880546001600160a01b038085166001600160a01b031992831617909255606680549288169290911691909117905560696020527f581f23a4a0deb400a8a4e06663ebf76ff0f0b604e60a13eda480f71b646f10a98490557f3f865dedbc67ccfb5808b39aa5f97fc73fd2525f9b72b3ec09fff2b4cf1809d06000527fd3e324e2cafe12a9f62bcfe0d0539288ba8c4893a71b42b860c74fe88dc78a6c83905580156110c8576000805461ff00191690555b5050505050565b606a54606b54606c5483565b7f3f865dedbc67ccfb5808b39aa5f97fc73fd2525f9b72b3ec09fff2b4cf1809d081565b60696020526000908152604090205481565b611119611369565b6001600160a01b031661112a610eb4565b6001600160a01b031614611185576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166111ca5760405162461bcd60e51b8152600401808060200182810382526026815260200180611cb96026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6000611231306114a6565b15905090565b600054610100900460ff16806112505750611250611226565b8061125e575060005460ff16155b6112995760405162461bcd60e51b815260040180806020018281038252602e815260200180611d25602e913960400191505060405180910390fd5b600054610100900460ff161580156112c4576000805460ff1961ff0019909116610100171660011790555b6112cc6114ac565b61044e61154c565b600054610100900460ff16806112ed57506112ed611226565b806112fb575060005460ff16155b6113365760405162461bcd60e51b815260040180806020018281038252602e815260200180611d25602e913960400191505060405180910390fd5b600054610100900460ff16158015611361576000805460ff1961ff0019909116610100171660011790555b61044e611645565b3390565b805460009081526003909101602052604090206002015490565b805460008181526003830160205260409020600201546113a6836116eb565b50915091565b6000828152606f6020526040902060010154610976908261179f565b600082820183811015611422576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b606e546114379060016113c8565b606e55604080518082019091528084801561144e57fe5b81526020908101839052606e546000908152606f9091526040902081518154829060ff1916600183801561147e57fe5b021790555060209190910151600190910155606e546114a190606a9084906119da565b505050565b3b151590565b600054610100900460ff16806114c557506114c5611226565b806114d3575060005460ff16155b61150e5760405162461bcd60e51b815260040180806020018281038252602e815260200180611d25602e913960400191505060405180910390fd5b600054610100900460ff1615801561044e576000805460ff1961ff0019909116610100171660011790558015610460576000805461ff001916905550565b600054610100900460ff16806115655750611565611226565b80611573575060005460ff16155b6115ae5760405162461bcd60e51b815260040180806020018281038252602e815260200180611d25602e913960400191505060405180910390fd5b600054610100900460ff161580156115d9576000805460ff1961ff0019909116610100171660011790555b60006115e3611369565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610460576000805461ff001916905550565b600054610100900460ff168061165e575061165e611226565b8061166c575060005460ff16155b6116a75760405162461bcd60e51b815260040180806020018281038252602e815260200180611d25602e913960400191505060405180910390fd5b600054610100900460ff161580156116d2576000805460ff1961ff0019909116610100171660011790555b60016070558015610460576000805461ff001916905550565b60008082600201541161172f5760405162461bcd60e51b8152600401808060200182810382526025815260200180611da46025913960400191505060405180910390fd5b50805460028201546001141561174e576000808355600183015561176e565b815460009081526003830160205260408082205480855582528120600101555b6000818152600383016020526040812081815560018101829055600290810191909155909101805460001901905590565b60685460408051637ddc91e760e11b81526004810185905290516001600160a01b039092169163fbb923ce916024808201926020929091908290030181600087803b1580156117ed57600080fd5b505af1158015611801573d6000803e3d6000fd5b505050506040513d602081101561181757600080fd5b505160408051633cf3333b60e11b81526004810185905290516001600160a01b03909216916379e6667691602480820192602092909190829003018186803b15801561186257600080fd5b505afa158015611876573d6000803e3d6000fd5b505050506040513d602081101561188c57600080fd5b5051156119745760685460408051637ddc91e760e11b81526004810185905290516001600160a01b039092169163fbb923ce916024808201926020929091908290030181600087803b1580156118e157600080fd5b505af11580156118f5573d6000803e3d6000fd5b505050506040513d602081101561190b57600080fd5b5051604080516338f40f5b60e01b81526004810185905290516001600160a01b03909216916338f40f5b9160248082019260009290919082900301818387803b15801561195757600080fd5b505af115801561196b573d6000803e3d6000fd5b50505050610976565b7f3f865dedbc67ccfb5808b39aa5f97fc73fd2525f9b72b3ec09fff2b4cf1809d0600090815260696020527fd3e324e2cafe12a9f62bcfe0d0539288ba8c4893a71b42b860c74fe88dc78a6c546119cc9083906113c8565b90506114a160008285611429565b80611a2c576040805162461bcd60e51b815260206004820181905260248201527f49642073686f756c6420626520646966666572656e742066726f6d207a65726f604482015290519081900360640190fd5b82546000818152600385016020908152604091829020825160608101845281548152600182015492810192909252600201549181019190915290611ab9578184556001808501839055604080516060810182526000808252602080830182815283850189815288845260038b01909252939091209151825591519281019290925551600290910155611c6a565b8060400151831015611b215783546000908152600385016020818152604080842060019081018790558151606081018352895481528084018681528184018a815289885295909452919094209051815590519281019290925551600290910155818455611c6a565b600184600201541115611bf85760015b8460020154811015611bf65790516000908152600385016020908152604091829020825160608101845281548152600182015492810192909252600201549181018290529190841015611bee578151600090815260038601602081815260408084206001908101548086528286208201805484516060810186528381528087018281528187018e81528d8b529890975285892090518155955193860193909355945160029094019390935584528320869055909152839055611bf6565b600101611b31565b505b60008281526003850160205260409020600201548314611c6a576040805160608101825260008082526001808801805460208086019182528587018a815289865260038c0190915286852095518655905192850192909255905160029093019290925581548152919091208390558290555b5050506002018054600101905556fe43616e6e6f7420696e697469616c697a65206c6174654170706c69636174696f6e73466f72496e766573746d656e744475726174696f6e5f207769746820304f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737343616e6e6f742070726f6365737320616761696e2073616d6520696e766573746d656e7443616e6e6f7420696e697469616c697a652077697468203020616464726573736573496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65645468652070726f6a656374206d75737420626520696e20617070726f766564207374617475734f6e6c792073757065722064656c656761746f722063616e2063616c6c20746869732066756e6374696f6e43616e6e6f7420706f7020616e206974656d2066726f6d20616e20656d707479206c69737443616e6e6f7420696e697469616c697a65206170706c69636174696f6e73466f72496e766573746d656e744475726174696f6e5f20776974682030a264697066735822122004c8daf8cb71d9296fbbf5780fb0fb3cd1c8ca228d9c1dfdee74eeb12aebe4f864736f6c63430007060033",
  "devdoc": {
    "details": "Extends Initializable, SuperGovernance",
    "kind": "dev",
    "methods": {
      "checkCronjobs()": {
        "details": "Calls executeCronjob() at the most 1 cronJob per tx"
      },
      "initialize(address,uint256,uint256,address)": {
        "params": {
          "applicationsForInvestmentDuration_": "duration for applications for investment",
          "lateApplicationsForInvestmentDuration_": "duration for late applications for investment",
          "superDelegator_": "The address of the admin in charge during the first epoch"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requestApproval(uint256)": {
        "details": "Executes cronJob()",
        "params": {
          "projectId": "The id of the investment or investment to approve"
        }
      },
      "startLotteryPhase(uint256)": {
        "details": "First check if the lottery should start",
        "params": {
          "projectId": "The id of the project to update"
        }
      },
      "storeInvestmentTriggering(uint256)": {
        "details": "Adds cronJob",
        "params": {
          "projectId": "The id of the investment to store"
        }
      },
      "superVoteForRequest(uint256,bool)": {
        "details": "Executes cronJobrequires msg.sender to be Super Delegatorrequires current epoch to be 0 or 1",
        "params": {
          "decision": "the decision (Approve / Deny)",
          "requestId": "the Request ID"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateSuperDelegator(address)": {
        "details": "This function is used to update the superDelegator address.",
        "params": {
          "superDelegator_": "The address of the upgraded super delegator."
        }
      }
    },
    "title": "AllianceBlock Governance contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkCronjobs()": {
        "notice": "Checks if needs to execute a DAO cronJob"
      },
      "initialize(address,uint256,uint256,address)": {
        "notice": "Initialize the contract."
      },
      "requestApproval(uint256)": {
        "notice": "Request a investment or investment approval"
      },
      "startLotteryPhase(uint256)": {
        "notice": "Start lottery phase"
      },
      "storeInvestmentTriggering(uint256)": {
        "notice": "Stores Investment Duration"
      },
      "superVoteForRequest(uint256,bool)": {
        "notice": "Votes for Request"
      },
      "updateSuperDelegator(address)": {
        "notice": "Update Superdelegator"
      }
    },
    "notice": "Responsible for governing AllianceBlock's ecosystem",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 890,
        "contract": "contracts/Governance.sol:Governance",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 893,
        "contract": "contracts/Governance.sol:Governance",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2584,
        "contract": "contracts/Governance.sol:Governance",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/Governance.sol:Governance",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 440,
        "contract": "contracts/Governance.sol:Governance",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9108,
        "contract": "contracts/Governance.sol:Governance",
        "label": "totalApprovalRequests",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 9110,
        "contract": "contracts/Governance.sol:Governance",
        "label": "superDelegator",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 9114,
        "contract": "contracts/Governance.sol:Governance",
        "label": "approvalRequests",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_struct(ApprovalRequest)9086_storage)"
      },
      {
        "astId": 9116,
        "contract": "contracts/Governance.sol:Governance",
        "label": "projectManager",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IProjectManager)9664"
      },
      {
        "astId": 9120,
        "contract": "contracts/Governance.sol:Governance",
        "label": "updatableVariables",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 9129,
        "contract": "contracts/Governance.sol:Governance",
        "label": "cronjobList",
        "offset": 0,
        "slot": "106",
        "type": "t_struct(LinkedList)10213_storage"
      },
      {
        "astId": 9131,
        "contract": "contracts/Governance.sol:Governance",
        "label": "totalCronjobs",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 9135,
        "contract": "contracts/Governance.sol:Governance",
        "label": "cronjobs",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_uint256,t_struct(Cronjob)9127_storage)"
      },
      {
        "astId": 3091,
        "contract": "contracts/Governance.sol:Governance",
        "label": "_status",
        "offset": 0,
        "slot": "112",
        "type": "t_uint256"
      },
      {
        "astId": 3134,
        "contract": "contracts/Governance.sol:Governance",
        "label": "__gap",
        "offset": 0,
        "slot": "113",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IProjectManager)9664": {
        "encoding": "inplace",
        "label": "contract IProjectManager",
        "numberOfBytes": "20"
      },
      "t_enum(CronjobType)9122": {
        "encoding": "inplace",
        "label": "enum GovernanceTypesAndStorage.CronjobType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(ApprovalRequest)9086_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GovernanceTypesAndStorage.ApprovalRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(ApprovalRequest)9086_storage"
      },
      "t_mapping(t_uint256,t_struct(Cronjob)9127_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GovernanceTypesAndStorage.Cronjob)",
        "numberOfBytes": "32",
        "value": "t_struct(Cronjob)9127_storage"
      },
      "t_mapping(t_uint256,t_struct(Node)10202_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OrderedDoubleLinkedList.Node)",
        "numberOfBytes": "32",
        "value": "t_struct(Node)10202_storage"
      },
      "t_struct(ApprovalRequest)9086_storage": {
        "encoding": "inplace",
        "label": "struct GovernanceTypesAndStorage.ApprovalRequest",
        "members": [
          {
            "astId": 9079,
            "contract": "contracts/Governance.sol:Governance",
            "label": "projectId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9081,
            "contract": "contracts/Governance.sol:Governance",
            "label": "approvalsProvided",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9083,
            "contract": "contracts/Governance.sol:Governance",
            "label": "isApproved",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 9085,
            "contract": "contracts/Governance.sol:Governance",
            "label": "isProcessed",
            "offset": 1,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Cronjob)9127_storage": {
        "encoding": "inplace",
        "label": "struct GovernanceTypesAndStorage.Cronjob",
        "members": [
          {
            "astId": 9124,
            "contract": "contracts/Governance.sol:Governance",
            "label": "cronjobType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(CronjobType)9122"
          },
          {
            "astId": 9126,
            "contract": "contracts/Governance.sol:Governance",
            "label": "projectId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LinkedList)10213_storage": {
        "encoding": "inplace",
        "label": "struct OrderedDoubleLinkedList.LinkedList",
        "members": [
          {
            "astId": 10204,
            "contract": "contracts/Governance.sol:Governance",
            "label": "head",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10206,
            "contract": "contracts/Governance.sol:Governance",
            "label": "tail",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10208,
            "contract": "contracts/Governance.sol:Governance",
            "label": "size",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 10212,
            "contract": "contracts/Governance.sol:Governance",
            "label": "nodes",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_struct(Node)10202_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Node)10202_storage": {
        "encoding": "inplace",
        "label": "struct OrderedDoubleLinkedList.Node",
        "members": [
          {
            "astId": 10197,
            "contract": "contracts/Governance.sol:Governance",
            "label": "next",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10199,
            "contract": "contracts/Governance.sol:Governance",
            "label": "previous",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 10201,
            "contract": "contracts/Governance.sol:Governance",
            "label": "value",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}