{
  "address": "0x013Ba8a5f647158ff36D1E18f5e9C35B04e6Ed6E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "investmentId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "ApprovalRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "registryAddress_",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "InitGovernance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "investmentId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "decision",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "VotedForRequest",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "approvalRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "investmentId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "approvalsProvided",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isApproved",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkCronjobs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cronjobList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "head",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tail",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cronjobs",
      "outputs": [
        {
          "internalType": "enum GovernanceTypesAndStorage.CronjobType",
          "name": "cronjobType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "externalId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superDelegator_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "applicationsForInvestmentDuration_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lateApplicationsForInvestmentDuration_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "investmentId",
          "type": "uint256"
        }
      ],
      "name": "requestApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registryAddress_",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "investmentId",
          "type": "uint256"
        }
      ],
      "name": "storeInvestmentTriggering",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "superDelegator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "decision",
          "type": "bool"
        }
      ],
      "name": "superVoteForRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalApprovalRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCronjobs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "updatableVariables",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5af63f4105aff2e011e33d3faaccbdb84866db0a099de7554df582d0340420d7",
  "receipt": {
    "to": null,
    "from": "0x4C7B849e8F7c970744b4741BE35541E20990392d",
    "contractAddress": "0x013Ba8a5f647158ff36D1E18f5e9C35B04e6Ed6E",
    "transactionIndex": 12,
    "gasUsed": "1182095",
    "logsBloom": "0x
    "blockHash": "0xf0add9a647303f000f6b2c4cc8ad13a7efdd4305e6e7539fed743f973b199bb3",
    "transactionHash": "0x5af63f4105aff2e011e33d3faaccbdb84866db0a099de7554df582d0340420d7",
    "logs": [],
    "blockNumber": 8771614,
    "cumulativeGasUsed": "2038337",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "63d67ace6a058016357a612de751f207",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"investmentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ApprovalRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registryAddress_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"InitGovernance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"investmentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"decision\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"VotedForRequest\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"approvalRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"investmentId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"approvalsProvided\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkCronjobs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cronjobList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"head\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tail\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cronjobs\",\"outputs\":[{\"internalType\":\"enum GovernanceTypesAndStorage.CronjobType\",\"name\":\"cronjobType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"externalId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superDelegator_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"applicationsForInvestmentDuration_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lateApplicationsForInvestmentDuration_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"investmentId\",\"type\":\"uint256\"}],\"name\":\"requestApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress_\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"investmentId\",\"type\":\"uint256\"}],\"name\":\"storeInvestmentTriggering\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"superDelegator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"decision\",\"type\":\"bool\"}],\"name\":\"superVoteForRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalApprovalRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCronjobs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"updatableVariables\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extends Initializable, SuperGovernance\",\"kind\":\"dev\",\"methods\":{\"checkCronjobs()\":{\"details\":\"Calls executeCronjob() at the most 1 cronJob per tx\"},\"initialize(address,uint256,uint256)\":{\"params\":{\"applicationsForInvestmentDuration_\":\"duration for applications for investment\",\"lateApplicationsForInvestmentDuration_\":\"duration forlate applications for investment\",\"superDelegator_\":\"The address of the admin in charge during the first epoch\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requestApproval(uint256)\":{\"details\":\"Executes cronJob()\",\"params\":{\"investmentId\":\"The id of the investment or investment to approve\"}},\"setRegistry(address)\":{\"details\":\"used to initialize SuperGovernancerequires not already initialized\",\"params\":{\"registryAddress_\":\"the Registry address\"}},\"storeInvestmentTriggering(uint256)\":{\"details\":\"Adds cronJob\",\"params\":{\"investmentId\":\"The id of the investment to store\"}},\"superVoteForRequest(uint256,bool)\":{\"details\":\"Executes cronJobrequires msg.sender to be Super Delegatorrequires current epoch to be 0 or 1\",\"params\":{\"decision\":\"the decision (Approve / Deny)\",\"requestId\":\"the Request ID\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"AllianceBlock Governance contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkCronjobs()\":{\"notice\":\"Checks if needs to execute a DAO cronJob\"},\"initialize(address,uint256,uint256)\":{\"notice\":\"Initialize the contract.\"},\"requestApproval(uint256)\":{\"notice\":\"Request a investment or investment approval\"},\"setRegistry(address)\":{\"notice\":\"Sets Registry contract\"},\"storeInvestmentTriggering(uint256)\":{\"notice\":\"Stores Investment Duration\"},\"superVoteForRequest(uint256,bool)\":{\"notice\":\"Votes for Request\"}},\"notice\":\"Responsible for governing AllianceBlock's ecosystem\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Governance.sol\":\"Governance\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/Governance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./governance/SuperGovernance.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IRegistry.sol\\\";\\nimport \\\"./interfaces/IStaking.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title AllianceBlock Governance contract\\n * @dev Extends Initializable, SuperGovernance\\n * @notice Responsible for governing AllianceBlock's ecosystem\\n */\\ncontract Governance is Initializable, SuperGovernance {\\n    using SafeMath for uint256;\\n    using DoubleLinkedList for DoubleLinkedList.LinkedList;\\n\\n    /**\\n     * @notice Initialize the contract.\\n     * @param superDelegator_ The address of the admin in charge during the first epoch\\n     * @param applicationsForInvestmentDuration_ duration for applications for investment\\n     * @param lateApplicationsForInvestmentDuration_ duration forlate applications for investment\\n     */\\n    function initialize(\\n        address superDelegator_,\\n        uint256 applicationsForInvestmentDuration_,\\n        uint256 lateApplicationsForInvestmentDuration_\\n    ) public initializer {\\n        __Ownable_init();\\n\\n        superDelegator = superDelegator_;\\n\\n        updatableVariables[\\n            keccak256(abi.encode(\\\"applicationsForInvestmentDuration\\\"))\\n        ] = applicationsForInvestmentDuration_;\\n        updatableVariables[\\n            keccak256(abi.encode(\\\"lateApplicationsForInvestmentDuration\\\"))\\n        ] = lateApplicationsForInvestmentDuration_;\\n    }\\n\\n    /**\\n     * @notice Request a investment or investment approval\\n     * @dev Executes cronJob()\\n     * @param investmentId The id of the investment or investment to approve\\n     */\\n    function requestApproval(\\n        uint256 investmentId\\n    ) external onlyRegistry() checkCronjob() {\\n        approvalRequests[totalApprovalRequests].investmentId = investmentId;\\n\\n        emit ApprovalRequested(\\n            approvalRequests[totalApprovalRequests].investmentId,\\n            msg.sender\\n        );\\n\\n        totalApprovalRequests = totalApprovalRequests.add(1);\\n    }\\n\\n    /**\\n     * @notice Stores Investment Duration\\n     * @dev Adds cronJob\\n     * @param investmentId The id of the investment to store\\n     */\\n    function storeInvestmentTriggering(uint256 investmentId) external onlyRegistry() {\\n        uint256 nextCronjobTimestamp =\\n            block.timestamp.add(updatableVariables[keccak256(abi.encode(\\\"applicationsForInvestmentDuration\\\"))]);\\n        addCronjob(CronjobType.INVESTMENT, nextCronjobTimestamp, investmentId);\\n    }\\n}\\n\",\"keccak256\":\"0x6ec128f45dfc966eca693f3316be87bfd57dc1b65d4dd0fd223c3c31637396fb\",\"license\":\"MIT\"},\"contracts/governance/DaoCronjob.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./GovernanceTypesAndStorage.sol\\\";\\nimport \\\"../interfaces/IRegistry.sol\\\";\\n\\n/**\\n * @title AllianceBlock Governance contract\\n * @dev Extends GovernanceTypesAndStorage\\n * @notice Responsible for governing AllianceBlock's ecosystem\\n */\\ncontract DaoCronjob is GovernanceTypesAndStorage {\\n    using SafeMath for uint256;\\n    using ValuedDoubleLinkedList for ValuedDoubleLinkedList.LinkedList;\\n    using DoubleLinkedList for DoubleLinkedList.LinkedList;\\n\\n    modifier checkCronjob() {\\n        checkCronjobs();\\n        _;\\n    }\\n\\n    /**\\n     * @notice Checks if needs to execute a DAO cronJob\\n     * @dev Calls executeCronjob() at the most 1 cronJob per tx\\n     */\\n    function checkCronjobs() public returns (bool) {\\n        uint256 mostRecentCronjobTimestamp = cronjobList.getHeadValue();\\n        if (mostRecentCronjobTimestamp == 0 || block.timestamp < mostRecentCronjobTimestamp) return false;\\n        else {\\n            // only pop head for now for gas reasons, maybe later we can execute them all together.\\n            (uint256 head, uint256 timestamp) = cronjobList.popHeadAndValue();\\n            executeCronjob(head, timestamp);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Executes the next DAO cronJob\\n     * @param cronjobId The cronJob id to be executed.\\n     * @param timestamp The current block height\\n     */\\n    function executeCronjob(uint256 cronjobId, uint256 timestamp) internal {\\n        updateInvestment(cronjobs[cronjobId].externalId, timestamp);\\n    }\\n\\n    /**\\n     * @notice Adds a cronJob to the queue\\n     * @dev Adds a node to the cronjobList (ValuedDoubleLinkedList)\\n     * @param cronjobType The type of cronJob\\n     * @param timestamp The current block height\\n     * @param externalId Id of the request in case of dao approval, change voting request or investment\\n     */\\n    function addCronjob(\\n        CronjobType cronjobType,\\n        uint256 timestamp,\\n        uint256 externalId\\n    ) internal {\\n        totalCronjobs = totalCronjobs.add(1);\\n        cronjobs[totalCronjobs] = Cronjob(cronjobType, externalId);\\n        cronjobList.addNodeIncrement(timestamp, totalCronjobs);\\n    }\\n\\n    /**\\n     * @notice Removes a cronJob from the queue\\n     * @dev Removes a node from the cronjobList (ValuedDoubleLinkedList)\\n     * @param cronjobId The cronJob ID\\n     */\\n    function removeCronjob(uint256 cronjobId) internal {\\n        cronjobList.removeNode(cronjobId);\\n    }\\n\\n    /**\\n     * @notice Updates an investment\\n     * @dev checks if lottery should start or adds cronJob for late application\\n     * @param investmentId The id of the investment to update\\n     * @param timestamp the current block height\\n     */\\n    function updateInvestment(uint256 investmentId, uint256 timestamp) internal {\\n        if (registry.getRequestingInterestStatus(investmentId)) {\\n            registry.startLotteryPhase(investmentId);\\n        } else {\\n            uint256 nextCronjobTimestamp =\\n                timestamp.add(updatableVariables[keccak256(abi.encode(\\\"lateApplicationsForInvestmentDuration\\\"))]);\\n            addCronjob(CronjobType.INVESTMENT, nextCronjobTimestamp, investmentId);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5a74368c4595ecadf897d99923b6c000fb145b1c4e3638ed38b9e3073537181\",\"license\":\"MIT\"},\"contracts/governance/GovernanceTypesAndStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../interfaces/IRegistry.sol\\\";\\nimport \\\"../libs/ValuedDoubleLinkedList.sol\\\";\\nimport \\\"../libs/DoubleLinkedList.sol\\\";\\n\\n/**\\n * @title AllianceBlock GovernanceStorage contract\\n * @notice Responsible for governance storage\\n */\\ncontract GovernanceTypesAndStorage {\\n    using ValuedDoubleLinkedList for ValuedDoubleLinkedList.LinkedList;\\n    using DoubleLinkedList for DoubleLinkedList.LinkedList;\\n\\n    struct ApprovalRequest {\\n        uint256 investmentId; // The investment id for which approcal is requested.\\n        uint256 approvalsProvided; // The number of approvals that this request has gathered.\\n        bool isApproved; // True if request is approved, false if not.\\n    }\\n\\n    // EVENTS\\n    event VotedForRequest(uint256 indexed investmentId, uint256 indexed requestId, bool decision, address indexed user);\\n    event ApprovalRequested(\\n        uint256 indexed investmentId,\\n        address indexed user\\n    );\\n    event InitGovernance(address indexed registryAddress_, address indexed user);\\n\\n    uint256 public totalApprovalRequests; // The total amount of approvals requested.\\n\\n    address public superDelegator;\\n\\n    mapping(uint256 => ApprovalRequest) public approvalRequests;\\n\\n    IRegistry public registry;\\n\\n    uint256 public totalIds;\\n\\n    mapping(bytes32 => uint256) public updatableVariables;\\n\\n    // CRONJOB types and variables\\n    enum CronjobType {\\n        INVESTMENT // Cronjob type for users to show interest for an investment.\\n    }\\n\\n    struct Cronjob {\\n        CronjobType cronjobType; // This is the cronjob type.\\n        uint256 externalId; // This is the id of the request in case of dao approval, change voting request or investment.\\n    }\\n\\n    // TODO - Make this simple linked list, not double (we don't need to remove anything else than head MAYBE).\\n    ValuedDoubleLinkedList.LinkedList public cronjobList;\\n    uint256 public totalCronjobs;\\n\\n    mapping(uint256 => Cronjob) public cronjobs; // cronjobId to Cronjob.\\n\\n    // MODIFIERS\\n\\n    modifier onlyRegistry() {\\n        require(msg.sender == address(registry), \\\"Only Registry contract\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x7381d364de500eb73ba0dda194ea00bf13d6ff32c01d960b05e450a99930f59c\",\"license\":\"MIT\"},\"contracts/governance/SuperGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./DaoCronjob.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * @title AllianceBlock Governance contract\\n * @dev Extends OwnableUpgradeable, DaoCronjob\\n * @notice Responsible for govern AllianceBlock's ecosystem\\n */\\ncontract SuperGovernance is OwnableUpgradeable, DaoCronjob {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @notice Sets Registry contract\\n     * @dev used to initialize SuperGovernance\\n     * @dev requires not already initialized\\n     * @param registryAddress_ the Registry address\\n     */\\n    function setRegistry(address registryAddress_) external onlyOwner() {\\n        require(address(registry) == address(0), \\\"Cannot initialize second time\\\");\\n        registry = IRegistry(registryAddress_);\\n\\n        emit InitGovernance(registryAddress_, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Votes for Request\\n     * @dev Executes cronJob\\n     * @dev requires msg.sender to be Super Delegator\\n     * @dev requires current epoch to be 0 or 1\\n     * @param requestId the Request ID\\n     * @param decision the decision (Approve / Deny)\\n     */\\n    function superVoteForRequest(uint256 requestId, bool decision) external checkCronjob() {\\n        require(msg.sender == superDelegator, \\\"Only super delegator can call this function\\\");\\n        require(approvalRequests[requestId].approvalsProvided == 0, \\\"Cannot approve again same investment\\\");\\n\\n        registry.decideForInvestment(approvalRequests[requestId].investmentId, decision);\\n\\n        if (decision) {\\n            approvalRequests[requestId].approvalsProvided = approvalRequests[requestId].approvalsProvided.add(1);\\n            approvalRequests[requestId].isApproved = true;\\n        }\\n\\n        emit VotedForRequest(approvalRequests[requestId].investmentId, requestId, decision, msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xd41fcce2f62c13c042b2146b7949809a11da97e4f1e7cc68a8e8f20cd110da87\",\"license\":\"MIT\"},\"contracts/interfaces/IRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title Interface of the Registry contract.\\n */\\ninterface IRegistry {\\n    function decideForInvestment(uint256 investmentId, bool decision) external;\\n\\n    function getRequestingInterestStatus(uint256 investmentId) external view returns (bool);\\n\\n    function startLotteryPhase(uint256 investmentId) external;\\n}\\n\",\"keccak256\":\"0xe4ffe725b91111f3705d93066911bd26024526e3baf1ba0f278c98810966d65f\",\"license\":\"MIT\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title Interface of the Staking contract.\\n */\\ninterface IStaking {\\n    function getBalance(address staker_) external view returns (uint256);\\n\\n    function getAmountsToStake()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getEligibilityForActionProvision(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8bf246b0444f008c7c170d09637cd054c2175cfe95336507c6a18adc427cc1ab\",\"license\":\"MIT\"},\"contracts/libs/DoubleLinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title Double linked-list\\n */\\nlibrary DoubleLinkedList {\\n    struct Node {\\n        uint256 next;\\n        uint256 previous;\\n    }\\n\\n    struct LinkedList {\\n        uint256 head;\\n        uint256 tail;\\n        uint256 size;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    /**\\n     * @notice Get Head ID\\n     * @param self the LinkedList\\n     * @return the first item of the list\\n     */\\n    function getHeadId(LinkedList storage self) internal view returns (uint256) {\\n        return self.head;\\n    }\\n\\n    /**\\n     * @notice Get list size\\n     * @param self the LinkedList\\n     * @return the size of the list\\n     */\\n    function getSize(LinkedList storage self) internal view returns (uint256) {\\n        return self.size;\\n    }\\n\\n    /**\\n     * @notice Adds a new node to the list\\n     * @param self the LinkedList\\n     * @param id the node to add\\n     */\\n    function addNode(LinkedList storage self, uint256 id) internal {\\n        //If empty\\n        if (self.head == 0) {\\n            self.head = id;\\n            self.tail = id;\\n            self.nodes[id] = Node(0, 0);\\n        }\\n        //Else push in tail\\n        else {\\n            self.nodes[self.tail].next = id;\\n            self.nodes[id] = Node(0, self.tail);\\n            self.tail = id;\\n        }\\n\\n        self.size += 1;\\n    }\\n\\n    /**\\n     * @notice Removes node from the list\\n     * @param self the LinkedList\\n     * @param id the id of the node to remove\\n     */\\n    function removeNode(LinkedList storage self, uint256 id) internal {\\n        if (self.size == 1) {\\n            self.head = 0;\\n            self.tail = 0;\\n        } else if (id == self.head) {\\n            self.head = self.nodes[self.head].next;\\n            self.nodes[self.head].previous = 0;\\n        } else if (id == self.tail) {\\n            self.tail = self.nodes[self.tail].previous;\\n            self.nodes[self.tail].next = 0;\\n        } else {\\n            self.nodes[self.nodes[id].next].previous = self.nodes[id].previous;\\n            self.nodes[self.nodes[id].previous].next = self.nodes[id].next;\\n        }\\n\\n        self.size -= 1;\\n    }\\n\\n    /**\\n     * @notice Pops the head of the list\\n     * @param self the LinkedList\\n     * @return head the first item of the list\\n     */\\n    function popHead(LinkedList storage self) internal returns (uint256 head) {\\n        head = self.head;\\n\\n        if (self.size == 1) {\\n            self.head = 0;\\n            self.tail = 0;\\n        } else {\\n            self.head = self.nodes[self.head].next;\\n            self.nodes[self.head].previous = 0;\\n        }\\n\\n        self.size -= 1;\\n    }\\n\\n    /**\\n     * @notice Get id by index\\n     * @param self the LinkedList\\n     * @param index the id of the index\\n     * @return id the item in index position\\n     */\\n    function getIndexedId(LinkedList storage self, uint256 index) internal view returns (uint256 id) {\\n        id = self.head;\\n\\n        for (uint256 i = 1; i < index; i++) {\\n            id = self.nodes[id].next;\\n        }\\n    }\\n\\n    /**\\n     * @notice Clone LinkedList\\n     * @param self the LinkedList\\n     * @param listToClone the LinkedList storage to clone the list from\\n     */\\n    function cloneList(LinkedList storage self, LinkedList storage listToClone) internal {\\n        self.head = listToClone.head;\\n        self.tail = listToClone.tail;\\n        self.size = listToClone.size;\\n\\n        uint256 id = listToClone.head;\\n\\n        for (uint256 i = 0; i < listToClone.size; i++) {\\n            self.nodes[id] = listToClone.nodes[id];\\n            id = listToClone.nodes[id].next;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd3cd5bee5724d7dcc04ad26e7976eede81cfaf3e3a530cab5faa572181b99e15\",\"license\":\"MIT\"},\"contracts/libs/ValuedDoubleLinkedList.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title the Valued Double Linked List library\\n */\\nlibrary ValuedDoubleLinkedList {\\n    struct Node {\\n        uint256 next;\\n        uint256 previous;\\n        uint256 value;\\n    }\\n\\n    struct LinkedList {\\n        uint256 head;\\n        uint256 tail;\\n        uint256 size;\\n        mapping(uint256 => Node) nodes;\\n    }\\n\\n    /**\\n     * @notice Get Head ID\\n     * @param self the LinkedList\\n     * @return the first item of the list\\n     */\\n    function getHeadId(LinkedList storage self) internal view returns (uint256) {\\n        return self.head;\\n    }\\n\\n    /**\\n     * @notice Get head value\\n     * @param self the LinkedList\\n     * @return the value of the first node\\n     */\\n    function getHeadValue(LinkedList storage self) internal view returns (uint256) {\\n        return self.nodes[self.head].value;\\n    }\\n\\n    /**\\n     * @notice Get list size\\n     * @param self the LinkedList\\n     * @return the size of the list\\n     */\\n    function getSize(LinkedList storage self) internal view returns (uint256) {\\n        return self.size;\\n    }\\n\\n    /**\\n     * @notice Adds node increment\\n     * @param self the LinkedList\\n     * @param value the value to add\\n     * @param id the id of the node\\n     */\\n    function addNodeIncrement(\\n        LinkedList storage self,\\n        uint256 value,\\n        uint256 id\\n    ) internal {\\n        Node memory node = self.nodes[self.head];\\n\\n        //If empty\\n        if (self.head == 0) {\\n            self.head = id;\\n            self.tail = id;\\n            self.nodes[id] = Node(0, 0, value);\\n        }\\n        //If head\\n        else if (value < node.value) {\\n            self.nodes[self.head].previous = id;\\n            self.nodes[id] = Node(self.head, 0, value);\\n            self.head = id;\\n        } else {\\n            //If middle\\n            if (self.size > 1) {\\n                for (uint256 i = 1; i < self.size; i++) {\\n                    node = self.nodes[node.next];\\n                    if (value < node.value) {\\n                        uint256 currentId = self.nodes[node.next].previous;\\n                        self.nodes[node.next].previous = id;\\n                        self.nodes[id] = Node(currentId, self.nodes[currentId].next, value);\\n                        self.nodes[currentId].next = id;\\n                        break;\\n                    }\\n                }\\n            }\\n            //If tail\\n            if (self.nodes[id].value != value) {\\n                self.nodes[id] = Node(0, self.tail, value);\\n                self.nodes[self.tail].next = id;\\n                self.tail = id;\\n            }\\n        }\\n\\n        self.size += 1;\\n    }\\n\\n    /**\\n     * @notice Adds node decrement\\n     * @param self the LinkedList\\n     * @param value the value to decrement\\n     * @param id the id of the node\\n     */\\n    function addNodeDecrement(\\n        LinkedList storage self,\\n        uint256 value,\\n        uint256 id\\n    ) internal {\\n        Node memory node = self.nodes[self.head];\\n\\n        //If empty\\n        if (self.head == 0) {\\n            self.head = id;\\n            self.tail = id;\\n            self.nodes[id] = Node(0, 0, value);\\n        }\\n        //If head\\n        else if (value > node.value) {\\n            self.nodes[self.head].previous = id;\\n            self.nodes[id] = Node(self.head, 0, value);\\n            self.head = id;\\n        } else {\\n            //If middle\\n            if (self.size > 1) {\\n                for (uint256 i = 1; i < self.size; i++) {\\n                    node = self.nodes[node.next];\\n                    if (value > node.value) {\\n                        uint256 currentId = self.nodes[node.next].previous;\\n                        self.nodes[node.next].previous = id;\\n                        self.nodes[id] = Node(currentId, self.nodes[currentId].next, value);\\n                        self.nodes[currentId].next = id;\\n                        break;\\n                    }\\n                }\\n            }\\n            //If tail\\n            if (self.nodes[id].value != value) {\\n                self.nodes[id] = Node(0, self.tail, value);\\n                self.nodes[self.tail].next = id;\\n                self.tail = id;\\n            }\\n        }\\n\\n        self.size += 1;\\n    }\\n\\n    /**\\n     * @notice Removes a node\\n     * @param self the LinkedList\\n     * @param id the id of the node to remove\\n     */\\n    function removeNode(LinkedList storage self, uint256 id) internal {\\n        if (self.size == 1) {\\n            self.head = 0;\\n            self.tail = 0;\\n        } else if (id == self.head) {\\n            self.head = self.nodes[self.head].next;\\n            self.nodes[self.head].previous = 0;\\n        } else if (id == self.tail) {\\n            self.tail = self.nodes[self.tail].previous;\\n            self.nodes[self.tail].next = 0;\\n        } else {\\n            self.nodes[self.nodes[id].next].previous = self.nodes[id].previous;\\n            self.nodes[self.nodes[id].previous].next = self.nodes[id].next;\\n        }\\n\\n        self.size -= 1;\\n    }\\n\\n    /**\\n     * @notice Pops the head of the list\\n     * @param self the LinkedList\\n     * @return head the first item of the list\\n     */\\n    function popHead(LinkedList storage self) internal returns (uint256 head) {\\n        head = self.head;\\n\\n        if (self.size == 1) {\\n            self.head = 0;\\n            self.tail = 0;\\n        } else {\\n            self.head = self.nodes[self.head].next;\\n            self.nodes[self.head].previous = 0;\\n        }\\n\\n        self.size -= 1;\\n    }\\n\\n    /**\\n     * @notice Pops the head and value of the list\\n     * @param self the LinkedList\\n     * @return head\\n     * @return value\\n     */\\n    function popHeadAndValue(LinkedList storage self) internal returns (uint256 head, uint256 value) {\\n        head = self.head;\\n        value = self.nodes[self.head].value;\\n\\n        if (self.size == 1) {\\n            self.head = 0;\\n            self.tail = 0;\\n        } else {\\n            self.head = self.nodes[self.head].next;\\n            self.nodes[self.head].previous = 0;\\n        }\\n\\n        self.size -= 1;\\n    }\\n\\n    /**\\n     * @notice Removes multiple nodes\\n     * @param self the LinkedList\\n     * @param amountOfNodes the number of nodes to remove starting from Head\\n     */\\n    function removeMultipleFromHead(LinkedList storage self, uint256 amountOfNodes) internal {\\n        for (uint256 i = 0; i < amountOfNodes; i++) {\\n            if (self.size == 1) {\\n                self.head = 0;\\n                self.tail = 0;\\n            } else {\\n                self.head = self.nodes[self.head].next;\\n                self.nodes[self.head].previous = 0;\\n            }\\n\\n            self.size -= 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get position from ID\\n     * @param self the LinkedList\\n     * @param id the id to search\\n     * @return the index position for the id provided\\n     */\\n    function getPositionForId(LinkedList storage self, uint256 id) internal view returns (uint256) {\\n        uint256 positionCounter;\\n\\n        if (self.nodes[id].value == 0) return 0; // If not in list.\\n\\n        while (true) {\\n            positionCounter += 1;\\n            if (id == self.head) break;\\n\\n            id = self.nodes[id].previous;\\n        }\\n\\n        return positionCounter;\\n    }\\n\\n    /**\\n     * @notice Clones ValuedDoubleLinkedList\\n     * @param self the LinkedList\\n     * @param listToClone the LinkedList storage to clone the list from\\n     */\\n    function cloneList(LinkedList storage self, LinkedList storage listToClone) internal {\\n        self.head = listToClone.head;\\n        self.tail = listToClone.tail;\\n        self.size = listToClone.size;\\n\\n        uint256 id = listToClone.head;\\n\\n        for (uint256 i = 0; i < listToClone.size; i++) {\\n            self.nodes[id] = listToClone.nodes[id];\\n            id = listToClone.nodes[id].next;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe754800f2885bf9424ebdabcbbb96c57fc889d6a4c45bfc80649d6983681bb86\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Extends Initializable, SuperGovernance",
    "kind": "dev",
    "methods": {
      "checkCronjobs()": {
        "details": "Calls executeCronjob() at the most 1 cronJob per tx"
      },
      "initialize(address,uint256,uint256)": {
        "params": {
          "applicationsForInvestmentDuration_": "duration for applications for investment",
          "lateApplicationsForInvestmentDuration_": "duration forlate applications for investment",
          "superDelegator_": "The address of the admin in charge during the first epoch"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requestApproval(uint256)": {
        "details": "Executes cronJob()",
        "params": {
          "investmentId": "The id of the investment or investment to approve"
        }
      },
      "setRegistry(address)": {
        "details": "used to initialize SuperGovernancerequires not already initialized",
        "params": {
          "registryAddress_": "the Registry address"
        }
      },
      "storeInvestmentTriggering(uint256)": {
        "details": "Adds cronJob",
        "params": {
          "investmentId": "The id of the investment to store"
        }
      },
      "superVoteForRequest(uint256,bool)": {
        "details": "Executes cronJobrequires msg.sender to be Super Delegatorrequires current epoch to be 0 or 1",
        "params": {
          "decision": "the decision (Approve / Deny)",
          "requestId": "the Request ID"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "AllianceBlock Governance contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkCronjobs()": {
        "notice": "Checks if needs to execute a DAO cronJob"
      },
      "initialize(address,uint256,uint256)": {
        "notice": "Initialize the contract."
      },
      "requestApproval(uint256)": {
        "notice": "Request a investment or investment approval"
      },
      "setRegistry(address)": {
        "notice": "Sets Registry contract"
      },
      "storeInvestmentTriggering(uint256)": {
        "notice": "Stores Investment Duration"
      },
      "superVoteForRequest(uint256,bool)": {
        "notice": "Votes for Request"
      }
    },
    "notice": "Responsible for governing AllianceBlock's ecosystem",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 890,
        "contract": "contracts/Governance.sol:Governance",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 893,
        "contract": "contracts/Governance.sol:Governance",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2584,
        "contract": "contracts/Governance.sol:Governance",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/Governance.sol:Governance",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 440,
        "contract": "contracts/Governance.sol:Governance",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8121,
        "contract": "contracts/Governance.sol:Governance",
        "label": "totalApprovalRequests",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 8123,
        "contract": "contracts/Governance.sol:Governance",
        "label": "superDelegator",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 8127,
        "contract": "contracts/Governance.sol:Governance",
        "label": "approvalRequests",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_struct(ApprovalRequest)8097_storage)"
      },
      {
        "astId": 8129,
        "contract": "contracts/Governance.sol:Governance",
        "label": "registry",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IRegistry)8478"
      },
      {
        "astId": 8131,
        "contract": "contracts/Governance.sol:Governance",
        "label": "totalIds",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 8135,
        "contract": "contracts/Governance.sol:Governance",
        "label": "updatableVariables",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 8144,
        "contract": "contracts/Governance.sol:Governance",
        "label": "cronjobList",
        "offset": 0,
        "slot": "107",
        "type": "t_struct(LinkedList)9175_storage"
      },
      {
        "astId": 8146,
        "contract": "contracts/Governance.sol:Governance",
        "label": "totalCronjobs",
        "offset": 0,
        "slot": "111",
        "type": "t_uint256"
      },
      {
        "astId": 8150,
        "contract": "contracts/Governance.sol:Governance",
        "label": "cronjobs",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_uint256,t_struct(Cronjob)8142_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IRegistry)8478": {
        "encoding": "inplace",
        "label": "contract IRegistry",
        "numberOfBytes": "20"
      },
      "t_enum(CronjobType)8137": {
        "encoding": "inplace",
        "label": "enum GovernanceTypesAndStorage.CronjobType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(ApprovalRequest)8097_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GovernanceTypesAndStorage.ApprovalRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(ApprovalRequest)8097_storage"
      },
      "t_mapping(t_uint256,t_struct(Cronjob)8142_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GovernanceTypesAndStorage.Cronjob)",
        "numberOfBytes": "32",
        "value": "t_struct(Cronjob)8142_storage"
      },
      "t_mapping(t_uint256,t_struct(Node)9164_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ValuedDoubleLinkedList.Node)",
        "numberOfBytes": "32",
        "value": "t_struct(Node)9164_storage"
      },
      "t_struct(ApprovalRequest)8097_storage": {
        "encoding": "inplace",
        "label": "struct GovernanceTypesAndStorage.ApprovalRequest",
        "members": [
          {
            "astId": 8092,
            "contract": "contracts/Governance.sol:Governance",
            "label": "investmentId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8094,
            "contract": "contracts/Governance.sol:Governance",
            "label": "approvalsProvided",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8096,
            "contract": "contracts/Governance.sol:Governance",
            "label": "isApproved",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Cronjob)8142_storage": {
        "encoding": "inplace",
        "label": "struct GovernanceTypesAndStorage.Cronjob",
        "members": [
          {
            "astId": 8139,
            "contract": "contracts/Governance.sol:Governance",
            "label": "cronjobType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(CronjobType)8137"
          },
          {
            "astId": 8141,
            "contract": "contracts/Governance.sol:Governance",
            "label": "externalId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LinkedList)9175_storage": {
        "encoding": "inplace",
        "label": "struct ValuedDoubleLinkedList.LinkedList",
        "members": [
          {
            "astId": 9166,
            "contract": "contracts/Governance.sol:Governance",
            "label": "head",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9168,
            "contract": "contracts/Governance.sol:Governance",
            "label": "tail",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9170,
            "contract": "contracts/Governance.sol:Governance",
            "label": "size",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9174,
            "contract": "contracts/Governance.sol:Governance",
            "label": "nodes",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_uint256,t_struct(Node)9164_storage)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Node)9164_storage": {
        "encoding": "inplace",
        "label": "struct ValuedDoubleLinkedList.Node",
        "members": [
          {
            "astId": 9159,
            "contract": "contracts/Governance.sol:Governance",
            "label": "next",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9161,
            "contract": "contracts/Governance.sol:Governance",
            "label": "previous",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9163,
            "contract": "contracts/Governance.sol:Governance",
            "label": "value",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}