{
  "address": "0x00876bC3bCC6f478e79F09F96F8a2De223ca6471",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EIP712DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "action",
          "type": "string"
        }
      ],
      "name": "checkAction",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exist",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrow",
      "outputs": [
        {
          "internalType": "contract IEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "reputationalAlbtReward",
          "type": "uint256"
        }
      ],
      "name": "importAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardPerActionProvision_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxActionsPerProvision_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "escrow_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "staking_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxActionsPerProvision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "actionName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "answer",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "referralId",
              "type": "uint256"
            }
          ],
          "internalType": "struct SignatureVerifier.Action[]",
          "name": "actions",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        }
      ],
      "name": "provideRewardsForActions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "rewardPerAction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerActionProvision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract IStaking",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "reputationalAlbtReward",
          "type": "uint256"
        }
      ],
      "name": "updateAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rewardPerActionProvision_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxActionsPerProvision_",
          "type": "uint256"
        }
      ],
      "name": "updateVariables",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfc2bb53c6dd84778312dda4b349e5f09135718d6fca080ffe39aaf0c802b5198",
  "receipt": {
    "to": null,
    "from": "0xB29aE9a9BF7CA2984a6a09939e49d9Cf46AB0c1d",
    "contractAddress": "0x00876bC3bCC6f478e79F09F96F8a2De223ca6471",
    "transactionIndex": 11,
    "gasUsed": "1308515",
    "logsBloom": "0x
    "blockHash": "0x6eb624ab7b528fe93fe6f9863fd0400858a5fc882a06e2a3c10aec2669663f85",
    "transactionHash": "0xfc2bb53c6dd84778312dda4b349e5f09135718d6fca080ffe39aaf0c802b5198",
    "logs": [],
    "blockNumber": 8774972,
    "cumulativeGasUsed": "5034320",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "cac0e349e7bf2908d5a818880f5dbfa9",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"}],\"name\":\"checkAction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"internalType\":\"contract IEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reputationalAlbtReward\",\"type\":\"uint256\"}],\"name\":\"importAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerActionProvision_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxActionsPerProvision_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"escrow_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"staking_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxActionsPerProvision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"actionName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"answer\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralId\",\"type\":\"uint256\"}],\"internalType\":\"struct SignatureVerifier.Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"provideRewardsForActions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"rewardPerAction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerActionProvision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract IStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reputationalAlbtReward\",\"type\":\"uint256\"}],\"name\":\"updateAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerActionProvision_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxActionsPerProvision_\",\"type\":\"uint256\"}],\"name\":\"updateVariables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extends Initializable, OwnableUpgradeable\",\"kind\":\"dev\",\"methods\":{\"checkAction(string)\":{\"details\":\"checks if given action has a reward\",\"returns\":{\"exist\":\"boolean represents checks if action has a reward associated\"}},\"importAction(string,uint256)\":{\"details\":\"This function is used by the owner to add more actions.\",\"params\":{\"action\":\"The name of the action.\",\"reputationalAlbtReward\":\"The reputational albt reward for this action.\"}},\"initialize(uint256,uint256,address,address,uint256)\":{\"details\":\"Initializer of the ActionVerifier contract.\",\"params\":{\"escrow_\":\"The address of the escrow.\",\"maxActionsPerProvision_\":\"The max actions that an account can take rewards for in one function call.\",\"rewardPerActionProvision_\":\"The reward that an action provider accumulates for each action provision.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"provideRewardsForActions((string,string,address,uint256)[],bytes[])\":{\"details\":\"This function is used by users to provide rewards to all users for their actions.\",\"params\":{\"actions\":\"The actions provided.\",\"signatures\":\"The signatures representing the actions.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAction(string,uint256)\":{\"details\":\"This function is used by the owner to update actions.\",\"params\":{\"action\":\"The name of the action.\",\"reputationalAlbtReward\":\"The reputational albt reward for this action.\"}},\"updateVariables(uint256,uint256)\":{\"details\":\"This function is used by the owner to update variables.\",\"params\":{\"maxActionsPerProvision_\":\"The max actions that an account can take rewards for in one function call.\",\"rewardPerActionProvision_\":\"The reward that an action provider accumulates for each action provision.\"}}},\"title\":\"AllianceBlock ActionVerifier contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkAction(string)\":{\"notice\":\"Check Action\"}},\"notice\":\"Handles user's Actions and Rewards within the protocol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ActionVerifier.sol\":\"ActionVerifier\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"contracts/ActionVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./libs/SignatureVerifier.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IEscrow.sol\\\";\\nimport \\\"./interfaces/IStaking.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\n/**\\n * @title AllianceBlock ActionVerifier contract\\n * @dev Extends Initializable, OwnableUpgradeable\\n * @notice Handles user's Actions and Rewards within the protocol\\n */\\ncontract ActionVerifier is Initializable, OwnableUpgradeable {\\n    using SafeMath for uint256;\\n    using SignatureVerifier for SignatureVerifier.Action;\\n\\n    mapping(bytes32 => uint256) public rewardPerAction;\\n    uint256 public rewardPerActionProvision;\\n    uint256 public maxActionsPerProvision;\\n\\n    IEscrow public escrow;\\n    IStaking public staking;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    bytes32 public constant EIP712DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        uint256 chainId;\\n        address verifyingContract;\\n    }\\n\\n    /**\\n     * @dev Initializer of the ActionVerifier contract.\\n     * @param rewardPerActionProvision_ The reward that an action provider accumulates for each action provision.\\n     * @param maxActionsPerProvision_ The max actions that an account can take rewards for in one function call.\\n     * @param escrow_ The address of the escrow.\\n     */\\n    function initialize(\\n        uint256 rewardPerActionProvision_,\\n        uint256 maxActionsPerProvision_,\\n        address escrow_,\\n        address staking_,\\n        uint256 chainId\\n    ) public initializer {\\n        __Ownable_init();\\n        escrow = IEscrow(escrow_);\\n        staking = IStaking(staking_);\\n        rewardPerActionProvision = rewardPerActionProvision_;\\n        maxActionsPerProvision = maxActionsPerProvision_;\\n\\n        DOMAIN_SEPARATOR = hash(\\n            EIP712Domain({\\n                name: \\\"AllianceBlock Verifier\\\",\\n                version: \\\"1.0\\\",\\n                chainId: chainId,\\n                verifyingContract: address(this)\\n            })\\n        );\\n    }\\n\\n    function hash(EIP712Domain memory eip712Domain) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    EIP712DOMAIN_TYPEHASH,\\n                    keccak256(bytes(eip712Domain.name)),\\n                    keccak256(bytes(eip712Domain.version)),\\n                    eip712Domain.chainId,\\n                    eip712Domain.verifyingContract\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev This function is used by the owner to update variables.\\n     * @param rewardPerActionProvision_ The reward that an action provider accumulates for each action provision.\\n     * @param maxActionsPerProvision_ The max actions that an account can take rewards for in one function call.\\n     */\\n    function updateVariables(uint256 rewardPerActionProvision_, uint256 maxActionsPerProvision_) external onlyOwner() {\\n        rewardPerActionProvision = rewardPerActionProvision_;\\n        maxActionsPerProvision = maxActionsPerProvision_;\\n    }\\n\\n    /**\\n     * @dev This function is used by the owner to add more actions.\\n     * @param action The name of the action.\\n     * @param reputationalAlbtReward The reputational albt reward for this action.\\n     */\\n    function importAction(string memory action, uint256 reputationalAlbtReward) external onlyOwner() {\\n        rewardPerAction[keccak256(abi.encodePacked(action))] = reputationalAlbtReward;\\n    }\\n\\n    /**\\n     * @dev This function is used by the owner to update actions.\\n     * @param action The name of the action.\\n     * @param reputationalAlbtReward The reputational albt reward for this action.\\n     */\\n    function updateAction(string memory action, uint256 reputationalAlbtReward) external onlyOwner() {\\n        require(rewardPerAction[keccak256(abi.encodePacked(action))] > 0, \\\"Action should already exist\\\");\\n        rewardPerAction[keccak256(abi.encodePacked(action))] = reputationalAlbtReward;\\n    }\\n\\n    /**\\n     * @dev This function is used by users to provide rewards to all users for their actions.\\n     * @param actions The actions provided.\\n     * @param signatures The signatures representing the actions.\\n     */\\n    function provideRewardsForActions(SignatureVerifier.Action[] memory actions, bytes[] memory signatures) external {\\n        require(staking.getEligibilityForActionProvision(msg.sender), \\\"Must be at least lvl2 staker\\\");\\n        require(actions.length == signatures.length, \\\"Invalid length\\\");\\n        require(actions.length <= maxActionsPerProvision, \\\"Too many actions\\\");\\n\\n        address[] memory accounts = new address[](actions.length.add(1));\\n        uint256[] memory rewards = new uint256[](actions.length.add(1));\\n\\n        uint256 rewardForCaller;\\n\\n        for (uint256 i = 0; i < actions.length; i++) {\\n            if (\\n                actions[i].isValidSignature(signatures[i], DOMAIN_SEPARATOR) &&\\n                rewardPerAction[keccak256(abi.encodePacked(actions[i].actionName))] > 0\\n            ) {\\n                accounts[i] = actions[i].account;\\n                rewards[i] = rewardPerAction[keccak256(abi.encodePacked(actions[i].actionName))];\\n\\n                rewardForCaller = rewardForCaller.add(rewardPerActionProvision);\\n            } else {\\n                accounts[i] = address(0);\\n                rewards[i] = 0;\\n            }\\n        }\\n\\n        accounts[actions.length] = msg.sender;\\n        rewards[actions.length] = rewardForCaller;\\n\\n        escrow.multiMintReputationalToken(accounts, rewards);\\n    }\\n\\n    /**\\n     * @notice Check Action\\n     * @dev checks if given action has a reward\\n     * @return exist boolean represents checks if action has a reward associated\\n     */\\n    function checkAction(string memory action) public view returns (bool exist) {\\n        return rewardPerAction[keccak256(abi.encodePacked(action))] > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x91847d36fa7711d4815f1bd0e0326b642302054a4be4ccd97379d5ba0390b8cc\",\"license\":\"MIT\"},\"contracts/interfaces/IEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title Interface of the Escrow.\\n */\\ninterface IEscrow {\\n    function receiveFunding(uint256 loanId, uint256 amount) external;\\n\\n    function transferFundingNFT(\\n        uint256 investmentId,\\n        uint256 partitionsPurchased,\\n        address receiver\\n    ) external;\\n\\n    function transferLendingToken(address seeker, uint256 amount) external;\\n\\n    function transferProjectToken(\\n        address projectToken,\\n        address seeker,\\n        uint256 amount\\n    ) external;\\n\\n    function mintReputationalToken(address recipient, uint256 amount) external;\\n\\n    function burnReputationalToken(address from, uint256 amount) external;\\n\\n    function multiMintReputationalToken(address[] memory recipients, uint256[] memory amounts) external;\\n}\\n\",\"keccak256\":\"0x035ea4ceee242bd73e24b82cb28c4c9d5dc6e0a2019afb099bd6047f8cbba91f\",\"license\":\"MIT\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title Interface of the Staking contract.\\n */\\ninterface IStaking {\\n    function getBalance(address staker_) external view returns (uint256);\\n\\n    function getAmountsToStake()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getEligibilityForActionProvision(address account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8bf246b0444f008c7c170d09637cd054c2175cfe95336507c6a18adc427cc1ab\",\"license\":\"MIT\"},\"contracts/libs/BytesReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title Bytes Reader Library\\n */\\nlibrary BytesReader {\\n    /**\\n     * @notice Reads a bytes32 value from a position in a byte array.\\n     * @param b Byte array containing a bytes32 value.\\n     * @param index Index in byte array of bytes32 value.\\n     * @return result bytes32 value from byte array.\\n     */\\n    function readBytes32(bytes memory b, uint256 index) internal pure returns (bytes32 result) {\\n        if (b.length < index + 32) {\\n            return bytes32(0);\\n        }\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n        index += 32;\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            result := mload(add(b, index))\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xb8a14080aa32544a24616f840a362044907ca4866d039b0d694edd09a3a73cec\",\"license\":\"MIT\"},\"contracts/libs/SignatureVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./BytesReader.sol\\\";\\n\\n/**\\n * @title Signature Verifier Library\\n */\\nlibrary SignatureVerifier {\\n    using BytesReader for bytes;\\n\\n    struct Action {\\n        string actionName;\\n        string answer;\\n        address account;\\n        uint256 referralId;\\n    }\\n    bytes32 constant ACTION_TYPEHASH = 0x1f76bf6993440811cef7b51dc00dee9d4e8fa911023c7f2d088ce4e46ac2346f;\\n\\n    /**\\n     * @notice Gets Actions struct hash\\n     * @param action the Action to retrieve\\n     * @return the keccak hash Action struct\\n     */\\n    function getActionStructHash(Action memory action) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    ACTION_TYPEHASH,\\n                    keccak256(bytes(action.actionName)),\\n                    keccak256(bytes(action.answer)),\\n                    action.account,\\n                    action.referralId\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets Actions typed data hash\\n     * @param action the Action to retrieve\\n     * @return actionHash actionHash the keccak Action hash\\n     */\\n    function getActionTypedDataHash(Action memory action, bytes32 DOMAIN_SEPARATOR)\\n        internal\\n        pure\\n        returns (bytes32 actionHash)\\n    {\\n        actionHash = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, getActionStructHash(action)));\\n    }\\n\\n    /**\\n     * @notice Verifies that an action has been signed by the action.account.\\n     * @param action The action to verify the signature for.\\n     * @param signature Proof that the hash has been signed by action.account.\\n     * @return True if the address recovered from the provided signature matches the action.account.\\n     */\\n    function isValidSignature(\\n        Action memory action,\\n        bytes memory signature,\\n        bytes32 DOMAIN_SEPARATOR\\n    ) internal pure returns (bool) {\\n        if (signature.length != 65) return false;\\n\\n        bytes32 hash = getActionTypedDataHash(action, DOMAIN_SEPARATOR);\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        assembly {\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n            v := and(mload(add(signature, 65)), 255)\\n        }\\n\\n        address recovered = ecrecover(hash, v, r, s);\\n\\n        return action.account == recovered;\\n    }\\n}\\n\",\"keccak256\":\"0x025fb90ec72b8a2e2ca645b30f2137f467efe3da75132e655695e0b1b372e863\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506116b5806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a611610097578063c49f91d311610066578063c49f91d3146101d9578063e2fdcc17146101e1578063f2fcd013146101e9578063f2fde38b146101fc57610100565b8063715018a6146101ae578063765f9475146101b65780638da5cb5b146101c957806395bd32b0146101d157610100565b806338f8addd116100d357806338f8addd1461016b5780633f8eefea1461017e5780634cf088d9146101865780636da451d61461019b57610100565b80631de5393e1461010557806322f8bc1c1461012e5780632ec59d07146101435780633644e51514610156575b600080fd5b6101186101133660046112b5565b61020f565b604051610125919061147f565b60405180910390f35b61014161013c366004611333565b610255565b005b610141610151366004611354565b6102c2565b61015e610415565b604051610125919061148a565b6101416101793660046112f0565b61041b565b61015e610521565b61018e610527565b60405161012591906113f5565b61015e6101a936600461129d565b610536565b610141610548565b6101416101c43660046112f0565b6105f4565b61018e610656565b61015e610665565b61015e61066b565b61018e61068f565b6101416101f736600461114b565b61069e565b61014161020a366004611131565b610a9b565b600080606560008460405160200161022791906113a1565b604051602081830303815290604052805190602001208152602001908152602001600020541190505b919050565b61025d610b9e565b6001600160a01b031661026e610656565b6001600160a01b0316146102b7576040805162461bcd60e51b81526020600482018190526024820152600080516020611660833981519152604482015290519081900360640190fd5b606691909155606755565b600054610100900460ff16806102db57506102db610ba2565b806102e9575060005460ff16155b6103245760405162461bcd60e51b815260040180806020018281038252602e815260200180611632602e913960400191505060405180910390fd5b600054610100900460ff1615801561034f576000805460ff1961ff0019909116610100171660011790555b610357610bb3565b606880546001600160a01b038087166001600160a01b0319928316179092556069805492861692909116919091179055606686905560678590556040805160c0810182526016608082019081527520b63634b0b731b2a13637b1b5902b32b934b334b2b960511b60a083015281528151808301835260038152620312e360ec1b6020828101919091528201529081018390523060608201526103f890610c65565b606a55801561040d576000805461ff00191690555b505050505050565b606a5481565b610423610b9e565b6001600160a01b0316610434610656565b6001600160a01b03161461047d576040805162461bcd60e51b81526020600482018190526024820152600080516020611660833981519152604482015290519081900360640190fd5b6000606560008460405160200161049491906113a1565b60405160208183030381529060405280519060200120815260200190815260200160002054116104df5760405162461bcd60e51b81526004016104d690611592565b60405180910390fd5b8060656000846040516020016104f591906113a1565b604051602081830303815290604052805190602001208152602001908152602001600020819055505050565b60675481565b6069546001600160a01b031681565b60656020526000908152604090205481565b610550610b9e565b6001600160a01b0316610561610656565b6001600160a01b0316146105aa576040805162461bcd60e51b81526020600482018190526024820152600080516020611660833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6105fc610b9e565b6001600160a01b031661060d610656565b6001600160a01b0316146104df576040805162461bcd60e51b81526020600482018190526024820152600080516020611660833981519152604482015290519081900360640190fd5b6033546001600160a01b031690565b60665481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6068546001600160a01b031681565b606954604051630d9ab82160e01b81526001600160a01b0390911690630d9ab821906106ce9033906004016113f5565b60206040518083038186803b1580156106e657600080fd5b505afa1580156106fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071e919061127d565b61073a5760405162461bcd60e51b81526004016104d69061155b565b805182511461075b5760405162461bcd60e51b81526004016104d690611509565b6067548251111561077e5760405162461bcd60e51b81526004016104d690611531565b815160009061078e906001610cde565b67ffffffffffffffff811180156107a457600080fd5b506040519080825280602002602001820160405280156107ce578160200160208202803683370190505b50905060006107e860018551610cde90919063ffffffff16565b67ffffffffffffffff811180156107fe57600080fd5b50604051908082528060200260200182016040528015610828578160200160208202803683370190505b5090506000805b85518110156109e85761087585828151811061084757fe5b6020026020010151606a5488848151811061085e57fe5b6020026020010151610d3f9092919063ffffffff16565b80156108d1575060006065600088848151811061088e57fe5b6020026020010151600001516040516020016108aa91906113a1565b60405160208183030381529060405280519060200120815260200190815260200160002054115b15610997578581815181106108e257fe5b6020026020010151604001518482815181106108fa57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506065600087838151811061092a57fe5b60200260200101516000015160405160200161094691906113a1565b6040516020818303038152906040528051906020012081526020019081526020016000205483828151811061097757fe5b6020908102919091010152606654610990908390610cde565b91506109e0565b60008482815181106109a557fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060008382815181106109d357fe5b6020026020010181815250505b60010161082f565b5033838651815181106109f757fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508082865181518110610a2557fe5b6020908102919091010152606854604051633fb0255b60e21b81526001600160a01b039091169063fec0956c90610a629086908690600401611409565b600060405180830381600087803b158015610a7c57600080fd5b505af1158015610a90573d6000803e3d6000fd5b505050505050505050565b610aa3610b9e565b6001600160a01b0316610ab4610656565b6001600160a01b031614610afd576040805162461bcd60e51b81526020600482018190526024820152600080516020611660833981519152604482015290519081900360640190fd5b6001600160a01b038116610b425760405162461bcd60e51b815260040180806020018281038252602681526020018061160c6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6000610bad30610df7565b15905090565b600054610100900460ff1680610bcc5750610bcc610ba2565b80610bda575060005460ff16155b610c155760405162461bcd60e51b815260040180806020018281038252602e815260200180611632602e913960400191505060405180910390fd5b600054610100900460ff16158015610c40576000805460ff1961ff0019909116610100171660011790555b610c48610dfd565b610c50610e9d565b8015610c62576000805461ff00191690555b50565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b82600001518051906020012083602001518051906020012084604001518560600151604051602001610cc19594939291906114bf565b604051602081830303815290604052805190602001209050919050565b600082820183811015610d38576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60008251604114610d5257506000610d38565b6000610d5e8584610f96565b90506000806000602087015192506040870151915060ff6041880151169050600060018583868660405160008152602001604052604051610da294939291906114eb565b6020604051602081039080840390855afa158015610dc4573d6000803e3d6000fd5b505050602060405103519050806001600160a01b031689604001516001600160a01b031614955050505050509392505050565b3b151590565b600054610100900460ff1680610e165750610e16610ba2565b80610e24575060005460ff16155b610e5f5760405162461bcd60e51b815260040180806020018281038252602e815260200180611632602e913960400191505060405180910390fd5b600054610100900460ff16158015610c50576000805460ff1961ff0019909116610100171660011790558015610c62576000805461ff001916905550565b600054610100900460ff1680610eb65750610eb6610ba2565b80610ec4575060005460ff16155b610eff5760405162461bcd60e51b815260040180806020018281038252602e815260200180611632602e913960400191505060405180910390fd5b600054610100900460ff16158015610f2a576000805460ff1961ff0019909116610100171660011790555b6000610f34610b9e565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610c62576000805461ff001916905550565b600081610fa284610fd1565b604051602001610fb39291906113da565b60405160208183030381529060405280519060200120905092915050565b60007f1f76bf6993440811cef7b51dc00dee9d4e8fa911023c7f2d088ce4e46ac2346f60001b82600001518051906020012083602001518051906020012084604001518560600151604051602001610cc1959493929190611493565b600067ffffffffffffffff83111561104157fe5b611054601f8401601f19166020016115c9565b905082815283838301111561106857600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461025057600080fd5b600082601f8301126110a6578081fd5b813560206110bb6110b6836115ed565b6115c9565b82815281810190858301855b85811015611105578135880189603f8201126110e1578788fd5b6110f28a878301356040840161102d565b85525092840192908401906001016110c7565b5090979650505050505050565b600082601f830112611122578081fd5b610d388383356020850161102d565b600060208284031215611142578081fd5b610d388261107f565b6000806040838503121561115d578081fd5b823567ffffffffffffffff80821115611174578283fd5b818501915085601f830112611187578283fd5b813560206111976110b6836115ed565b82815281810190858301875b8581101561124e57813588016080818e03601f190112156111c257898afd5b604051608081018181108a821117156111d757fe5b60405281870135898111156111ea578b8cfd5b6111f88f8983860101611112565b82525060408201358981111561120c578b8cfd5b61121a8f8983860101611112565b888301525061122b6060830161107f565b6040820152608091909101356060820152845292840192908401906001016111a3565b50909750505086013592505080821115611266578283fd5b5061127385828601611096565b9150509250929050565b60006020828403121561128e578081fd5b81518015158114610d38578182fd5b6000602082840312156112ae578081fd5b5035919050565b6000602082840312156112c6578081fd5b813567ffffffffffffffff8111156112dc578182fd5b6112e884828501611112565b949350505050565b60008060408385031215611302578182fd5b823567ffffffffffffffff811115611318578283fd5b61132485828601611112565b95602094909401359450505050565b60008060408385031215611345578182fd5b50508035926020909101359150565b600080600080600060a0868803121561136b578081fd5b85359450602086013593506113826040870161107f565b92506113906060870161107f565b949793965091946080013592915050565b60008251815b818110156113c157602081860181015185830152016113a7565b818111156113cf5782828501525b509190910192915050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b604080825283519082018190526000906020906060840190828701845b8281101561144b5781516001600160a01b031684529284019290840190600101611426565b50505083810382850152845180825285830191830190845b8181101561110557835183529284019291840191600101611463565b901515815260200190565b90815260200190565b948552602085019390935260408401919091526001600160a01b03166060830152608082015260a00190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b6020808252600e908201526d092dcecc2d8d2c840d8cadccee8d60931b604082015260600190565b60208082526010908201526f546f6f206d616e7920616374696f6e7360801b604082015260600190565b6020808252601c908201527f4d757374206265206174206c65617374206c766c32207374616b657200000000604082015260600190565b6020808252601b908201527f416374696f6e2073686f756c6420616c72656164792065786973740000000000604082015260600190565b60405181810167ffffffffffffffff811182821017156115e557fe5b604052919050565b600067ffffffffffffffff82111561160157fe5b506020908102019056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220ef103351cb9dc7f9980011c4e1888728819723f0ad896225b47e7f3928153a9a64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063715018a611610097578063c49f91d311610066578063c49f91d3146101d9578063e2fdcc17146101e1578063f2fcd013146101e9578063f2fde38b146101fc57610100565b8063715018a6146101ae578063765f9475146101b65780638da5cb5b146101c957806395bd32b0146101d157610100565b806338f8addd116100d357806338f8addd1461016b5780633f8eefea1461017e5780634cf088d9146101865780636da451d61461019b57610100565b80631de5393e1461010557806322f8bc1c1461012e5780632ec59d07146101435780633644e51514610156575b600080fd5b6101186101133660046112b5565b61020f565b604051610125919061147f565b60405180910390f35b61014161013c366004611333565b610255565b005b610141610151366004611354565b6102c2565b61015e610415565b604051610125919061148a565b6101416101793660046112f0565b61041b565b61015e610521565b61018e610527565b60405161012591906113f5565b61015e6101a936600461129d565b610536565b610141610548565b6101416101c43660046112f0565b6105f4565b61018e610656565b61015e610665565b61015e61066b565b61018e61068f565b6101416101f736600461114b565b61069e565b61014161020a366004611131565b610a9b565b600080606560008460405160200161022791906113a1565b604051602081830303815290604052805190602001208152602001908152602001600020541190505b919050565b61025d610b9e565b6001600160a01b031661026e610656565b6001600160a01b0316146102b7576040805162461bcd60e51b81526020600482018190526024820152600080516020611660833981519152604482015290519081900360640190fd5b606691909155606755565b600054610100900460ff16806102db57506102db610ba2565b806102e9575060005460ff16155b6103245760405162461bcd60e51b815260040180806020018281038252602e815260200180611632602e913960400191505060405180910390fd5b600054610100900460ff1615801561034f576000805460ff1961ff0019909116610100171660011790555b610357610bb3565b606880546001600160a01b038087166001600160a01b0319928316179092556069805492861692909116919091179055606686905560678590556040805160c0810182526016608082019081527520b63634b0b731b2a13637b1b5902b32b934b334b2b960511b60a083015281528151808301835260038152620312e360ec1b6020828101919091528201529081018390523060608201526103f890610c65565b606a55801561040d576000805461ff00191690555b505050505050565b606a5481565b610423610b9e565b6001600160a01b0316610434610656565b6001600160a01b03161461047d576040805162461bcd60e51b81526020600482018190526024820152600080516020611660833981519152604482015290519081900360640190fd5b6000606560008460405160200161049491906113a1565b60405160208183030381529060405280519060200120815260200190815260200160002054116104df5760405162461bcd60e51b81526004016104d690611592565b60405180910390fd5b8060656000846040516020016104f591906113a1565b604051602081830303815290604052805190602001208152602001908152602001600020819055505050565b60675481565b6069546001600160a01b031681565b60656020526000908152604090205481565b610550610b9e565b6001600160a01b0316610561610656565b6001600160a01b0316146105aa576040805162461bcd60e51b81526020600482018190526024820152600080516020611660833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6105fc610b9e565b6001600160a01b031661060d610656565b6001600160a01b0316146104df576040805162461bcd60e51b81526020600482018190526024820152600080516020611660833981519152604482015290519081900360640190fd5b6033546001600160a01b031690565b60665481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6068546001600160a01b031681565b606954604051630d9ab82160e01b81526001600160a01b0390911690630d9ab821906106ce9033906004016113f5565b60206040518083038186803b1580156106e657600080fd5b505afa1580156106fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071e919061127d565b61073a5760405162461bcd60e51b81526004016104d69061155b565b805182511461075b5760405162461bcd60e51b81526004016104d690611509565b6067548251111561077e5760405162461bcd60e51b81526004016104d690611531565b815160009061078e906001610cde565b67ffffffffffffffff811180156107a457600080fd5b506040519080825280602002602001820160405280156107ce578160200160208202803683370190505b50905060006107e860018551610cde90919063ffffffff16565b67ffffffffffffffff811180156107fe57600080fd5b50604051908082528060200260200182016040528015610828578160200160208202803683370190505b5090506000805b85518110156109e85761087585828151811061084757fe5b6020026020010151606a5488848151811061085e57fe5b6020026020010151610d3f9092919063ffffffff16565b80156108d1575060006065600088848151811061088e57fe5b6020026020010151600001516040516020016108aa91906113a1565b60405160208183030381529060405280519060200120815260200190815260200160002054115b15610997578581815181106108e257fe5b6020026020010151604001518482815181106108fa57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506065600087838151811061092a57fe5b60200260200101516000015160405160200161094691906113a1565b6040516020818303038152906040528051906020012081526020019081526020016000205483828151811061097757fe5b6020908102919091010152606654610990908390610cde565b91506109e0565b60008482815181106109a557fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060008382815181106109d357fe5b6020026020010181815250505b60010161082f565b5033838651815181106109f757fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508082865181518110610a2557fe5b6020908102919091010152606854604051633fb0255b60e21b81526001600160a01b039091169063fec0956c90610a629086908690600401611409565b600060405180830381600087803b158015610a7c57600080fd5b505af1158015610a90573d6000803e3d6000fd5b505050505050505050565b610aa3610b9e565b6001600160a01b0316610ab4610656565b6001600160a01b031614610afd576040805162461bcd60e51b81526020600482018190526024820152600080516020611660833981519152604482015290519081900360640190fd5b6001600160a01b038116610b425760405162461bcd60e51b815260040180806020018281038252602681526020018061160c6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6000610bad30610df7565b15905090565b600054610100900460ff1680610bcc5750610bcc610ba2565b80610bda575060005460ff16155b610c155760405162461bcd60e51b815260040180806020018281038252602e815260200180611632602e913960400191505060405180910390fd5b600054610100900460ff16158015610c40576000805460ff1961ff0019909116610100171660011790555b610c48610dfd565b610c50610e9d565b8015610c62576000805461ff00191690555b50565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b82600001518051906020012083602001518051906020012084604001518560600151604051602001610cc19594939291906114bf565b604051602081830303815290604052805190602001209050919050565b600082820183811015610d38576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60008251604114610d5257506000610d38565b6000610d5e8584610f96565b90506000806000602087015192506040870151915060ff6041880151169050600060018583868660405160008152602001604052604051610da294939291906114eb565b6020604051602081039080840390855afa158015610dc4573d6000803e3d6000fd5b505050602060405103519050806001600160a01b031689604001516001600160a01b031614955050505050509392505050565b3b151590565b600054610100900460ff1680610e165750610e16610ba2565b80610e24575060005460ff16155b610e5f5760405162461bcd60e51b815260040180806020018281038252602e815260200180611632602e913960400191505060405180910390fd5b600054610100900460ff16158015610c50576000805460ff1961ff0019909116610100171660011790558015610c62576000805461ff001916905550565b600054610100900460ff1680610eb65750610eb6610ba2565b80610ec4575060005460ff16155b610eff5760405162461bcd60e51b815260040180806020018281038252602e815260200180611632602e913960400191505060405180910390fd5b600054610100900460ff16158015610f2a576000805460ff1961ff0019909116610100171660011790555b6000610f34610b9e565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610c62576000805461ff001916905550565b600081610fa284610fd1565b604051602001610fb39291906113da565b60405160208183030381529060405280519060200120905092915050565b60007f1f76bf6993440811cef7b51dc00dee9d4e8fa911023c7f2d088ce4e46ac2346f60001b82600001518051906020012083602001518051906020012084604001518560600151604051602001610cc1959493929190611493565b600067ffffffffffffffff83111561104157fe5b611054601f8401601f19166020016115c9565b905082815283838301111561106857600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461025057600080fd5b600082601f8301126110a6578081fd5b813560206110bb6110b6836115ed565b6115c9565b82815281810190858301855b85811015611105578135880189603f8201126110e1578788fd5b6110f28a878301356040840161102d565b85525092840192908401906001016110c7565b5090979650505050505050565b600082601f830112611122578081fd5b610d388383356020850161102d565b600060208284031215611142578081fd5b610d388261107f565b6000806040838503121561115d578081fd5b823567ffffffffffffffff80821115611174578283fd5b818501915085601f830112611187578283fd5b813560206111976110b6836115ed565b82815281810190858301875b8581101561124e57813588016080818e03601f190112156111c257898afd5b604051608081018181108a821117156111d757fe5b60405281870135898111156111ea578b8cfd5b6111f88f8983860101611112565b82525060408201358981111561120c578b8cfd5b61121a8f8983860101611112565b888301525061122b6060830161107f565b6040820152608091909101356060820152845292840192908401906001016111a3565b50909750505086013592505080821115611266578283fd5b5061127385828601611096565b9150509250929050565b60006020828403121561128e578081fd5b81518015158114610d38578182fd5b6000602082840312156112ae578081fd5b5035919050565b6000602082840312156112c6578081fd5b813567ffffffffffffffff8111156112dc578182fd5b6112e884828501611112565b949350505050565b60008060408385031215611302578182fd5b823567ffffffffffffffff811115611318578283fd5b61132485828601611112565b95602094909401359450505050565b60008060408385031215611345578182fd5b50508035926020909101359150565b600080600080600060a0868803121561136b578081fd5b85359450602086013593506113826040870161107f565b92506113906060870161107f565b949793965091946080013592915050565b60008251815b818110156113c157602081860181015185830152016113a7565b818111156113cf5782828501525b509190910192915050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b604080825283519082018190526000906020906060840190828701845b8281101561144b5781516001600160a01b031684529284019290840190600101611426565b50505083810382850152845180825285830191830190845b8181101561110557835183529284019291840191600101611463565b901515815260200190565b90815260200190565b948552602085019390935260408401919091526001600160a01b03166060830152608082015260a00190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b6020808252600e908201526d092dcecc2d8d2c840d8cadccee8d60931b604082015260600190565b60208082526010908201526f546f6f206d616e7920616374696f6e7360801b604082015260600190565b6020808252601c908201527f4d757374206265206174206c65617374206c766c32207374616b657200000000604082015260600190565b6020808252601b908201527f416374696f6e2073686f756c6420616c72656164792065786973740000000000604082015260600190565b60405181810167ffffffffffffffff811182821017156115e557fe5b604052919050565b600067ffffffffffffffff82111561160157fe5b506020908102019056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220ef103351cb9dc7f9980011c4e1888728819723f0ad896225b47e7f3928153a9a64736f6c63430007060033",
  "devdoc": {
    "details": "Extends Initializable, OwnableUpgradeable",
    "kind": "dev",
    "methods": {
      "checkAction(string)": {
        "details": "checks if given action has a reward",
        "returns": {
          "exist": "boolean represents checks if action has a reward associated"
        }
      },
      "importAction(string,uint256)": {
        "details": "This function is used by the owner to add more actions.",
        "params": {
          "action": "The name of the action.",
          "reputationalAlbtReward": "The reputational albt reward for this action."
        }
      },
      "initialize(uint256,uint256,address,address,uint256)": {
        "details": "Initializer of the ActionVerifier contract.",
        "params": {
          "escrow_": "The address of the escrow.",
          "maxActionsPerProvision_": "The max actions that an account can take rewards for in one function call.",
          "rewardPerActionProvision_": "The reward that an action provider accumulates for each action provision."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "provideRewardsForActions((string,string,address,uint256)[],bytes[])": {
        "details": "This function is used by users to provide rewards to all users for their actions.",
        "params": {
          "actions": "The actions provided.",
          "signatures": "The signatures representing the actions."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAction(string,uint256)": {
        "details": "This function is used by the owner to update actions.",
        "params": {
          "action": "The name of the action.",
          "reputationalAlbtReward": "The reputational albt reward for this action."
        }
      },
      "updateVariables(uint256,uint256)": {
        "details": "This function is used by the owner to update variables.",
        "params": {
          "maxActionsPerProvision_": "The max actions that an account can take rewards for in one function call.",
          "rewardPerActionProvision_": "The reward that an action provider accumulates for each action provision."
        }
      }
    },
    "title": "AllianceBlock ActionVerifier contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkAction(string)": {
        "notice": "Check Action"
      }
    },
    "notice": "Handles user's Actions and Rewards within the protocol",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 890,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 893,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2584,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 440,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5625,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "rewardPerAction",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 5627,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "rewardPerActionProvision",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 5629,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "maxActionsPerProvision",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 5631,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "escrow",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IEscrow)8228"
      },
      {
        "astId": 5633,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "staking",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(IStaking)8292"
      },
      {
        "astId": 5635,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "106",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IEscrow)8228": {
        "encoding": "inplace",
        "label": "contract IEscrow",
        "numberOfBytes": "20"
      },
      "t_contract(IStaking)8292": {
        "encoding": "inplace",
        "label": "contract IStaking",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}