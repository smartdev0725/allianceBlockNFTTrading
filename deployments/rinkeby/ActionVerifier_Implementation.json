{
  "address": "0x579980b0eDA32219159Deb60Aee0D496556E7017",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "actionName",
          "type": "string"
        }
      ],
      "name": "ActionImported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "actionName",
          "type": "string"
        }
      ],
      "name": "ActionUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "actionName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "answer",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "referralId",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct SignatureVerifier.Action[]",
          "name": "actions",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        }
      ],
      "name": "ActionsProvided",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epochId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endingTimestamp",
          "type": "uint256"
        }
      ],
      "name": "EpochChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EIP712DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "actionsProvidedPerAccountPerEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "stakingLevel",
          "type": "uint256"
        }
      ],
      "name": "checkAction",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exist",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrow",
      "outputs": [
        {
          "internalType": "contract IEscrow",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "internalType": "uint256[4]",
          "name": "reputationalAlbtRewardsPerLevel",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256[4]",
          "name": "reputationalAlbtRewardsPerLevelAfterFirstTime",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256",
          "name": "minimumLevelForProvision",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referralContract_",
          "type": "address"
        }
      ],
      "name": "importAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[4]",
          "name": "rewardsPerActionProvisionPerLevel_",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256[4]",
          "name": "maxActionsPerDayPerLevel_",
          "type": "uint256[4]"
        },
        {
          "internalType": "address",
          "name": "escrow_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakerMedalNft_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "lastEpochActionDonePerAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "maxActionsPerDayPerLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "minimumLevelForActionProvision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "actionName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "answer",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "referralId",
              "type": "uint256"
            }
          ],
          "internalType": "struct SignatureVerifier.Action[]",
          "name": "actions",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        }
      ],
      "name": "provideRewardsForActions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "referralContract",
      "outputs": [
        {
          "internalType": "contract IReferralContract",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardPerActionPerLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardPerActionPerLevelAfterFirstTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardPerActionProvisionPerLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakerMedalNft",
      "outputs": [
        {
          "internalType": "contract IStakerMedalNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "action",
          "type": "string"
        },
        {
          "internalType": "uint256[4]",
          "name": "reputationalAlbtRewardsPerLevel",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256[4]",
          "name": "reputationalAlbtRewardsPerLevelAfterFirstTime",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256",
          "name": "minimumLevelForProvision",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referralContract_",
          "type": "address"
        }
      ],
      "name": "updateAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[4]",
          "name": "rewardsPerActionProvisionPerLevel_",
          "type": "uint256[4]"
        },
        {
          "internalType": "uint256[4]",
          "name": "maxActionsPerDayPerLevel_",
          "type": "uint256[4]"
        }
      ],
      "name": "updateVariables",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1301cd5dcbdf7c94a7303c7a6af914a70b59e01c7c667c35aa94a976ae1c424b",
  "receipt": {
    "to": null,
    "from": "0x4C7B849e8F7c970744b4741BE35541E20990392d",
    "contractAddress": "0x579980b0eDA32219159Deb60Aee0D496556E7017",
    "transactionIndex": 6,
    "gasUsed": "2263299",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xe09158e90eb056aca7734e8a60a2dfb6a3c10150accd3780a7711425b62a3092",
    "transactionHash": "0x1301cd5dcbdf7c94a7303c7a6af914a70b59e01c7c667c35aa94a976ae1c424b",
    "logs": [],
    "blockNumber": 9132934,
    "cumulativeGasUsed": "2604791",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "2655e296375c08ec2ee94c1a605dd52e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"actionName\",\"type\":\"string\"}],\"name\":\"ActionImported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"actionName\",\"type\":\"string\"}],\"name\":\"ActionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"actionName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"answer\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct SignatureVerifier.Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"}],\"name\":\"ActionsProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endingTimestamp\",\"type\":\"uint256\"}],\"name\":\"EpochChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EIP712DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"actionsProvidedPerAccountPerEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"stakingLevel\",\"type\":\"uint256\"}],\"name\":\"checkAction\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exist\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"internalType\":\"contract IEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256[4]\",\"name\":\"reputationalAlbtRewardsPerLevel\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"reputationalAlbtRewardsPerLevelAfterFirstTime\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"minimumLevelForProvision\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referralContract_\",\"type\":\"address\"}],\"name\":\"importAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"rewardsPerActionProvisionPerLevel_\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"maxActionsPerDayPerLevel_\",\"type\":\"uint256[4]\"},{\"internalType\":\"address\",\"name\":\"escrow_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakerMedalNft_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"lastEpochActionDonePerAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maxActionsPerDayPerLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"minimumLevelForActionProvision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"actionName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"answer\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralId\",\"type\":\"uint256\"}],\"internalType\":\"struct SignatureVerifier.Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"provideRewardsForActions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"referralContract\",\"outputs\":[{\"internalType\":\"contract IReferralContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPerActionPerLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPerActionPerLevelAfterFirstTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPerActionProvisionPerLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerMedalNft\",\"outputs\":[{\"internalType\":\"contract IStakerMedalNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"internalType\":\"uint256[4]\",\"name\":\"reputationalAlbtRewardsPerLevel\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"reputationalAlbtRewardsPerLevelAfterFirstTime\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256\",\"name\":\"minimumLevelForProvision\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referralContract_\",\"type\":\"address\"}],\"name\":\"updateAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"rewardsPerActionProvisionPerLevel_\",\"type\":\"uint256[4]\"},{\"internalType\":\"uint256[4]\",\"name\":\"maxActionsPerDayPerLevel_\",\"type\":\"uint256[4]\"}],\"name\":\"updateVariables\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extends Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable\",\"kind\":\"dev\",\"methods\":{\"checkAction(string,uint256)\":{\"details\":\"checks if given action has a reward for specific level\",\"returns\":{\"exist\":\"boolean represents checks if action has a reward associated\"}},\"importAction(string,uint256[4],uint256[4],uint256,address)\":{\"details\":\"This function is used by the owner to add more actions.\",\"params\":{\"action\":\"The name of the action.\",\"minimumLevelForProvision\":\"The minimum staker level to be able to provide rewards for this action.\",\"referralContract_\":\"The referral contract if any for this action.\",\"reputationalAlbtRewardsPerLevel\":\"The reputational albt reward for this action per staker level.\",\"reputationalAlbtRewardsPerLevelAfterFirstTime\":\"The reputational albt reward for this action per staker level after first time.\"}},\"initialize(uint256[4],uint256[4],address,address)\":{\"details\":\"Initializer of the ActionVerifier contract.\",\"params\":{\"escrow_\":\"The address of the escrow.\",\"maxActionsPerDayPerLevel_\":\"The max actions that an account can take rewards for in one day.\",\"rewardsPerActionProvisionPerLevel_\":\"The reward that an action provider accumulates for each action provision per level.\",\"stakerMedalNft_\":\"The address of the stakerMedalNft.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"provideRewardsForActions((string,string,address,uint256)[],bytes[])\":{\"details\":\"This function is used by users to provide rewards to all users for their actions.\",\"params\":{\"actions\":\"The actions provided.\",\"signatures\":\"The signatures representing the actions.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAction(string,uint256[4],uint256[4],uint256,address)\":{\"details\":\"This function is used by the owner to update already existing actions.\",\"params\":{\"action\":\"The name of the action.\",\"minimumLevelForProvision\":\"The minimum staker level to be able to provide rewards for this action.\",\"referralContract_\":\"The referral contract if any for this action.\",\"reputationalAlbtRewardsPerLevel\":\"The reputational albt reward for this action per staker level.\",\"reputationalAlbtRewardsPerLevelAfterFirstTime\":\"The reputational albt reward for this action per staker level after first time.\"}},\"updateVariables(uint256[4],uint256[4])\":{\"details\":\"This function is used by the owner to update variables.\",\"params\":{\"maxActionsPerDayPerLevel_\":\"The max actions that an account can take rewards for in one day.\",\"rewardsPerActionProvisionPerLevel_\":\"The reward that an action provider accumulates for each action provision per level.\"}}},\"title\":\"AllianceBlock ActionVerifier contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkAction(string,uint256)\":{\"notice\":\"Check Action\"}},\"notice\":\"Handles user's Actions and Rewards within the protocol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ActionVerifier.sol\":\"ActionVerifier\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x46034cd5cca740f636345c8f7aebae0f78adfd4b70e31e6f888cccbe1086586e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"contracts/ActionVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./libs/SignatureVerifier.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./interfaces/IEscrow.sol\\\";\\nimport \\\"./interfaces/IStakerMedalNFT.sol\\\";\\nimport \\\"./interfaces/IReferralContract.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\n/**\\n * @title AllianceBlock ActionVerifier contract\\n * @dev Extends Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable\\n * @notice Handles user's Actions and Rewards within the protocol\\n */\\ncontract ActionVerifier is Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    using SafeMath for uint256;\\n    using SignatureVerifier for SignatureVerifier.Action;\\n\\n    // Events\\n    event EpochChanged(uint256 indexed epochId, uint256 endingTimestamp);\\n    event ActionImported(string indexed actionName);\\n    event ActionUpdated(string indexed actionName);\\n    event ActionsProvided(SignatureVerifier.Action[] actions, bytes[] signatures, address indexed provider);\\n\\n    // The rewards for doing actions per staker level.\\n    mapping(bytes32 => mapping(uint256 => uint256)) public rewardPerActionPerLevel;\\n    // The rewards for doing actions not for first time per staker level (not all actions give rewards for this).\\n    mapping(bytes32 => mapping(uint256 => uint256)) public rewardPerActionPerLevelAfterFirstTime;\\n    // The minimum staker level that the account providing the action should be to be able to provide it.\\n    mapping(bytes32 => uint256) public minimumLevelForActionProvision;\\n    // The referral contract (if any) that verifys referralId of an action is valid.\\n    mapping(bytes32 => IReferralContract) public referralContract;\\n    // The reward that an action provider takes for each action provision depending on provider's staking level.\\n    mapping(uint256 => uint256) public rewardPerActionProvisionPerLevel;\\n    // The amount of action provisions a provider can do per day depending on provider's staking level.\\n    mapping(uint256 => uint256) public maxActionsPerDayPerLevel;\\n    // The amount of action provisions an action provider has done for a specific epoch.\\n    mapping(address => mapping(uint256 => uint256)) public actionsProvidedPerAccountPerEpoch;\\n    // The last epoch a specific account has done a specific action.\\n    mapping(address => mapping(bytes32 => uint256)) public lastEpochActionDonePerAccount;\\n\\n    // The current epoch of ActionVerifier\\n    // (actions that provide rewards multiple times can only provide only in different epochs).\\n    uint256 private currentEpoch;\\n    // The ending timestamp for the current epoch\\n    uint256 private endingTimestampForCurrentEpoch;\\n\\n    uint256 constant private ONE_DAY = 1 days;\\n\\n    IEscrow public escrow;\\n    IStakerMedalNFT public stakerMedalNft;\\n\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    // keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    bytes32 public constant EIP712DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        uint256 chainId;\\n        address verifyingContract;\\n    }\\n\\n    /**\\n     * @dev Modifier that checks if time has come to change epoch.\\n     */\\n    modifier checkEpoch() {\\n        if (block.timestamp >= endingTimestampForCurrentEpoch){\\n            uint256 timePassedSinceEpochStarted = block.timestamp.add(ONE_DAY).sub(endingTimestampForCurrentEpoch);\\n            uint256 epochsPassed = timePassedSinceEpochStarted.div(ONE_DAY);\\n            currentEpoch = currentEpoch.add(epochsPassed);\\n            endingTimestampForCurrentEpoch = endingTimestampForCurrentEpoch.add(ONE_DAY.mul(epochsPassed));\\n\\n            emit EpochChanged(currentEpoch, endingTimestampForCurrentEpoch);\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Initializer of the ActionVerifier contract.\\n     * @param rewardsPerActionProvisionPerLevel_ The reward that an action provider accumulates for each action provision per level.\\n     * @param maxActionsPerDayPerLevel_ The max actions that an account can take rewards for in one day.\\n     * @param escrow_ The address of the escrow.\\n     * @param stakerMedalNft_ The address of the stakerMedalNft.\\n     */\\n    function initialize(\\n        uint256[4] memory rewardsPerActionProvisionPerLevel_,\\n        uint256[4] memory maxActionsPerDayPerLevel_,\\n        address escrow_,\\n        address stakerMedalNft_\\n    ) external initializer {\\n        require(rewardsPerActionProvisionPerLevel_[3] != 0, \\\"Cannot initialize rewardPerActionProvisionPerLevel_ with 0\\\");\\n        require(maxActionsPerDayPerLevel_[3] != 0, \\\"Cannot initialize maxActionsPerDayPerLevel_ with 0\\\");\\n        require(escrow_ != address(0), \\\"Cannot initialize with escrow_ address\\\");\\n        require(stakerMedalNft_ != address(0), \\\"Cannot initialize with stakerMedalNft_ address\\\");\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n\\n        escrow = IEscrow(escrow_);\\n        stakerMedalNft = IStakerMedalNFT(stakerMedalNft_);\\n\\n        for (uint256 i = 0; i < 4; i++) {\\n            rewardPerActionProvisionPerLevel[i] = rewardsPerActionProvisionPerLevel_[i];\\n            maxActionsPerDayPerLevel[i] = maxActionsPerDayPerLevel_[i];\\n        }\\n\\n        uint256 id;\\n        assembly {\\n            id := chainid()\\n        }\\n\\n        DOMAIN_SEPARATOR = hash(\\n            EIP712Domain({\\n                name: \\\"AllianceBlock Verifier\\\",\\n                version: \\\"1.0\\\",\\n                chainId: id,\\n                verifyingContract: address(this)\\n            })\\n        );\\n\\n        currentEpoch = 1;\\n        endingTimestampForCurrentEpoch = block.timestamp.add(ONE_DAY);\\n    }\\n\\n    function hash(EIP712Domain memory eip712Domain) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    EIP712DOMAIN_TYPEHASH,\\n                    keccak256(bytes(eip712Domain.name)),\\n                    keccak256(bytes(eip712Domain.version)),\\n                    eip712Domain.chainId,\\n                    eip712Domain.verifyingContract\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev This function is used by the owner to update variables.\\n     * @param rewardsPerActionProvisionPerLevel_ The reward that an action provider accumulates for each action provision per level.\\n     * @param maxActionsPerDayPerLevel_ The max actions that an account can take rewards for in one day.\\n     */\\n    function updateVariables(\\n        uint256[4] memory rewardsPerActionProvisionPerLevel_,\\n        uint256[4] memory maxActionsPerDayPerLevel_\\n    ) external onlyOwner() checkEpoch() {\\n        for (uint256 i = 0; i < 4; i++) {\\n            rewardPerActionProvisionPerLevel[i] = rewardsPerActionProvisionPerLevel_[i];\\n            maxActionsPerDayPerLevel[i] = maxActionsPerDayPerLevel_[i];\\n        }\\n    }\\n\\n    /**\\n     * @dev This function is used by the owner to add more actions.\\n     * @param action The name of the action.\\n     * @param reputationalAlbtRewardsPerLevel The reputational albt reward for this action per staker level.\\n     * @param reputationalAlbtRewardsPerLevelAfterFirstTime The reputational albt reward for this action per staker level after first time.\\n     * @param minimumLevelForProvision The minimum staker level to be able to provide rewards for this action.\\n     * @param referralContract_ The referral contract if any for this action.\\n     */\\n    function importAction(\\n        string memory action,\\n        uint256[4] memory reputationalAlbtRewardsPerLevel,\\n        uint256[4] memory reputationalAlbtRewardsPerLevelAfterFirstTime,\\n        uint256 minimumLevelForProvision,\\n        address referralContract_\\n    ) external onlyOwner() checkEpoch() {\\n        _storeAction(\\n            action,\\n            reputationalAlbtRewardsPerLevel,\\n            reputationalAlbtRewardsPerLevelAfterFirstTime,\\n            minimumLevelForProvision,\\n            referralContract_\\n        );\\n\\n        emit ActionImported(action);\\n    }\\n\\n    /**\\n     * @dev This function is used by the owner to update already existing actions.\\n     * @param action The name of the action.\\n     * @param reputationalAlbtRewardsPerLevel The reputational albt reward for this action per staker level.\\n     * @param reputationalAlbtRewardsPerLevelAfterFirstTime The reputational albt reward for this action per staker level after first time.\\n     * @param minimumLevelForProvision The minimum staker level to be able to provide rewards for this action.\\n     * @param referralContract_ The referral contract if any for this action.\\n     */\\n    function updateAction(\\n        string memory action,\\n        uint256[4] memory reputationalAlbtRewardsPerLevel,\\n        uint256[4] memory reputationalAlbtRewardsPerLevelAfterFirstTime,\\n        uint256 minimumLevelForProvision,\\n        address referralContract_\\n    ) external onlyOwner() checkEpoch() {\\n        // If action exists it will for sure provide rewards to level 3 stakers.\\n        require(rewardPerActionPerLevel[keccak256(abi.encodePacked(action))][3] > 0, \\\"Action should already exist\\\");\\n\\n        _storeAction(\\n            action,\\n            reputationalAlbtRewardsPerLevel,\\n            reputationalAlbtRewardsPerLevelAfterFirstTime,\\n            minimumLevelForProvision,\\n            referralContract_\\n        );\\n\\n        emit ActionUpdated(action);\\n    }\\n\\n    /**\\n     * @dev This function is used by users to provide rewards to all users for their actions.\\n     * @param actions The actions provided.\\n     * @param signatures The signatures representing the actions.\\n     */\\n    function provideRewardsForActions(SignatureVerifier.Action[] memory actions, bytes[] memory signatures) external nonReentrant() checkEpoch() {\\n        uint256 stakingLevel = stakerMedalNft.getLevelOfStaker(msg.sender);\\n        require(rewardPerActionProvisionPerLevel[stakingLevel] > 0,\\n            \\\"Staking level not enough to provide rewards for actions\\\");\\n        require(actions.length == signatures.length, \\\"Invalid length\\\");\\n\\n        uint256 actionsRemainingForCurrentEpoch = maxActionsPerDayPerLevel[stakingLevel].sub(\\n            actionsProvidedPerAccountPerEpoch[msg.sender][currentEpoch]);\\n\\n        require(actions.length <= actionsRemainingForCurrentEpoch, \\\"Too many actions\\\");\\n\\n        address[] memory accounts = new address[](actions.length.add(1));\\n        uint256[] memory rewards = new uint256[](actions.length.add(1));\\n\\n        uint256 rewardForCaller = 0;\\n\\n        for (uint256 i = 0; i < actions.length; i++) {\\n            (bool isValid, uint256 reward) = _checkValidActionProvision(actions[i], signatures[i], stakingLevel);\\n            if (isValid) {\\n                accounts[i] = actions[i].account;\\n                rewards[i] = reward;\\n\\n                rewardForCaller = rewardForCaller.add(rewardPerActionProvisionPerLevel[stakingLevel]);\\n                actionsProvidedPerAccountPerEpoch[msg.sender][currentEpoch] =\\n                    actionsProvidedPerAccountPerEpoch[msg.sender][currentEpoch].add(1);\\n            } else {\\n                actions[i] = SignatureVerifier.Action(\\\"\\\", \\\"\\\", address(0), 0);\\n                signatures[i] = \\\"\\\";\\n                accounts[i] = address(0);\\n                rewards[i] = 0;\\n            }\\n        }\\n\\n        accounts[actions.length] = msg.sender;\\n        rewards[actions.length] = rewardForCaller;\\n\\n        escrow.multiMintReputationalToken(accounts, rewards);\\n\\n        emit ActionsProvided(actions, signatures, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Check Action\\n     * @dev checks if given action has a reward for specific level\\n     * @return exist boolean represents checks if action has a reward associated\\n     */\\n    function checkAction(string memory action, uint256 stakingLevel) public view returns (bool exist) {\\n        return rewardPerActionPerLevel[keccak256(abi.encodePacked(action))][stakingLevel] > 0;\\n    }\\n\\n    /**\\n     * @dev Checks if an action provision is valid\\n     * @param action The action to check.\\n     * @param signature The signature provided for this specific action.\\n     * @param stakingLevelOfProvider The staking level action provider has.\\n     * @dev returns true if action is ok and also the reward for the account done the action.\\n     */\\n    function _checkValidActionProvision(\\n        SignatureVerifier.Action memory action,\\n        bytes memory signature,\\n        uint256 stakingLevelOfProvider\\n    ) internal returns (bool, uint256) {\\n        uint256 stakingLevelOfActionAccount = stakerMedalNft.getLevelOfStaker(action.account);\\n        bytes32 actionHash = keccak256(abi.encodePacked(action.actionName));\\n\\n        bool isValidReferralId = true;\\n        bytes32 specificActionHash = actionHash;\\n\\n        uint256 rewardForAction = rewardPerActionPerLevel[actionHash][stakingLevelOfActionAccount];\\n\\n        if (address(referralContract[actionHash]) != address(0)) {\\n            isValidReferralId = referralContract[actionHash].isValidReferralId(action.referralId);\\n            specificActionHash = keccak256(abi.encodePacked(action.actionName, action.referralId));\\n        }\\n\\n        if (lastEpochActionDonePerAccount[action.account][specificActionHash] != 0) {\\n            if (rewardPerActionPerLevelAfterFirstTime[actionHash][stakingLevelOfActionAccount] == 0 ||\\n                currentEpoch == lastEpochActionDonePerAccount[action.account][specificActionHash])\\n            {\\n                return (false, 0);\\n            } else {\\n                rewardForAction = rewardPerActionPerLevelAfterFirstTime[actionHash][stakingLevelOfActionAccount];\\n            }\\n        }\\n\\n        if (action.isValidSignature(signature, DOMAIN_SEPARATOR) &&\\n            minimumLevelForActionProvision[actionHash] <= stakingLevelOfProvider &&\\n            rewardForAction != 0 && isValidReferralId)\\n        {\\n            lastEpochActionDonePerAccount[action.account][specificActionHash] = currentEpoch;\\n            return (true, rewardForAction);\\n        }\\n\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @notice Store action\\n     * @dev This function is storing all specs for an action.\\n     */\\n    function _storeAction(\\n        string memory action,\\n        uint256[4] memory reputationalAlbtRewardsPerLevel,\\n        uint256[4] memory reputationalAlbtRewardsPerLevelAfterFirstTime,\\n        uint256 minimumLevelForProvision,\\n        address referralContract_\\n    ) internal {\\n        bytes32 actionHash = keccak256(abi.encodePacked(action));\\n        for (uint256 i = 0; i < 4; i++) {\\n            rewardPerActionPerLevel[actionHash][i] = reputationalAlbtRewardsPerLevel[i];\\n            rewardPerActionPerLevelAfterFirstTime[actionHash][i] = reputationalAlbtRewardsPerLevelAfterFirstTime[i];\\n        }\\n\\n        minimumLevelForActionProvision[actionHash] = minimumLevelForProvision;\\n        referralContract[actionHash] = IReferralContract(referralContract_);\\n    }\\n}\\n\",\"keccak256\":\"0x9d80ace14322cf728cd77f26bd49adc7515a466ca2b480f8acbf1877e0f6b50d\",\"license\":\"MIT\"},\"contracts/interfaces/IEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title Interface of the Escrow.\\n */\\ninterface IEscrow {\\n    function receiveFunding(uint256 investmentId, uint256 amount) external;\\n\\n    function transferFundingNFT(\\n        uint256 investmentId,\\n        uint256 partitionsPurchased,\\n        address receiver\\n    ) external;\\n\\n    function lockFundingNFT(\\n        uint256 investmentId,\\n        uint256 amountOfNfts,\\n        address sender\\n    ) external;\\n\\n    function transferLendingToken(\\n        address lendingToken,\\n        address seeker,\\n        uint256 amount\\n    ) external;\\n\\n    function transferInvestmentToken(\\n        address investmentToken,\\n        address seeker,\\n        uint256 amount\\n    ) external;\\n\\n    function mintReputationalToken(address recipient, uint256 amount) external;\\n\\n    function burnReputationalToken(address from, uint256 amount) external;\\n\\n    function multiMintReputationalToken(address[] memory recipients, uint256[] memory amounts) external;\\n\\n    function burnFundingNFT(address account, uint256 investmentId, uint256 amount) external;\\n\\n}\\n\",\"keccak256\":\"0xd3ef7b84388624667aa8056bdd0dd6c01386d6b1f5f35d411ec6c5972eec9db9\",\"license\":\"MIT\"},\"contracts/interfaces/IReferralContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @title Interface of every referral contract.\\n */\\ninterface IReferralContract {\\n    function isValidReferralId(uint256 referralId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x64220b46c56f54b728d66750286140b2f5a750bad7fffa8221c64c690bc8c5d1\",\"license\":\"MIT\"},\"contracts/interfaces/IStakerMedalNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @title Interface of the StakerMedalNFT contract.\\n */\\ninterface IStakerMedalNFT {\\n    function getLevelOfStaker(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x177d502935680ee13e31038a7ef97fd307eddfa475cd418c3cf404535e962c4f\",\"license\":\"MIT\"},\"contracts/libs/BytesReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\n\\n/**\\n * @title Bytes Reader Library\\n */\\nlibrary BytesReader {\\n    /**\\n     * @notice Reads a bytes32 value from a position in a byte array.\\n     * @param b Byte array containing a bytes32 value.\\n     * @param index Index in byte array of bytes32 value.\\n     * @return result bytes32 value from byte array.\\n     */\\n    function readBytes32(bytes memory b, uint256 index) internal pure returns (bytes32 result) {\\n        require(b.length >= index + 32, \\\"readBytes32: data too short\\\" );\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            result := mload(add(b, add(index,32)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x21fdba28b9a18cfa9be76aa34588c17918a46956f95932f78685dedddc9b512d\",\"license\":\"MIT\"},\"contracts/libs/SignatureVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./BytesReader.sol\\\";\\n\\n/**\\n * @title Signature Verifier Library\\n */\\nlibrary SignatureVerifier {\\n    using BytesReader for bytes;\\n\\n    struct Action {\\n        string actionName;\\n        string answer;\\n        address account;\\n        uint256 referralId;\\n    }\\n\\n    // keccak256(\\\"Action(string actionName,string answer,address account,uint256 referralId)\\\");\\n    bytes32 constant ACTION_TYPEHASH = 0x1f76bf6993440811cef7b51dc00dee9d4e8fa911023c7f2d088ce4e46ac2346f;\\n\\n    /**\\n     * @notice Gets Actions struct hash\\n     * @param action the Action to retrieve\\n     * @return the keccak hash Action struct\\n     */\\n    function getActionStructHash(Action memory action) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    ACTION_TYPEHASH,\\n                    keccak256(bytes(action.actionName)),\\n                    keccak256(bytes(action.answer)),\\n                    action.account,\\n                    action.referralId\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @notice Gets Actions typed data hash\\n     * @param action the Action to retrieve\\n     * @return actionHash actionHash the keccak Action hash\\n     */\\n    function getActionTypedDataHash(Action memory action, bytes32 DOMAIN_SEPARATOR)\\n        internal\\n        pure\\n        returns (bytes32 actionHash)\\n    {\\n        actionHash = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, getActionStructHash(action)));\\n    }\\n\\n    /**\\n     * @notice Verifies that an action has been signed by the action.account.\\n     * @param action The action to verify the signature for.\\n     * @param signature Proof that the hash has been signed by action.account.\\n     * @return True if the address recovered from the provided signature matches the action.account.\\n     */\\n    function isValidSignature(\\n        Action memory action,\\n        bytes memory signature,\\n        bytes32 DOMAIN_SEPARATOR\\n    ) internal pure returns (bool) {\\n        if (signature.length != 65) return false;\\n\\n        bytes32 hash = getActionTypedDataHash(action, DOMAIN_SEPARATOR);\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        assembly {\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n            v := and(mload(add(signature, 65)), 255)\\n        }\\n\\n        address recovered = ecrecover(hash, v, r, s);\\n\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 || \\n            (v != 27 && v != 28) ||\\n            recovered == address(0))\\n        {\\n            return false;\\n        }\\n\\n        return action.account == recovered;\\n    }\\n}\\n\",\"keccak256\":\"0x7aa1f31b1f3839a4fd6f5483320e647c3d5cb70c04942e191082326290114a85\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506127fb806100206000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80638da5cb5b116100b8578063eb2a51a31161007c578063eb2a51a314610247578063ebce9fa71461025a578063f2fcd0131461026d578063f2fde38b14610280578063f43e548914610293578063faceea1c1461029b57610137565b80638da5cb5b14610209578063a3737a0714610211578063c49f91d314610224578063d5d0f27b1461022c578063e2fdcc171461023f57610137565b80633d682f65116100ff5780633d682f65146101a857806351d4876c146101bb5780635fda5dc6146101db578063715018a6146101ee5780638014b328146101f657610137565b80630dcb638a1461013c57806311a3d2c41461015157806315f2e53c146101645780631e8fe20e1461018d5780633644e515146101a0575b600080fd5b61014f61014a366004612028565b6102bb565b005b61014f61015f36600461205d565b61041a565b610177610172366004611ebb565b61067b565b60405161018491906123f6565b60405180910390f35b61017761019b3660046120ed565b610698565b6101776106b5565b6101776101b63660046120d5565b6106bb565b6101ce6101c93660046120d5565b6106cd565b60405161018491906122ad565b61014f6101e936600461210e565b6106e8565b61014f610823565b610177610204366004611ee4565b6108cf565b6101ce6108ec565b61014f61021f36600461210e565b6108fb565b610177610aa1565b61017761023a3660046120ed565b610ac5565b6101ce610ae2565b6101776102553660046120d5565b610af1565b6101776102683660046120d5565b610b03565b61014f61027b366004611ef6565b610b15565b61014f61028e366004611ea1565b6110a7565b6101ce6111aa565b6102ae6102a936600461218a565b6111b9565b60405161018491906123eb565b6102c3611211565b6001600160a01b03166102d46108ec565b6001600160a01b03161461031d576040805162461bcd60e51b81526020600482018190526024820152600080516020612786833981519152604482015290519081900360640190fd5b60a05442106103b35760a0546000906103439061033d4262015180611215565b90611276565b9050600061035482620151806112d3565b609f549091506103649082611215565b609f55610380610377620151808361133a565b60a05490611215565b60a081905550609f546000805160206127a683398151915260a0546040516103a891906123f6565b60405180910390a250505b60005b6004811015610415578281600481106103cb57fe5b6020020151609b6000838152602001908152602001600020819055508181600481106103f357fe5b602090810291909101516000838152609c9092526040909120556001016103b6565b505050565b600054610100900460ff16806104335750610433611393565b80610441575060005460ff16155b61047c5760405162461bcd60e51b815260040180806020018281038252602e815260200180612737602e913960400191505060405180910390fd5b600054610100900460ff161580156104a7576000805460ff1961ff0019909116610100171660011790555b60608501516104d15760405162461bcd60e51b81526004016104c8906125b8565b60405180910390fd5b60608401516104f25760405162461bcd60e51b81526004016104c890612615565b6001600160a01b0383166105185760405162461bcd60e51b81526004016104c8906124eb565b6001600160a01b03821661053e5760405162461bcd60e51b81526004016104c89061249d565b6105466113a4565b61054e611456565b60a180546001600160a01b038086166001600160a01b03199283161790925560a280549285169290911691909117905560005b60048110156105e05785816004811061059657fe5b6020020151609b6000838152602001908152602001600020819055508481600481106105be57fe5b602090810291909101516000838152609c909252604090912055600101610581565b506040805160c0810182526016608082019081527520b63634b0b731b2a13637b1b5902b32b934b334b2b960511b60a083015281528151808301835260038152620312e360ec1b60208281019190915282015246918101829052306060820152610649906114eb565b60a3556001609f5561065e4262015180611215565b60a055508015610674576000805461ff00191690555b5050505050565b609e60209081526000928352604080842090915290825290205481565b609760209081526000928352604080842090915290825290205481565b60a35481565b609c6020526000908152604090205481565b609a602052600090815260409020546001600160a01b031681565b6106f0611211565b6001600160a01b03166107016108ec565b6001600160a01b03161461074a576040805162461bcd60e51b81526020600482018190526024820152600080516020612786833981519152604482015290519081900360640190fd5b60a05442106107d15760a05460009061076a9061033d4262015180611215565b9050600061077b82620151806112d3565b609f5490915061078b9082611215565b609f5561079e610377620151808361133a565b60a081905550609f546000805160206127a683398151915260a0546040516107c691906123f6565b60405180910390a250505b6107de8585858585611565565b846040516107ec9190612254565b604051908190038120907fc3f87436ae495102b25db0ae62146c338a63f6d0f97b0393ad7b865527e1030090600090a25050505050565b61082b611211565b6001600160a01b031661083c6108ec565b6001600160a01b031614610885576040805162461bcd60e51b81526020600482018190526024820152600080516020612786833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b609d60209081526000928352604080842090915290825290205481565b6033546001600160a01b031690565b610903611211565b6001600160a01b03166109146108ec565b6001600160a01b03161461095d576040805162461bcd60e51b81526020600482018190526024820152600080516020612786833981519152604482015290519081900360640190fd5b60a05442106109e45760a05460009061097d9061033d4262015180611215565b9050600061098e82620151806112d3565b609f5490915061099e9082611215565b609f556109b1610377620151808361133a565b60a081905550609f546000805160206127a683398151915260a0546040516109d991906123f6565b60405180910390a250505b600060976000876040516020016109fb9190612254565b6040516020818303038152906040528051906020012081526020019081526020016000206000600381526020019081526020016000205411610a4f5760405162461bcd60e51b81526004016104c890612667565b610a5c8585858585611565565b84604051610a6a9190612254565b604051908190038120907f0ead62719cc317496fa37caf577c47ff6bdc558ef6348908a6afea40c90bb86090600090a25050505050565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b609860209081526000928352604080842090915290825290205481565b60a1546001600160a01b031681565b60996020526000908152604090205481565b609b6020526000908152604090205481565b60026065541415610b6d576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260655560a0544210610bf95760a054600090610b929061033d4262015180611215565b90506000610ba382620151806112d3565b609f54909150610bb39082611215565b609f55610bc6610377620151808361133a565b60a081905550609f546000805160206127a683398151915260a054604051610bee91906123f6565b60405180910390a250505b60a2546040516311ece36d60e01b81526000916001600160a01b0316906311ece36d90610c2a9033906004016122ad565b60206040518083038186803b158015610c4257600080fd5b505afa158015610c56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7a91906121cd565b6000818152609b6020526040902054909150610ca85760405162461bcd60e51b81526004016104c89061255b565b8151835114610cc95760405162461bcd60e51b81526004016104c890612475565b336000908152609d60209081526040808320609f548452825280832054848452609c909252822054610cfa91611276565b90508084511115610d1d5760405162461bcd60e51b81526004016104c890612531565b8351600090610d2d906001611215565b67ffffffffffffffff81118015610d4357600080fd5b50604051908082528060200260200182016040528015610d6d578160200160208202803683370190505b5090506000610d876001875161121590919063ffffffff16565b67ffffffffffffffff81118015610d9d57600080fd5b50604051908082528060200260200182016040528015610dc7578160200160208202803683370190505b5090506000805b8751811015610faa57600080610e0b8a8481518110610de957fe5b60200260200101518a8581518110610dfd57fe5b60200260200101518a611642565b915091508115610ee557898381518110610e2157fe5b602002602001015160400151868481518110610e3957fe5b60200260200101906001600160a01b031690816001600160a01b03168152505080858481518110610e6657fe5b602002602001018181525050610e98609b60008a8152602001908152602001600020548561121590919063ffffffff16565b336000908152609d60209081526040808320609f548452909152902054909450610ec3906001611215565b336000908152609d60209081526040808320609f548452909152902055610fa0565b6040805160a081018252600060808201818152825282516020818101855282825283015291810182905260608101919091528a518b9085908110610f2557fe5b602002602001018190525060405180602001604052806000815250898481518110610f4c57fe5b60200260200101819052506000868481518110610f6557fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000858481518110610f9357fe5b6020026020010181815250505b5050600101610dce565b503383885181518110610fb957fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508082885181518110610fe757fe5b602090810291909101015260a154604051633fb0255b60e21b81526001600160a01b039091169063fec0956c9061102490869086906004016122c1565b600060405180830381600087803b15801561103e57600080fd5b505af1158015611052573d6000803e3d6000fd5b50505050336001600160a01b03167f6baedbdec8920a0958f0d583990522813f03b2e5205849abdbbf79548c92d30b8888604051611091929190612337565b60405180910390a2505060016065555050505050565b6110af611211565b6001600160a01b03166110c06108ec565b6001600160a01b031614611109576040805162461bcd60e51b81526020600482018190526024820152600080516020612786833981519152604482015290519081900360640190fd5b6001600160a01b03811661114e5760405162461bcd60e51b81526004018080602001828103825260268152602001806127116026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b60a2546001600160a01b031681565b60008060976000856040516020016111d19190612254565b6040516020818303038152906040528051906020012081526020019081526020016000206000848152602001908152602001600020541190505b92915050565b3390565b60008282018381101561126f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000828211156112cd576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000808211611329576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161133257fe5b049392505050565b6000826113495750600061120b565b8282028284828161135657fe5b041461126f5760405162461bcd60e51b81526004018080602001828103825260218152602001806127656021913960400191505060405180910390fd5b600061139e30611935565b15905090565b600054610100900460ff16806113bd57506113bd611393565b806113cb575060005460ff16155b6114065760405162461bcd60e51b815260040180806020018281038252602e815260200180612737602e913960400191505060405180910390fd5b600054610100900460ff16158015611431576000805460ff1961ff0019909116610100171660011790555b61143961193b565b6114416119db565b8015611453576000805461ff00191690555b50565b600054610100900460ff168061146f575061146f611393565b8061147d575060005460ff16155b6114b85760405162461bcd60e51b815260040180806020018281038252602e815260200180612737602e913960400191505060405180910390fd5b600054610100900460ff161580156114e3576000805460ff1961ff0019909116610100171660011790555b611441611ad4565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b8260000151805190602001208360200151805190602001208460400151856060015160405160200161154795949392919061242b565b6040516020818303038152906040528051906020012090505b919050565b6000856040516020016115789190612254565b60405160208183030381529060405280519060200120905060005b6004811015611602578581600481106115a857fe5b60209081029190910151600084815260978352604080822085835290935291909120558481600481106115d757fe5b6020908102919091015160008481526098835260408082208583529093529190912055600101611593565b50600090815260996020908152604080832094909455609a90529190912080546001600160a01b0319166001600160a01b03909216919091179055505050565b60a25460408085015190516311ece36d60e01b8152600092839283926001600160a01b03909216916311ece36d9161167c916004016122ad565b60206040518083038186803b15801561169457600080fd5b505afa1580156116a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cc91906121cd565b9050600086600001516040516020016116e59190612254565b60408051601f198184030181529181528151602092830120600081815260978452828120868252845282812054828252609a909452919091205490925060019183916001600160a01b0316156117f8576000848152609a6020526040908190205460608c01519151637adec5fb60e11b81526001600160a01b039091169163f5bd8bf69161177691906004016123f6565b60206040518083038186803b15801561178e57600080fd5b505afa1580156117a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c691906120b5565b8a5160608c01516040519295506117df92602001612270565b6040516020818303038152906040528051906020012091505b6040808b01516001600160a01b03166000908152609e6020908152828220858352905220541561189f576000848152609860209081526040808320888452909152902054158061186d57506040808b01516001600160a01b03166000908152609e602090815282822085835290522054609f54145b156118835760008096509650505050505061192d565b5060008381526098602090815260408083208784529091529020545b60a3546118af908b908b90611b7a565b80156118c957506000848152609960205260409020548810155b80156118d457508015155b80156118dd5750825b1561192057609f546040808c01516001600160a01b03166000908152609e6020908152828220958252949094529092209190915560019550935061192d92505050565b6000809650965050505050505b935093915050565b3b151590565b600054610100900460ff16806119545750611954611393565b80611962575060005460ff16155b61199d5760405162461bcd60e51b815260040180806020018281038252602e815260200180612737602e913960400191505060405180910390fd5b600054610100900460ff16158015611441576000805460ff1961ff0019909116610100171660011790558015611453576000805461ff001916905550565b600054610100900460ff16806119f457506119f4611393565b80611a02575060005460ff16155b611a3d5760405162461bcd60e51b815260040180806020018281038252602e815260200180612737602e913960400191505060405180910390fd5b600054610100900460ff16158015611a68576000805460ff1961ff0019909116610100171660011790555b6000611a72611211565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611453576000805461ff001916905550565b600054610100900460ff1680611aed5750611aed611393565b80611afb575060005460ff16155b611b365760405162461bcd60e51b815260040180806020018281038252602e815260200180612737602e913960400191505060405180910390fd5b600054610100900460ff16158015611b61576000805460ff1961ff0019909116610100171660011790555b60016065558015611453576000805461ff001916905550565b60008251604114611b8d5750600061126f565b6000611b998584611c99565b90506000806000602087015192506040870151915060ff6041880151169050600060018583868660405160008152602001604052604051611bdd9493929190612457565b6020604051602081039080840390855afa158015611bff573d6000803e3d6000fd5b5050604051601f1901519150507f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831180611c4d57508160ff16601b14158015611c4d57508160ff16601c14155b80611c5f57506001600160a01b038116155b15611c725760009550505050505061126f565b806001600160a01b031689604001516001600160a01b031614955050505050509392505050565b600081611ca584611cd4565b604051602001611cb6929190612292565b60405160208183030381529060405280519060200120905092915050565b60007f1f76bf6993440811cef7b51dc00dee9d4e8fa911023c7f2d088ce4e46ac2346f60001b826000015180519060200120836020015180519060200120846040015185606001516040516020016115479594939291906123ff565b600067ffffffffffffffff831115611d4457fe5b611d57601f8401601f191660200161269e565b9050828152838383011115611d6b57600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461156057600080fd5b600082601f830112611da9578081fd5b81356020611dbe611db9836126c2565b61269e565b82815281810190858301855b85811015611e08578135880189603f820112611de4578788fd5b611df58a8783013560408401611d30565b8552509284019290840190600101611dca565b5090979650505050505050565b600082601f830112611e25578081fd5b6040516080810181811067ffffffffffffffff82111715611e4257fe5b604052808360808101861015611e56578384fd5b835b6004811015611e77578135835260209283019290910190600101611e58565b509195945050505050565b600082601f830112611e92578081fd5b61126f83833560208501611d30565b600060208284031215611eb2578081fd5b61126f82611d82565b60008060408385031215611ecd578081fd5b611ed683611d82565b946020939093013593505050565b60008060408385031215611ecd578182fd5b60008060408385031215611f08578182fd5b823567ffffffffffffffff80821115611f1f578384fd5b818501915085601f830112611f32578384fd5b81356020611f42611db9836126c2565b82815281810190858301885b85811015611ff957813588016080818e03601f19011215611f6d578a8bfd5b604051608081018181108a82111715611f8257fe5b6040528187013589811115611f95578c8dfd5b611fa38f8983860101611e82565b825250604082013589811115611fb7578c8dfd5b611fc58f8983860101611e82565b8883015250611fd660608301611d82565b604082015260809190910135606082015284529284019290840190600101611f4e565b50909750505086013592505080821115612011578283fd5b5061201e85828601611d99565b9150509250929050565b600080610100838503121561203b578182fd5b6120458484611e15565b91506120548460808501611e15565b90509250929050565b6000806000806101408587031215612073578182fd5b61207d8686611e15565b935061208c8660808701611e15565b925061209b6101008601611d82565b91506120aa6101208601611d82565b905092959194509250565b6000602082840312156120c6578081fd5b8151801515811461126f578182fd5b6000602082840312156120e6578081fd5b5035919050565b600080604083850312156120ff578182fd5b50508035926020909101359150565b60008060008060006101608688031215612126578283fd5b853567ffffffffffffffff81111561213c578384fd5b61214888828901611e82565b9550506121588760208801611e15565b93506121678760a08801611e15565b9250610120860135915061217e6101408701611d82565b90509295509295909350565b6000806040838503121561219c578182fd5b823567ffffffffffffffff8111156121b2578283fd5b6121be85828601611e82565b95602094909401359450505050565b6000602082840312156121de578081fd5b5051919050565b6000815180845260208085019450848183028601828601855b85811015611e08578383038952612216838351612228565b988501989250908401906001016121fe565b600081518084526122408160208601602086016126e0565b601f01601f19169290920160200192915050565b600082516122668184602087016126e0565b9190910192915050565b600083516122828184602088016126e0565b9190910191825250602001919050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b604080825283519082018190526000906020906060840190828701845b828110156123035781516001600160a01b0316845292840192908401906001016122de565b50505083810382850152845180825285830191830190845b81811015611e085783518352928401929184019160010161231b565b604080825283518282018190526000919060609081850190602080820287018401818a01875b848110156123ca57605f198a840301865281516080815181865261238382870182612228565b915050858201518582038787015261239b8282612228565b838c01516001600160a01b0316878d0152928a0151958a0195909552509584019592509083019060010161235d565b5050878103828901526123dd818a6121e5565b9a9950505050505050505050565b901515815260200190565b90815260200190565b948552602085019390935260408401919091526001600160a01b03166060830152608082015260a00190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b6020808252600e908201526d092dcecc2d8d2c840d8cadccee8d60931b604082015260600190565b6020808252602e908201527f43616e6e6f7420696e697469616c697a652077697468207374616b65724d656460408201526d616c4e66745f206164647265737360901b606082015260800190565b60208082526026908201527f43616e6e6f7420696e697469616c697a65207769746820657363726f775f206160408201526564647265737360d01b606082015260800190565b60208082526010908201526f546f6f206d616e7920616374696f6e7360801b604082015260600190565b60208082526037908201527f5374616b696e67206c6576656c206e6f7420656e6f75676820746f2070726f7660408201527f696465207265776172647320666f7220616374696f6e73000000000000000000606082015260800190565b6020808252603a908201527f43616e6e6f7420696e697469616c697a6520726577617264506572416374696f60408201527f6e50726f766973696f6e5065724c6576656c5f20776974682030000000000000606082015260800190565b60208082526032908201527f43616e6e6f7420696e697469616c697a65206d6178416374696f6e7350657244604082015271061795065724c6576656c5f207769746820360741b606082015260800190565b6020808252601b908201527f416374696f6e2073686f756c6420616c72656164792065786973740000000000604082015260600190565b60405181810167ffffffffffffffff811182821017156126ba57fe5b604052919050565b600067ffffffffffffffff8211156126d657fe5b5060209081020190565b60005b838110156126fb5781810151838201526020016126e3565b8381111561270a576000848401525b5050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572528990bbb5369a7f6d5acab41233e32bddb4882673d0208805b59cbad0dc1ec8a264697066735822122027f2ce3191ef6d329a8dfc274c9126ab8505f884cb1fd5d3d77126c90502b4d564736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80638da5cb5b116100b8578063eb2a51a31161007c578063eb2a51a314610247578063ebce9fa71461025a578063f2fcd0131461026d578063f2fde38b14610280578063f43e548914610293578063faceea1c1461029b57610137565b80638da5cb5b14610209578063a3737a0714610211578063c49f91d314610224578063d5d0f27b1461022c578063e2fdcc171461023f57610137565b80633d682f65116100ff5780633d682f65146101a857806351d4876c146101bb5780635fda5dc6146101db578063715018a6146101ee5780638014b328146101f657610137565b80630dcb638a1461013c57806311a3d2c41461015157806315f2e53c146101645780631e8fe20e1461018d5780633644e515146101a0575b600080fd5b61014f61014a366004612028565b6102bb565b005b61014f61015f36600461205d565b61041a565b610177610172366004611ebb565b61067b565b60405161018491906123f6565b60405180910390f35b61017761019b3660046120ed565b610698565b6101776106b5565b6101776101b63660046120d5565b6106bb565b6101ce6101c93660046120d5565b6106cd565b60405161018491906122ad565b61014f6101e936600461210e565b6106e8565b61014f610823565b610177610204366004611ee4565b6108cf565b6101ce6108ec565b61014f61021f36600461210e565b6108fb565b610177610aa1565b61017761023a3660046120ed565b610ac5565b6101ce610ae2565b6101776102553660046120d5565b610af1565b6101776102683660046120d5565b610b03565b61014f61027b366004611ef6565b610b15565b61014f61028e366004611ea1565b6110a7565b6101ce6111aa565b6102ae6102a936600461218a565b6111b9565b60405161018491906123eb565b6102c3611211565b6001600160a01b03166102d46108ec565b6001600160a01b03161461031d576040805162461bcd60e51b81526020600482018190526024820152600080516020612786833981519152604482015290519081900360640190fd5b60a05442106103b35760a0546000906103439061033d4262015180611215565b90611276565b9050600061035482620151806112d3565b609f549091506103649082611215565b609f55610380610377620151808361133a565b60a05490611215565b60a081905550609f546000805160206127a683398151915260a0546040516103a891906123f6565b60405180910390a250505b60005b6004811015610415578281600481106103cb57fe5b6020020151609b6000838152602001908152602001600020819055508181600481106103f357fe5b602090810291909101516000838152609c9092526040909120556001016103b6565b505050565b600054610100900460ff16806104335750610433611393565b80610441575060005460ff16155b61047c5760405162461bcd60e51b815260040180806020018281038252602e815260200180612737602e913960400191505060405180910390fd5b600054610100900460ff161580156104a7576000805460ff1961ff0019909116610100171660011790555b60608501516104d15760405162461bcd60e51b81526004016104c8906125b8565b60405180910390fd5b60608401516104f25760405162461bcd60e51b81526004016104c890612615565b6001600160a01b0383166105185760405162461bcd60e51b81526004016104c8906124eb565b6001600160a01b03821661053e5760405162461bcd60e51b81526004016104c89061249d565b6105466113a4565b61054e611456565b60a180546001600160a01b038086166001600160a01b03199283161790925560a280549285169290911691909117905560005b60048110156105e05785816004811061059657fe5b6020020151609b6000838152602001908152602001600020819055508481600481106105be57fe5b602090810291909101516000838152609c909252604090912055600101610581565b506040805160c0810182526016608082019081527520b63634b0b731b2a13637b1b5902b32b934b334b2b960511b60a083015281528151808301835260038152620312e360ec1b60208281019190915282015246918101829052306060820152610649906114eb565b60a3556001609f5561065e4262015180611215565b60a055508015610674576000805461ff00191690555b5050505050565b609e60209081526000928352604080842090915290825290205481565b609760209081526000928352604080842090915290825290205481565b60a35481565b609c6020526000908152604090205481565b609a602052600090815260409020546001600160a01b031681565b6106f0611211565b6001600160a01b03166107016108ec565b6001600160a01b03161461074a576040805162461bcd60e51b81526020600482018190526024820152600080516020612786833981519152604482015290519081900360640190fd5b60a05442106107d15760a05460009061076a9061033d4262015180611215565b9050600061077b82620151806112d3565b609f5490915061078b9082611215565b609f5561079e610377620151808361133a565b60a081905550609f546000805160206127a683398151915260a0546040516107c691906123f6565b60405180910390a250505b6107de8585858585611565565b846040516107ec9190612254565b604051908190038120907fc3f87436ae495102b25db0ae62146c338a63f6d0f97b0393ad7b865527e1030090600090a25050505050565b61082b611211565b6001600160a01b031661083c6108ec565b6001600160a01b031614610885576040805162461bcd60e51b81526020600482018190526024820152600080516020612786833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b609d60209081526000928352604080842090915290825290205481565b6033546001600160a01b031690565b610903611211565b6001600160a01b03166109146108ec565b6001600160a01b03161461095d576040805162461bcd60e51b81526020600482018190526024820152600080516020612786833981519152604482015290519081900360640190fd5b60a05442106109e45760a05460009061097d9061033d4262015180611215565b9050600061098e82620151806112d3565b609f5490915061099e9082611215565b609f556109b1610377620151808361133a565b60a081905550609f546000805160206127a683398151915260a0546040516109d991906123f6565b60405180910390a250505b600060976000876040516020016109fb9190612254565b6040516020818303038152906040528051906020012081526020019081526020016000206000600381526020019081526020016000205411610a4f5760405162461bcd60e51b81526004016104c890612667565b610a5c8585858585611565565b84604051610a6a9190612254565b604051908190038120907f0ead62719cc317496fa37caf577c47ff6bdc558ef6348908a6afea40c90bb86090600090a25050505050565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b609860209081526000928352604080842090915290825290205481565b60a1546001600160a01b031681565b60996020526000908152604090205481565b609b6020526000908152604090205481565b60026065541415610b6d576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260655560a0544210610bf95760a054600090610b929061033d4262015180611215565b90506000610ba382620151806112d3565b609f54909150610bb39082611215565b609f55610bc6610377620151808361133a565b60a081905550609f546000805160206127a683398151915260a054604051610bee91906123f6565b60405180910390a250505b60a2546040516311ece36d60e01b81526000916001600160a01b0316906311ece36d90610c2a9033906004016122ad565b60206040518083038186803b158015610c4257600080fd5b505afa158015610c56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c7a91906121cd565b6000818152609b6020526040902054909150610ca85760405162461bcd60e51b81526004016104c89061255b565b8151835114610cc95760405162461bcd60e51b81526004016104c890612475565b336000908152609d60209081526040808320609f548452825280832054848452609c909252822054610cfa91611276565b90508084511115610d1d5760405162461bcd60e51b81526004016104c890612531565b8351600090610d2d906001611215565b67ffffffffffffffff81118015610d4357600080fd5b50604051908082528060200260200182016040528015610d6d578160200160208202803683370190505b5090506000610d876001875161121590919063ffffffff16565b67ffffffffffffffff81118015610d9d57600080fd5b50604051908082528060200260200182016040528015610dc7578160200160208202803683370190505b5090506000805b8751811015610faa57600080610e0b8a8481518110610de957fe5b60200260200101518a8581518110610dfd57fe5b60200260200101518a611642565b915091508115610ee557898381518110610e2157fe5b602002602001015160400151868481518110610e3957fe5b60200260200101906001600160a01b031690816001600160a01b03168152505080858481518110610e6657fe5b602002602001018181525050610e98609b60008a8152602001908152602001600020548561121590919063ffffffff16565b336000908152609d60209081526040808320609f548452909152902054909450610ec3906001611215565b336000908152609d60209081526040808320609f548452909152902055610fa0565b6040805160a081018252600060808201818152825282516020818101855282825283015291810182905260608101919091528a518b9085908110610f2557fe5b602002602001018190525060405180602001604052806000815250898481518110610f4c57fe5b60200260200101819052506000868481518110610f6557fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506000858481518110610f9357fe5b6020026020010181815250505b5050600101610dce565b503383885181518110610fb957fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508082885181518110610fe757fe5b602090810291909101015260a154604051633fb0255b60e21b81526001600160a01b039091169063fec0956c9061102490869086906004016122c1565b600060405180830381600087803b15801561103e57600080fd5b505af1158015611052573d6000803e3d6000fd5b50505050336001600160a01b03167f6baedbdec8920a0958f0d583990522813f03b2e5205849abdbbf79548c92d30b8888604051611091929190612337565b60405180910390a2505060016065555050505050565b6110af611211565b6001600160a01b03166110c06108ec565b6001600160a01b031614611109576040805162461bcd60e51b81526020600482018190526024820152600080516020612786833981519152604482015290519081900360640190fd5b6001600160a01b03811661114e5760405162461bcd60e51b81526004018080602001828103825260268152602001806127116026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b60a2546001600160a01b031681565b60008060976000856040516020016111d19190612254565b6040516020818303038152906040528051906020012081526020019081526020016000206000848152602001908152602001600020541190505b92915050565b3390565b60008282018381101561126f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6000828211156112cd576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000808211611329576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161133257fe5b049392505050565b6000826113495750600061120b565b8282028284828161135657fe5b041461126f5760405162461bcd60e51b81526004018080602001828103825260218152602001806127656021913960400191505060405180910390fd5b600061139e30611935565b15905090565b600054610100900460ff16806113bd57506113bd611393565b806113cb575060005460ff16155b6114065760405162461bcd60e51b815260040180806020018281038252602e815260200180612737602e913960400191505060405180910390fd5b600054610100900460ff16158015611431576000805460ff1961ff0019909116610100171660011790555b61143961193b565b6114416119db565b8015611453576000805461ff00191690555b50565b600054610100900460ff168061146f575061146f611393565b8061147d575060005460ff16155b6114b85760405162461bcd60e51b815260040180806020018281038252602e815260200180612737602e913960400191505060405180910390fd5b600054610100900460ff161580156114e3576000805460ff1961ff0019909116610100171660011790555b611441611ad4565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b8260000151805190602001208360200151805190602001208460400151856060015160405160200161154795949392919061242b565b6040516020818303038152906040528051906020012090505b919050565b6000856040516020016115789190612254565b60405160208183030381529060405280519060200120905060005b6004811015611602578581600481106115a857fe5b60209081029190910151600084815260978352604080822085835290935291909120558481600481106115d757fe5b6020908102919091015160008481526098835260408082208583529093529190912055600101611593565b50600090815260996020908152604080832094909455609a90529190912080546001600160a01b0319166001600160a01b03909216919091179055505050565b60a25460408085015190516311ece36d60e01b8152600092839283926001600160a01b03909216916311ece36d9161167c916004016122ad565b60206040518083038186803b15801561169457600080fd5b505afa1580156116a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116cc91906121cd565b9050600086600001516040516020016116e59190612254565b60408051601f198184030181529181528151602092830120600081815260978452828120868252845282812054828252609a909452919091205490925060019183916001600160a01b0316156117f8576000848152609a6020526040908190205460608c01519151637adec5fb60e11b81526001600160a01b039091169163f5bd8bf69161177691906004016123f6565b60206040518083038186803b15801561178e57600080fd5b505afa1580156117a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c691906120b5565b8a5160608c01516040519295506117df92602001612270565b6040516020818303038152906040528051906020012091505b6040808b01516001600160a01b03166000908152609e6020908152828220858352905220541561189f576000848152609860209081526040808320888452909152902054158061186d57506040808b01516001600160a01b03166000908152609e602090815282822085835290522054609f54145b156118835760008096509650505050505061192d565b5060008381526098602090815260408083208784529091529020545b60a3546118af908b908b90611b7a565b80156118c957506000848152609960205260409020548810155b80156118d457508015155b80156118dd5750825b1561192057609f546040808c01516001600160a01b03166000908152609e6020908152828220958252949094529092209190915560019550935061192d92505050565b6000809650965050505050505b935093915050565b3b151590565b600054610100900460ff16806119545750611954611393565b80611962575060005460ff16155b61199d5760405162461bcd60e51b815260040180806020018281038252602e815260200180612737602e913960400191505060405180910390fd5b600054610100900460ff16158015611441576000805460ff1961ff0019909116610100171660011790558015611453576000805461ff001916905550565b600054610100900460ff16806119f457506119f4611393565b80611a02575060005460ff16155b611a3d5760405162461bcd60e51b815260040180806020018281038252602e815260200180612737602e913960400191505060405180910390fd5b600054610100900460ff16158015611a68576000805460ff1961ff0019909116610100171660011790555b6000611a72611211565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611453576000805461ff001916905550565b600054610100900460ff1680611aed5750611aed611393565b80611afb575060005460ff16155b611b365760405162461bcd60e51b815260040180806020018281038252602e815260200180612737602e913960400191505060405180910390fd5b600054610100900460ff16158015611b61576000805460ff1961ff0019909116610100171660011790555b60016065558015611453576000805461ff001916905550565b60008251604114611b8d5750600061126f565b6000611b998584611c99565b90506000806000602087015192506040870151915060ff6041880151169050600060018583868660405160008152602001604052604051611bdd9493929190612457565b6020604051602081039080840390855afa158015611bff573d6000803e3d6000fd5b5050604051601f1901519150507f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831180611c4d57508160ff16601b14158015611c4d57508160ff16601c14155b80611c5f57506001600160a01b038116155b15611c725760009550505050505061126f565b806001600160a01b031689604001516001600160a01b031614955050505050509392505050565b600081611ca584611cd4565b604051602001611cb6929190612292565b60405160208183030381529060405280519060200120905092915050565b60007f1f76bf6993440811cef7b51dc00dee9d4e8fa911023c7f2d088ce4e46ac2346f60001b826000015180519060200120836020015180519060200120846040015185606001516040516020016115479594939291906123ff565b600067ffffffffffffffff831115611d4457fe5b611d57601f8401601f191660200161269e565b9050828152838383011115611d6b57600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b038116811461156057600080fd5b600082601f830112611da9578081fd5b81356020611dbe611db9836126c2565b61269e565b82815281810190858301855b85811015611e08578135880189603f820112611de4578788fd5b611df58a8783013560408401611d30565b8552509284019290840190600101611dca565b5090979650505050505050565b600082601f830112611e25578081fd5b6040516080810181811067ffffffffffffffff82111715611e4257fe5b604052808360808101861015611e56578384fd5b835b6004811015611e77578135835260209283019290910190600101611e58565b509195945050505050565b600082601f830112611e92578081fd5b61126f83833560208501611d30565b600060208284031215611eb2578081fd5b61126f82611d82565b60008060408385031215611ecd578081fd5b611ed683611d82565b946020939093013593505050565b60008060408385031215611ecd578182fd5b60008060408385031215611f08578182fd5b823567ffffffffffffffff80821115611f1f578384fd5b818501915085601f830112611f32578384fd5b81356020611f42611db9836126c2565b82815281810190858301885b85811015611ff957813588016080818e03601f19011215611f6d578a8bfd5b604051608081018181108a82111715611f8257fe5b6040528187013589811115611f95578c8dfd5b611fa38f8983860101611e82565b825250604082013589811115611fb7578c8dfd5b611fc58f8983860101611e82565b8883015250611fd660608301611d82565b604082015260809190910135606082015284529284019290840190600101611f4e565b50909750505086013592505080821115612011578283fd5b5061201e85828601611d99565b9150509250929050565b600080610100838503121561203b578182fd5b6120458484611e15565b91506120548460808501611e15565b90509250929050565b6000806000806101408587031215612073578182fd5b61207d8686611e15565b935061208c8660808701611e15565b925061209b6101008601611d82565b91506120aa6101208601611d82565b905092959194509250565b6000602082840312156120c6578081fd5b8151801515811461126f578182fd5b6000602082840312156120e6578081fd5b5035919050565b600080604083850312156120ff578182fd5b50508035926020909101359150565b60008060008060006101608688031215612126578283fd5b853567ffffffffffffffff81111561213c578384fd5b61214888828901611e82565b9550506121588760208801611e15565b93506121678760a08801611e15565b9250610120860135915061217e6101408701611d82565b90509295509295909350565b6000806040838503121561219c578182fd5b823567ffffffffffffffff8111156121b2578283fd5b6121be85828601611e82565b95602094909401359450505050565b6000602082840312156121de578081fd5b5051919050565b6000815180845260208085019450848183028601828601855b85811015611e08578383038952612216838351612228565b988501989250908401906001016121fe565b600081518084526122408160208601602086016126e0565b601f01601f19169290920160200192915050565b600082516122668184602087016126e0565b9190910192915050565b600083516122828184602088016126e0565b9190910191825250602001919050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b604080825283519082018190526000906020906060840190828701845b828110156123035781516001600160a01b0316845292840192908401906001016122de565b50505083810382850152845180825285830191830190845b81811015611e085783518352928401929184019160010161231b565b604080825283518282018190526000919060609081850190602080820287018401818a01875b848110156123ca57605f198a840301865281516080815181865261238382870182612228565b915050858201518582038787015261239b8282612228565b838c01516001600160a01b0316878d0152928a0151958a0195909552509584019592509083019060010161235d565b5050878103828901526123dd818a6121e5565b9a9950505050505050505050565b901515815260200190565b90815260200190565b948552602085019390935260408401919091526001600160a01b03166060830152608082015260a00190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b6020808252600e908201526d092dcecc2d8d2c840d8cadccee8d60931b604082015260600190565b6020808252602e908201527f43616e6e6f7420696e697469616c697a652077697468207374616b65724d656460408201526d616c4e66745f206164647265737360901b606082015260800190565b60208082526026908201527f43616e6e6f7420696e697469616c697a65207769746820657363726f775f206160408201526564647265737360d01b606082015260800190565b60208082526010908201526f546f6f206d616e7920616374696f6e7360801b604082015260600190565b60208082526037908201527f5374616b696e67206c6576656c206e6f7420656e6f75676820746f2070726f7660408201527f696465207265776172647320666f7220616374696f6e73000000000000000000606082015260800190565b6020808252603a908201527f43616e6e6f7420696e697469616c697a6520726577617264506572416374696f60408201527f6e50726f766973696f6e5065724c6576656c5f20776974682030000000000000606082015260800190565b60208082526032908201527f43616e6e6f7420696e697469616c697a65206d6178416374696f6e7350657244604082015271061795065724c6576656c5f207769746820360741b606082015260800190565b6020808252601b908201527f416374696f6e2073686f756c6420616c72656164792065786973740000000000604082015260600190565b60405181810167ffffffffffffffff811182821017156126ba57fe5b604052919050565b600067ffffffffffffffff8211156126d657fe5b5060209081020190565b60005b838110156126fb5781810151838201526020016126e3565b8381111561270a576000848401525b5050505056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572528990bbb5369a7f6d5acab41233e32bddb4882673d0208805b59cbad0dc1ec8a264697066735822122027f2ce3191ef6d329a8dfc274c9126ab8505f884cb1fd5d3d77126c90502b4d564736f6c63430007060033",
  "devdoc": {
    "details": "Extends Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable",
    "kind": "dev",
    "methods": {
      "checkAction(string,uint256)": {
        "details": "checks if given action has a reward for specific level",
        "returns": {
          "exist": "boolean represents checks if action has a reward associated"
        }
      },
      "importAction(string,uint256[4],uint256[4],uint256,address)": {
        "details": "This function is used by the owner to add more actions.",
        "params": {
          "action": "The name of the action.",
          "minimumLevelForProvision": "The minimum staker level to be able to provide rewards for this action.",
          "referralContract_": "The referral contract if any for this action.",
          "reputationalAlbtRewardsPerLevel": "The reputational albt reward for this action per staker level.",
          "reputationalAlbtRewardsPerLevelAfterFirstTime": "The reputational albt reward for this action per staker level after first time."
        }
      },
      "initialize(uint256[4],uint256[4],address,address)": {
        "details": "Initializer of the ActionVerifier contract.",
        "params": {
          "escrow_": "The address of the escrow.",
          "maxActionsPerDayPerLevel_": "The max actions that an account can take rewards for in one day.",
          "rewardsPerActionProvisionPerLevel_": "The reward that an action provider accumulates for each action provision per level.",
          "stakerMedalNft_": "The address of the stakerMedalNft."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "provideRewardsForActions((string,string,address,uint256)[],bytes[])": {
        "details": "This function is used by users to provide rewards to all users for their actions.",
        "params": {
          "actions": "The actions provided.",
          "signatures": "The signatures representing the actions."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAction(string,uint256[4],uint256[4],uint256,address)": {
        "details": "This function is used by the owner to update already existing actions.",
        "params": {
          "action": "The name of the action.",
          "minimumLevelForProvision": "The minimum staker level to be able to provide rewards for this action.",
          "referralContract_": "The referral contract if any for this action.",
          "reputationalAlbtRewardsPerLevel": "The reputational albt reward for this action per staker level.",
          "reputationalAlbtRewardsPerLevelAfterFirstTime": "The reputational albt reward for this action per staker level after first time."
        }
      },
      "updateVariables(uint256[4],uint256[4])": {
        "details": "This function is used by the owner to update variables.",
        "params": {
          "maxActionsPerDayPerLevel_": "The max actions that an account can take rewards for in one day.",
          "rewardsPerActionProvisionPerLevel_": "The reward that an action provider accumulates for each action provision per level."
        }
      }
    },
    "title": "AllianceBlock ActionVerifier contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkAction(string,uint256)": {
        "notice": "Check Action"
      }
    },
    "notice": "Handles user's Actions and Rewards within the protocol",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 890,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 893,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2584,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 440,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3091,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 3134,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5939,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "rewardPerActionPerLevel",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 5945,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "rewardPerActionPerLevelAfterFirstTime",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 5949,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "minimumLevelForActionProvision",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 5953,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "referralContract",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_bytes32,t_contract(IReferralContract)9675)"
      },
      {
        "astId": 5957,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "rewardPerActionProvisionPerLevel",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5961,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "maxActionsPerDayPerLevel",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5967,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "actionsProvidedPerAccountPerEpoch",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 5973,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "lastEpochActionDonePerAccount",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 5975,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "currentEpoch",
        "offset": 0,
        "slot": "159",
        "type": "t_uint256"
      },
      {
        "astId": 5977,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "endingTimestampForCurrentEpoch",
        "offset": 0,
        "slot": "160",
        "type": "t_uint256"
      },
      {
        "astId": 5982,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "escrow",
        "offset": 0,
        "slot": "161",
        "type": "t_contract(IEscrow)9553"
      },
      {
        "astId": 5984,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "stakerMedalNft",
        "offset": 0,
        "slot": "162",
        "type": "t_contract(IStakerMedalNFT)9686"
      },
      {
        "astId": 5986,
        "contract": "contracts/ActionVerifier.sol:ActionVerifier",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "163",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IEscrow)9553": {
        "encoding": "inplace",
        "label": "contract IEscrow",
        "numberOfBytes": "20"
      },
      "t_contract(IReferralContract)9675": {
        "encoding": "inplace",
        "label": "contract IReferralContract",
        "numberOfBytes": "20"
      },
      "t_contract(IStakerMedalNFT)9686": {
        "encoding": "inplace",
        "label": "contract IStakerMedalNFT",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_bytes32,t_contract(IReferralContract)9675)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => contract IReferralContract)",
        "numberOfBytes": "32",
        "value": "t_contract(IReferralContract)9675"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}