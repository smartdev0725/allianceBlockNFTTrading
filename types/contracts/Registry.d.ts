/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface RegistryContract extends Truffle.Contract<RegistryInstance> {
  "new"(
    escrowAddress: string,
    governanceAddress_: string,
    lendingToken_: string,
    mainNFT_: string,
    loanNFT_: string,
    baseAmountForEachPartition_: number | BN | string,
    minimumInterestPercentage_: number | BN | string,
    maxMilestones_: number | BN | string,
    milestoneExtensionInterval_: number | BN | string,
    vestingBatches_: number | BN | string,
    vestingTimeInterval_: number | BN | string,
    meta?: Truffle.TransactionDetails
  ): Promise<RegistryInstance>;
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

type AllEvents = OwnershipTransferred;

export interface RegistryInstance extends Truffle.ContractInstance {
  applyMilestone: {
    (
      loanId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      loanId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      loanId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      loanId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  baseAmountForEachPartition(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  challengeLoan: {
    (
      loanId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      loanId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      loanId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      loanId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decideForLoan: {
    (
      loanId: number | BN | string,
      decision: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      loanId: number | BN | string,
      decision: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      loanId: number | BN | string,
      decision: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      loanId: number | BN | string,
      decision: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decideForMilestone: {
    (
      loanId: number | BN | string,
      decision: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      loanId: number | BN | string,
      decision: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      loanId: number | BN | string,
      decision: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      loanId: number | BN | string,
      decision: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  escrow(txDetails?: Truffle.TransactionDetails): Promise<string>;

  executePayment: {
    (
      loanId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      loanId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      loanId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      loanId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  fundLoan: {
    (
      loanId: number | BN | string,
      partitionsToPurchase: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      loanId: number | BN | string,
      partitionsToPurchase: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      loanId: number | BN | string,
      partitionsToPurchase: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      loanId: number | BN | string,
      partitionsToPurchase: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getLoanStatus: {
    (
      loanId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      loanId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      loanId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      loanId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  governance(txDetails?: Truffle.TransactionDetails): Promise<string>;

  lendingToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  loanBorrower(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  loanDetails(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: BN;
    1: BN;
    2: BN;
    3: string;
    4: BN;
    5: BN;
    6: BN;
    7: BN;
    8: string;
    9: BN;
  }>;

  loanNFT(txDetails?: Truffle.TransactionDetails): Promise<string>;

  loanStatus(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  mainNFT(txDetails?: Truffle.TransactionDetails): Promise<string>;

  maxMilestones(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  milestoneExtensionInterval(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  minimumInterestPercentage(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  personalLoanPayments(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: BN; 5: BN; 6: BN; 7: BN }>;

  projectLoanPayments(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: BN; 5: BN; 6: BN; 7: BN }>;

  receivePayment: {
    (
      tokenId: number | BN | string,
      amountOfTokens: number | BN | string,
      onProjectTokens: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      tokenId: number | BN | string,
      amountOfTokens: number | BN | string,
      onProjectTokens: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      tokenId: number | BN | string,
      amountOfTokens: number | BN | string,
      onProjectTokens: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      tokenId: number | BN | string,
      amountOfTokens: number | BN | string,
      onProjectTokens: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  requestPersonalLoan: {
    (
      amountRequested: number | BN | string,
      collateralToken: string,
      collateralAmount: number | BN | string,
      totalAmountOfBatches: number | BN | string,
      interestPercentage: number | BN | string,
      batchTimeInterval: number | BN | string,
      extraInfo: string,
      repaymentBatchType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      amountRequested: number | BN | string,
      collateralToken: string,
      collateralAmount: number | BN | string,
      totalAmountOfBatches: number | BN | string,
      interestPercentage: number | BN | string,
      batchTimeInterval: number | BN | string,
      extraInfo: string,
      repaymentBatchType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amountRequested: number | BN | string,
      collateralToken: string,
      collateralAmount: number | BN | string,
      totalAmountOfBatches: number | BN | string,
      interestPercentage: number | BN | string,
      batchTimeInterval: number | BN | string,
      extraInfo: string,
      repaymentBatchType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountRequested: number | BN | string,
      collateralToken: string,
      collateralAmount: number | BN | string,
      totalAmountOfBatches: number | BN | string,
      interestPercentage: number | BN | string,
      batchTimeInterval: number | BN | string,
      extraInfo: string,
      repaymentBatchType: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  requestProjectLoan: {
    (
      amountRequestedPerMilestone: (number | BN | string)[],
      collateralToken: string,
      collateralAmount: number | BN | string,
      interestPercentage: number | BN | string,
      totalMilestones: number | BN | string,
      milestoneDurations: (number | BN | string)[],
      timeDiffBetweenDeliveryAndRepayment: number | BN | string,
      extraInfo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      amountRequestedPerMilestone: (number | BN | string)[],
      collateralToken: string,
      collateralAmount: number | BN | string,
      interestPercentage: number | BN | string,
      totalMilestones: number | BN | string,
      milestoneDurations: (number | BN | string)[],
      timeDiffBetweenDeliveryAndRepayment: number | BN | string,
      extraInfo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      amountRequestedPerMilestone: (number | BN | string)[],
      collateralToken: string,
      collateralAmount: number | BN | string,
      interestPercentage: number | BN | string,
      totalMilestones: number | BN | string,
      milestoneDurations: (number | BN | string)[],
      timeDiffBetweenDeliveryAndRepayment: number | BN | string,
      extraInfo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amountRequestedPerMilestone: (number | BN | string)[],
      collateralToken: string,
      collateralAmount: number | BN | string,
      interestPercentage: number | BN | string,
      totalMilestones: number | BN | string,
      milestoneDurations: (number | BN | string)[],
      timeDiffBetweenDeliveryAndRepayment: number | BN | string,
      extraInfo: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  totalLoans(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  vestingBatches(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  vestingTimeInterval(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  methods: {
    applyMilestone: {
      (
        loanId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        loanId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        loanId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        loanId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    baseAmountForEachPartition(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    challengeLoan: {
      (
        loanId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        loanId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        loanId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        loanId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    decideForLoan: {
      (
        loanId: number | BN | string,
        decision: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        loanId: number | BN | string,
        decision: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        loanId: number | BN | string,
        decision: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        loanId: number | BN | string,
        decision: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    decideForMilestone: {
      (
        loanId: number | BN | string,
        decision: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        loanId: number | BN | string,
        decision: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        loanId: number | BN | string,
        decision: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        loanId: number | BN | string,
        decision: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    escrow(txDetails?: Truffle.TransactionDetails): Promise<string>;

    executePayment: {
      (
        loanId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        loanId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        loanId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        loanId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    fundLoan: {
      (
        loanId: number | BN | string,
        partitionsToPurchase: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        loanId: number | BN | string,
        partitionsToPurchase: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        loanId: number | BN | string,
        partitionsToPurchase: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        loanId: number | BN | string,
        partitionsToPurchase: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getLoanStatus: {
      (
        loanId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        loanId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        loanId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        loanId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    governance(txDetails?: Truffle.TransactionDetails): Promise<string>;

    lendingToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

    loanBorrower(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    loanDetails(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: BN;
      1: BN;
      2: BN;
      3: string;
      4: BN;
      5: BN;
      6: BN;
      7: BN;
      8: string;
      9: BN;
    }>;

    loanNFT(txDetails?: Truffle.TransactionDetails): Promise<string>;

    loanStatus(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    mainNFT(txDetails?: Truffle.TransactionDetails): Promise<string>;

    maxMilestones(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    milestoneExtensionInterval(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    minimumInterestPercentage(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    personalLoanPayments(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: BN; 5: BN; 6: BN; 7: BN }>;

    projectLoanPayments(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN; 3: BN; 4: BN; 5: BN; 6: BN; 7: BN }>;

    receivePayment: {
      (
        tokenId: number | BN | string,
        amountOfTokens: number | BN | string,
        onProjectTokens: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        tokenId: number | BN | string,
        amountOfTokens: number | BN | string,
        onProjectTokens: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        tokenId: number | BN | string,
        amountOfTokens: number | BN | string,
        onProjectTokens: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        tokenId: number | BN | string,
        amountOfTokens: number | BN | string,
        onProjectTokens: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    requestPersonalLoan: {
      (
        amountRequested: number | BN | string,
        collateralToken: string,
        collateralAmount: number | BN | string,
        totalAmountOfBatches: number | BN | string,
        interestPercentage: number | BN | string,
        batchTimeInterval: number | BN | string,
        extraInfo: string,
        repaymentBatchType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        amountRequested: number | BN | string,
        collateralToken: string,
        collateralAmount: number | BN | string,
        totalAmountOfBatches: number | BN | string,
        interestPercentage: number | BN | string,
        batchTimeInterval: number | BN | string,
        extraInfo: string,
        repaymentBatchType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        amountRequested: number | BN | string,
        collateralToken: string,
        collateralAmount: number | BN | string,
        totalAmountOfBatches: number | BN | string,
        interestPercentage: number | BN | string,
        batchTimeInterval: number | BN | string,
        extraInfo: string,
        repaymentBatchType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        amountRequested: number | BN | string,
        collateralToken: string,
        collateralAmount: number | BN | string,
        totalAmountOfBatches: number | BN | string,
        interestPercentage: number | BN | string,
        batchTimeInterval: number | BN | string,
        extraInfo: string,
        repaymentBatchType: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    requestProjectLoan: {
      (
        amountRequestedPerMilestone: (number | BN | string)[],
        collateralToken: string,
        collateralAmount: number | BN | string,
        interestPercentage: number | BN | string,
        totalMilestones: number | BN | string,
        milestoneDurations: (number | BN | string)[],
        timeDiffBetweenDeliveryAndRepayment: number | BN | string,
        extraInfo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        amountRequestedPerMilestone: (number | BN | string)[],
        collateralToken: string,
        collateralAmount: number | BN | string,
        interestPercentage: number | BN | string,
        totalMilestones: number | BN | string,
        milestoneDurations: (number | BN | string)[],
        timeDiffBetweenDeliveryAndRepayment: number | BN | string,
        extraInfo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        amountRequestedPerMilestone: (number | BN | string)[],
        collateralToken: string,
        collateralAmount: number | BN | string,
        interestPercentage: number | BN | string,
        totalMilestones: number | BN | string,
        milestoneDurations: (number | BN | string)[],
        timeDiffBetweenDeliveryAndRepayment: number | BN | string,
        extraInfo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        amountRequestedPerMilestone: (number | BN | string)[],
        collateralToken: string,
        collateralAmount: number | BN | string,
        interestPercentage: number | BN | string,
        totalMilestones: number | BN | string,
        milestoneDurations: (number | BN | string)[],
        timeDiffBetweenDeliveryAndRepayment: number | BN | string,
        extraInfo: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    totalLoans(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    vestingBatches(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    vestingTimeInterval(txDetails?: Truffle.TransactionDetails): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
